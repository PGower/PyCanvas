{
  "swaggerVersion": "1.2", 
  "apis": [
    {
      "operations": [
        {
          "parameters": [
            {
              "enum": [
                "lti_guid", 
                "registration_settings"
              ], 
              "name": "include", 
              "format": null, 
              "items": {
                "type": "string"
              }, 
              "paramType": "query", 
              "required": false, 
              "type": "array", 
              "description": "Array of additional information to include. \"lti_guid\":: the 'tool_consumer_instance_guid' that will be sent for this account on LTI launches \"registration_settings\":: returns info about the privacy policy and terms of use"
            }
          ], 
          "nickname": "list_accounts", 
          "notes": "List accounts that the current user can view or manage.  Typically,\nstudents and even teachers will get an empty list in response, only\naccount admins can view the accounts that they are in.", 
          "summary": "List accounts", 
          "items": {
            "$ref": "Account"
          }, 
          "type": "array", 
          "method": "GET"
        }
      ], 
      "path": "/v1/accounts", 
      "description": "List accounts that the current user can view or manage.  Typically,\nstudents and even teachers will get an empty list in response, only\naccount admins can view the accounts that they are in."
    }, 
    {
      "operations": [
        {
          "parameters": [], 
          "nickname": "list_accounts_for_course_admins", 
          "notes": "List accounts that the current user can view through their admin course enrollments.\n(Teacher, TA, or designer enrollments).\nOnly returns \"id\", \"name\", \"workflow_state\", \"root_account_id\" and \"parent_account_id\"", 
          "summary": "List accounts for course admins", 
          "items": {
            "$ref": "Account"
          }, 
          "type": "array", 
          "method": "GET"
        }
      ], 
      "path": "/v1/course_accounts", 
      "description": "List accounts that the current user can view through their admin course enrollments.\n(Teacher, TA, or designer enrollments).\nOnly returns \"id\", \"name\", \"workflow_state\", \"root_account_id\" and \"parent_account_id\""
    }, 
    {
      "operations": [
        {
          "parameters": [
            {
              "name": "id", 
              "format": null, 
              "paramType": "path", 
              "required": true, 
              "type": "string", 
              "description": "ID"
            }
          ], 
          "nickname": "get_single_account", 
          "notes": "Retrieve information on an individual account, given by id or sis\nsis_account_id.", 
          "summary": "Get a single account", 
          "type": "Account", 
          "method": "GET"
        }
      ], 
      "path": "/v1/accounts/{id}", 
      "description": "Retrieve information on an individual account, given by id or sis\nsis_account_id."
    }, 
    {
      "operations": [
        {
          "parameters": [
            {
              "name": "account_id", 
              "format": null, 
              "paramType": "path", 
              "required": true, 
              "type": "string", 
              "description": "ID"
            }, 
            {
              "name": "recursive", 
              "format": null, 
              "paramType": "query", 
              "required": false, 
              "type": "boolean", 
              "description": "If true, the entire account tree underneath this account will be returned (though still paginated). If false, only direct sub-accounts of this account will be returned. Defaults to false."
            }
          ], 
          "nickname": "get_sub_accounts_of_account", 
          "notes": "List accounts that are sub-accounts of the given account.", 
          "summary": "Get the sub-accounts of an account", 
          "items": {
            "$ref": "Account"
          }, 
          "type": "array", 
          "method": "GET"
        }
      ], 
      "path": "/v1/accounts/{account_id}/sub_accounts", 
      "description": "List accounts that are sub-accounts of the given account."
    }, 
    {
      "operations": [
        {
          "parameters": [
            {
              "name": "account_id", 
              "format": null, 
              "paramType": "path", 
              "required": true, 
              "type": "string", 
              "description": "ID"
            }, 
            {
              "name": "with_enrollments", 
              "format": null, 
              "paramType": "query", 
              "required": false, 
              "type": "boolean", 
              "description": "If true, include only courses with at least one enrollment. If false, include only courses with no enrollments. If not present, do not filter on course enrollment status."
            }, 
            {
              "name": "published", 
              "format": null, 
              "paramType": "query", 
              "required": false, 
              "type": "boolean", 
              "description": "If true, include only published courses. If false, exclude published courses. If not present, do not filter on published status."
            }, 
            {
              "name": "completed", 
              "format": null, 
              "paramType": "query", 
              "required": false, 
              "type": "boolean", 
              "description": "If true, include only completed courses (these may be in state 'completed', or their enrollment term may have ended). If false, exclude completed courses. If not present, do not filter on completed status."
            }, 
            {
              "name": "by_teachers", 
              "format": "int64", 
              "items": {
                "type": "integer"
              }, 
              "paramType": "query", 
              "required": false, 
              "type": "array", 
              "description": "List of User IDs of teachers; if supplied, include only courses taught by one of the referenced users."
            }, 
            {
              "name": "by_subaccounts", 
              "format": "int64", 
              "items": {
                "type": "integer"
              }, 
              "paramType": "query", 
              "required": false, 
              "type": "array", 
              "description": "List of Account IDs; if supplied, include only courses associated with one of the referenced subaccounts."
            }, 
            {
              "name": "hide_enrollmentless_courses", 
              "format": null, 
              "paramType": "query", 
              "required": false, 
              "type": "boolean", 
              "description": "If present, only return courses that have at least one enrollment. Equivalent to 'with_enrollments=true'; retained for compatibility."
            }, 
            {
              "enum": [
                "created", 
                "claimed", 
                "available", 
                "completed", 
                "deleted", 
                "all"
              ], 
              "name": "state", 
              "format": null, 
              "items": {
                "type": "string"
              }, 
              "paramType": "query", 
              "required": false, 
              "type": "array", 
              "description": "If set, only return courses that are in the given state(s). By default, all states but \"deleted\" are returned."
            }, 
            {
              "name": "enrollment_term_id", 
              "format": "int64", 
              "paramType": "query", 
              "required": false, 
              "type": "integer", 
              "description": "If set, only includes courses from the specified term."
            }, 
            {
              "name": "search_term", 
              "format": null, 
              "paramType": "query", 
              "required": false, 
              "type": "string", 
              "description": "The partial course name, code, or full ID to match and return in the results list. Must be at least 3 characters."
            }, 
            {
              "enum": [
                "needs_grading_count", 
                "syllabus_body", 
                "total_scores", 
                "term", 
                "course_progress", 
                "sections", 
                "storage_quota_used_mb"
              ], 
              "name": "include", 
              "format": null, 
              "items": {
                "type": "string"
              }, 
              "paramType": "query", 
              "required": false, 
              "type": "array", 
              "description": "- All explanations can be seen in the {api:CoursesController#index Course API index documentation}"
            }
          ], 
          "nickname": "list_active_courses_in_account", 
          "notes": "Retrieve the list of courses in this account.", 
          "summary": "List active courses in an account", 
          "items": {
            "$ref": "Course"
          }, 
          "type": "array", 
          "method": "GET"
        }
      ], 
      "path": "/v1/accounts/{account_id}/courses", 
      "description": "Retrieve the list of courses in this account."
    }, 
    {
      "operations": [
        {
          "parameters": [
            {
              "name": "id", 
              "format": null, 
              "paramType": "path", 
              "required": true, 
              "type": "string", 
              "description": "ID"
            }, 
            {
              "name": "account[name]", 
              "format": null, 
              "paramType": "form", 
              "required": false, 
              "type": "string", 
              "description": "Updates the account name"
            }, 
            {
              "name": "account[default_time_zone]", 
              "format": null, 
              "paramType": "form", 
              "required": false, 
              "type": "string", 
              "description": "The default time zone of the account. Allowed time zones are {http://www.iana.org/time-zones IANA time zones} or friendlier {http://api.rubyonrails.org/classes/ActiveSupport/TimeZone.html Ruby on Rails time zones}."
            }, 
            {
              "name": "account[default_storage_quota_mb]", 
              "format": "int64", 
              "paramType": "form", 
              "required": false, 
              "type": "integer", 
              "description": "The default course storage quota to be used, if not otherwise specified."
            }, 
            {
              "name": "account[default_user_storage_quota_mb]", 
              "format": "int64", 
              "paramType": "form", 
              "required": false, 
              "type": "integer", 
              "description": "The default user storage quota to be used, if not otherwise specified."
            }, 
            {
              "name": "account[default_group_storage_quota_mb]", 
              "format": "int64", 
              "paramType": "form", 
              "required": false, 
              "type": "integer", 
              "description": "The default group storage quota to be used, if not otherwise specified."
            }
          ], 
          "nickname": "update_account", 
          "notes": "Update an existing account.", 
          "summary": "Update an account", 
          "type": "Account", 
          "method": "PUT"
        }
      ], 
      "path": "/v1/accounts/{id}", 
      "description": "Update an existing account."
    }, 
    {
      "operations": [
        {
          "parameters": [
            {
              "name": "account_id", 
              "format": null, 
              "paramType": "path", 
              "required": true, 
              "type": "string", 
              "description": "ID"
            }, 
            {
              "name": "user_id", 
              "format": null, 
              "paramType": "path", 
              "required": true, 
              "type": "string", 
              "description": "ID"
            }
          ], 
          "nickname": "delete_user_from_root_account", 
          "notes": "Delete a user record from a Canvas root account. If a user is associated\nwith multiple root accounts (in a multi-tenant instance of Canvas), this\naction will NOT remove them from the other accounts.\n\nWARNING: This API will allow a user to remove themselves from the account.\nIf they do this, they won't be able to make API calls or log into Canvas at\nthat account.", 
          "summary": "Delete a user from the root account", 
          "type": "User", 
          "method": "DELETE"
        }
      ], 
      "path": "/v1/accounts/{account_id}/users/{user_id}", 
      "description": "Delete a user record from a Canvas root account. If a user is associated\nwith multiple root accounts (in a multi-tenant instance of Canvas), this\naction will NOT remove them from the other accounts.\n\nWARNING: This API will allow a user to remove themselves from the account.\nIf they do this, they won't be able to make API calls or log into Canvas at\nthat account."
    }, 
    {
      "operations": [
        {
          "parameters": [
            {
              "name": "account_id", 
              "format": null, 
              "paramType": "path", 
              "required": true, 
              "type": "string", 
              "description": "ID"
            }, 
            {
              "name": "account[name]", 
              "format": null, 
              "paramType": "form", 
              "required": true, 
              "type": "string", 
              "description": "The name of the new sub-account."
            }, 
            {
              "name": "account[default_storage_quota_mb]", 
              "format": "int64", 
              "paramType": "form", 
              "required": false, 
              "type": "integer", 
              "description": "The default course storage quota to be used, if not otherwise specified."
            }, 
            {
              "name": "account[default_user_storage_quota_mb]", 
              "format": "int64", 
              "paramType": "form", 
              "required": false, 
              "type": "integer", 
              "description": "The default user storage quota to be used, if not otherwise specified."
            }, 
            {
              "name": "account[default_group_storage_quota_mb]", 
              "format": "int64", 
              "paramType": "form", 
              "required": false, 
              "type": "integer", 
              "description": "The default group storage quota to be used, if not otherwise specified."
            }
          ], 
          "nickname": "create_new_sub_account", 
          "notes": "Add a new sub-account to a given account.", 
          "summary": "Create a new sub-account", 
          "items": {
            "$ref": "Account"
          }, 
          "type": "array", 
          "method": "POST"
        }
      ], 
      "path": "/v1/accounts/{account_id}/sub_accounts", 
      "description": "Add a new sub-account to a given account."
    }, 
    {
      "operations": [
        {
          "parameters": [
            {
              "name": "account_id", 
              "format": null, 
              "paramType": "path", 
              "required": true, 
              "type": "string", 
              "description": "ID"
            }
          ], 
          "nickname": "list_authorization_configs", 
          "notes": "Returns the list of authorization configs", 
          "summary": "List Authorization Configs", 
          "items": {
            "$ref": "AccountAuthorizationConfig"
          }, 
          "type": "array", 
          "method": "GET"
        }
      ], 
      "path": "/v1/accounts/{account_id}/account_authorization_configs", 
      "description": "Returns the list of authorization configs"
    }, 
    {
      "operations": [
        {
          "parameters": [
            {
              "name": "account_id", 
              "format": null, 
              "paramType": "path", 
              "required": true, 
              "type": "string", 
              "description": "ID"
            }
          ], 
          "nickname": "create_authorization_config", 
          "notes": "Add external account authentication service(s) for the account.\nServices may be CAS, SAML, or LDAP.\n\nEach authentication service is specified as a set of parameters as\ndescribed below. A service specification must include an 'auth_type'\nparameter with a value of 'cas', 'saml', or 'ldap'. The other recognized\nparameters depend on this auth_type; unrecognized parameters are discarded.\nService specifications not specifying a valid auth_type are ignored.\n\nAny service specification may include an optional 'login_handle_name'\nparameter. This parameter specifies the label used for unique login\nidentifiers; for example: 'Login', 'Username', 'Student ID', etc. The\ndefault is 'Email'.\n\nYou can set the 'position' for any configuration. The config in the 1st position\nis considered the default.\n\nFor CAS authentication services, the additional recognized parameters are:\n\n- auth_base\n\n  The CAS server's URL.\n\n- log_in_url [Optional]\n\n  An alternate SSO URL for logging into CAS. You probably should not set\n  this.\n\n- unknown_user_url [Optional]\n\n  A url to redirect to when a user is authorized through CAS but is not\n  found in Canvas.\n\nFor SAML authentication services, the additional recognized parameters are:\n\n- idp_entity_id\n\n  The SAML IdP's entity ID - This is used to look up the correct SAML IdP if\n  multiple are configured\n\n- log_in_url\n\n  The SAML service's SSO target URL\n\n- log_out_url\n\n  The SAML service's SLO target URL\n\n- certificate_fingerprint\n\n  The SAML service's certificate fingerprint.\n\n- change_password_url [Optional]\n\n  Forgot Password URL. Leave blank for default Canvas behavior.\n\n- unknown_user_url [Optional]\n\n  A url to redirect to when a user is authorized through SAML but is not\n  found in Canvas.\n\n- identifier_format\n\n  The SAML service's identifier format. Must be one of:\n\n  - urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress\n  - urn:oasis:names:tc:SAML:2.0:nameid-format:entity\n  - urn:oasis:names:tc:SAML:2.0:nameid-format:kerberos\n  - urn:oasis:names:tc:SAML:2.0:nameid-format:persistent\n  - urn:oasis:names:tc:SAML:2.0:nameid-format:transient\n  - urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified\n  - urn:oasis:names:tc:SAML:1.1:nameid-format:WindowsDomainQualifiedName\n  - urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName\n\n- requested_authn_context\n\n  The SAML AuthnContext\n\nFor LDAP authentication services, the additional recognized parameters are:\n\n- auth_host\n\n  The LDAP server's URL.\n\n- auth_port [Optional, Integer]\n\n  The LDAP server's TCP port. (default: 389)\n\n- auth_over_tls [Optional]\n\n  Whether to use TLS. Can be '', 'simple_tls', or 'start_tls'. For backwards\n  compatibility, booleans are also accepted, with true meaning simple_tls.\n  If not provided, it will default to start_tls.\n\n- auth_base [Optional]\n\n  A default treebase parameter for searches performed against the LDAP\n  server.\n\n- auth_filter\n\n  LDAP search filter. Use !{{login}} as a placeholder for the username\n  supplied by the user. For example: \"(sAMAccountName=!{{login}})\".\n\n- identifier_format [Optional]\n\n  The LDAP attribute to use to look up the Canvas login. Omit to use\n  the username supplied by the user.\n\n- auth_username\n\n  Username\n\n- auth_password\n\n  Password\n\n- change_password_url [Optional]\n\n  Forgot Password URL. Leave blank for default Canvas behavior.\n\n- account_authorization_config[n] (deprecated)\n  The nth service specification as described above. For instance, the\n  auth_type of the first service is given by the\n  account_authorization_config[0][auth_type] parameter. There must be\n  either a single CAS or SAML specification, or one or more LDAP\n  specifications. Additional services after an initial CAS or SAML service\n  are ignored; additional non-LDAP services after an initial LDAP service\n  are ignored.\n\n_Deprecated_ Examples:\n\nThis endpoint still supports a deprecated version of setting the authorization configs.\nIf you send data in this format it is considered a snapshot of how the configs\nshould be setup and will clear any configs not sent.\n\nSimple CAS server integration.\n\n  account_authorization_config[0][auth_type]=cas&\n  account_authorization_config[0][auth_base]=cas.mydomain.edu\n\nSingle SAML server integration.\n\n  account_authorization_config[0][idp_entity_id]=http://idp.myschool.com/sso/saml2\n  account_authorization_config[0][log_in_url]=saml-sso.mydomain.com&\n  account_authorization_config[0][log_out_url]=saml-slo.mydomain.com&\n  account_authorization_config[0][certificate_fingerprint]=1234567890ABCDEF&\n  account_authorization_config[0][identifier_format]=urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress\n\nTwo SAML server integration with discovery url.\n\n  discovery_url=http://www.myschool.com/sso/identity_provider_selection\n  account_authorization_config[0][idp_entity_id]=http://idp.myschool.com/sso/saml2&\n  account_authorization_config[0][log_in_url]=saml-sso.mydomain.com&\n  account_authorization_config[0][log_out_url]=saml-slo.mydomain.com&\n  account_authorization_config[0][certificate_fingerprint]=1234567890ABCDEF&\n  account_authorization_config[0][identifier_format]=urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress&\n  account_authorization_config[1][idp_entity_id]=http://idp.otherschool.com/sso/saml2&\n  account_authorization_config[1][log_in_url]=saml-sso.otherdomain.com&\n  account_authorization_config[1][log_out_url]=saml-slo.otherdomain.com&\n  account_authorization_config[1][certificate_fingerprint]=ABCDEFG12345678789&\n  account_authorization_config[1][identifier_format]=urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress\n\nSingle LDAP server integration.\n\n  account_authorization_config[0][auth_type]=ldap&\n  account_authorization_config[0][auth_host]=ldap.mydomain.edu&\n  account_authorization_config[0][auth_filter]=(sAMAccountName={{login}})&\n  account_authorization_config[0][auth_username]=username&\n  account_authorization_config[0][auth_password]=password\n\nMultiple LDAP server integration.\n\n  account_authorization_config[0][auth_type]=ldap&\n  account_authorization_config[0][auth_host]=faculty-ldap.mydomain.edu&\n  account_authorization_config[0][auth_filter]=(sAMAccountName={{login}})&\n  account_authorization_config[0][auth_username]=username&\n  account_authorization_config[0][auth_password]=password&\n  account_authorization_config[1][auth_type]=ldap&\n  account_authorization_config[1][auth_host]=student-ldap.mydomain.edu&\n  account_authorization_config[1][auth_filter]=(sAMAccountName={{login}})&\n  account_authorization_config[1][auth_username]=username&\n  account_authorization_config[1][auth_password]=password", 
          "summary": "Create Authorization Config", 
          "type": "AccountAuthorizationConfig", 
          "method": "POST"
        }
      ], 
      "path": "/v1/accounts/{account_id}/account_authorization_configs", 
      "description": "Add external account authentication service(s) for the account.\nServices may be CAS, SAML, or LDAP.\n\nEach authentication service is specified as a set of parameters as\ndescribed below. A service specification must include an 'auth_type'\nparameter with a value of 'cas', 'saml', or 'ldap'. The other recognized\nparameters depend on this auth_type; unrecognized parameters are discarded.\nService specifications not specifying a valid auth_type are ignored.\n\nAny service specification may include an optional 'login_handle_name'\nparameter. This parameter specifies the label used for unique login\nidentifiers; for example: 'Login', 'Username', 'Student ID', etc. The\ndefault is 'Email'.\n\nYou can set the 'position' for any configuration. The config in the 1st position\nis considered the default.\n\nFor CAS authentication services, the additional recognized parameters are:\n\n- auth_base\n\n  The CAS server's URL.\n\n- log_in_url [Optional]\n\n  An alternate SSO URL for logging into CAS. You probably should not set\n  this.\n\n- unknown_user_url [Optional]\n\n  A url to redirect to when a user is authorized through CAS but is not\n  found in Canvas.\n\nFor SAML authentication services, the additional recognized parameters are:\n\n- idp_entity_id\n\n  The SAML IdP's entity ID - This is used to look up the correct SAML IdP if\n  multiple are configured\n\n- log_in_url\n\n  The SAML service's SSO target URL\n\n- log_out_url\n\n  The SAML service's SLO target URL\n\n- certificate_fingerprint\n\n  The SAML service's certificate fingerprint.\n\n- change_password_url [Optional]\n\n  Forgot Password URL. Leave blank for default Canvas behavior.\n\n- unknown_user_url [Optional]\n\n  A url to redirect to when a user is authorized through SAML but is not\n  found in Canvas.\n\n- identifier_format\n\n  The SAML service's identifier format. Must be one of:\n\n  - urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress\n  - urn:oasis:names:tc:SAML:2.0:nameid-format:entity\n  - urn:oasis:names:tc:SAML:2.0:nameid-format:kerberos\n  - urn:oasis:names:tc:SAML:2.0:nameid-format:persistent\n  - urn:oasis:names:tc:SAML:2.0:nameid-format:transient\n  - urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified\n  - urn:oasis:names:tc:SAML:1.1:nameid-format:WindowsDomainQualifiedName\n  - urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName\n\n- requested_authn_context\n\n  The SAML AuthnContext\n\nFor LDAP authentication services, the additional recognized parameters are:\n\n- auth_host\n\n  The LDAP server's URL.\n\n- auth_port [Optional, Integer]\n\n  The LDAP server's TCP port. (default: 389)\n\n- auth_over_tls [Optional]\n\n  Whether to use TLS. Can be '', 'simple_tls', or 'start_tls'. For backwards\n  compatibility, booleans are also accepted, with true meaning simple_tls.\n  If not provided, it will default to start_tls.\n\n- auth_base [Optional]\n\n  A default treebase parameter for searches performed against the LDAP\n  server.\n\n- auth_filter\n\n  LDAP search filter. Use !{{login}} as a placeholder for the username\n  supplied by the user. For example: \"(sAMAccountName=!{{login}})\".\n\n- identifier_format [Optional]\n\n  The LDAP attribute to use to look up the Canvas login. Omit to use\n  the username supplied by the user.\n\n- auth_username\n\n  Username\n\n- auth_password\n\n  Password\n\n- change_password_url [Optional]\n\n  Forgot Password URL. Leave blank for default Canvas behavior.\n\n- account_authorization_config[n] (deprecated)\n  The nth service specification as described above. For instance, the\n  auth_type of the first service is given by the\n  account_authorization_config[0][auth_type] parameter. There must be\n  either a single CAS or SAML specification, or one or more LDAP\n  specifications. Additional services after an initial CAS or SAML service\n  are ignored; additional non-LDAP services after an initial LDAP service\n  are ignored.\n\n_Deprecated_ Examples:\n\nThis endpoint still supports a deprecated version of setting the authorization configs.\nIf you send data in this format it is considered a snapshot of how the configs\nshould be setup and will clear any configs not sent.\n\nSimple CAS server integration.\n\n  account_authorization_config[0][auth_type]=cas&\n  account_authorization_config[0][auth_base]=cas.mydomain.edu\n\nSingle SAML server integration.\n\n  account_authorization_config[0][idp_entity_id]=http://idp.myschool.com/sso/saml2\n  account_authorization_config[0][log_in_url]=saml-sso.mydomain.com&\n  account_authorization_config[0][log_out_url]=saml-slo.mydomain.com&\n  account_authorization_config[0][certificate_fingerprint]=1234567890ABCDEF&\n  account_authorization_config[0][identifier_format]=urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress\n\nTwo SAML server integration with discovery url.\n\n  discovery_url=http://www.myschool.com/sso/identity_provider_selection\n  account_authorization_config[0][idp_entity_id]=http://idp.myschool.com/sso/saml2&\n  account_authorization_config[0][log_in_url]=saml-sso.mydomain.com&\n  account_authorization_config[0][log_out_url]=saml-slo.mydomain.com&\n  account_authorization_config[0][certificate_fingerprint]=1234567890ABCDEF&\n  account_authorization_config[0][identifier_format]=urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress&\n  account_authorization_config[1][idp_entity_id]=http://idp.otherschool.com/sso/saml2&\n  account_authorization_config[1][log_in_url]=saml-sso.otherdomain.com&\n  account_authorization_config[1][log_out_url]=saml-slo.otherdomain.com&\n  account_authorization_config[1][certificate_fingerprint]=ABCDEFG12345678789&\n  account_authorization_config[1][identifier_format]=urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress\n\nSingle LDAP server integration.\n\n  account_authorization_config[0][auth_type]=ldap&\n  account_authorization_config[0][auth_host]=ldap.mydomain.edu&\n  account_authorization_config[0][auth_filter]=(sAMAccountName={{login}})&\n  account_authorization_config[0][auth_username]=username&\n  account_authorization_config[0][auth_password]=password\n\nMultiple LDAP server integration.\n\n  account_authorization_config[0][auth_type]=ldap&\n  account_authorization_config[0][auth_host]=faculty-ldap.mydomain.edu&\n  account_authorization_config[0][auth_filter]=(sAMAccountName={{login}})&\n  account_authorization_config[0][auth_username]=username&\n  account_authorization_config[0][auth_password]=password&\n  account_authorization_config[1][auth_type]=ldap&\n  account_authorization_config[1][auth_host]=student-ldap.mydomain.edu&\n  account_authorization_config[1][auth_filter]=(sAMAccountName={{login}})&\n  account_authorization_config[1][auth_username]=username&\n  account_authorization_config[1][auth_password]=password"
    }, 
    {
      "operations": [
        {
          "parameters": [
            {
              "name": "account_id", 
              "format": null, 
              "paramType": "path", 
              "required": true, 
              "type": "string", 
              "description": "ID"
            }, 
            {
              "name": "id", 
              "format": null, 
              "paramType": "path", 
              "required": true, 
              "type": "string", 
              "description": "ID"
            }
          ], 
          "nickname": "update_authorization_config", 
          "notes": "Update an authorization config using the same options as the create endpoint.\nYou can not update an existing configuration to a new authentication type.", 
          "summary": "Update Authorization Config", 
          "type": "AccountAuthorizationConfig", 
          "method": "PUT"
        }
      ], 
      "path": "/v1/accounts/{account_id}/account_authorization_configs/{id}", 
      "description": "Update an authorization config using the same options as the create endpoint.\nYou can not update an existing configuration to a new authentication type."
    }, 
    {
      "operations": [
        {
          "parameters": [
            {
              "name": "account_id", 
              "format": null, 
              "paramType": "path", 
              "required": true, 
              "type": "string", 
              "description": "ID"
            }, 
            {
              "name": "id", 
              "format": null, 
              "paramType": "path", 
              "required": true, 
              "type": "string", 
              "description": "ID"
            }
          ], 
          "nickname": "get_authorization_config", 
          "notes": "Get the specified authorization config", 
          "summary": "Get Authorization Config", 
          "type": "AccountAuthorizationConfig", 
          "method": "GET"
        }
      ], 
      "path": "/v1/accounts/{account_id}/account_authorization_configs/{id}", 
      "description": "Get the specified authorization config"
    }, 
    {
      "operations": [
        {
          "parameters": [
            {
              "name": "account_id", 
              "format": null, 
              "paramType": "path", 
              "required": true, 
              "type": "string", 
              "description": "ID"
            }, 
            {
              "name": "id", 
              "format": null, 
              "paramType": "path", 
              "required": true, 
              "type": "string", 
              "description": "ID"
            }
          ], 
          "nickname": "delete_authorization_config", 
          "notes": "Delete the config", 
          "summary": "Delete Authorization Config", 
          "type": "void", 
          "method": "DELETE"
        }
      ], 
      "path": "/v1/accounts/{account_id}/account_authorization_configs/{id}", 
      "description": "Delete the config"
    }, 
    {
      "operations": [
        {
          "parameters": [
            {
              "name": "account_id", 
              "format": null, 
              "paramType": "path", 
              "required": true, 
              "type": "string", 
              "description": "ID"
            }
          ], 
          "nickname": "get_discovery_url", 
          "notes": "Get the discovery url", 
          "summary": "GET discovery url", 
          "type": "DiscoveryUrl", 
          "method": "GET"
        }
      ], 
      "path": "/v1/accounts/{account_id}/account_authorization_configs/discovery_url", 
      "description": "Get the discovery url"
    }, 
    {
      "operations": [
        {
          "parameters": [
            {
              "name": "account_id", 
              "format": null, 
              "paramType": "path", 
              "required": true, 
              "type": "string", 
              "description": "ID"
            }
          ], 
          "nickname": "set_discovery_url", 
          "notes": "If you have multiple IdPs configured, you can set a `discovery_url`.\nIf that is set, canvas will forward all users to that URL when they need to\nbe authenticated. That page will need to then help the user figure out where\nthey need to go to log in.\n\nIf no discovery url is configured, the 1st auth config will be used to\nattempt to authenticate the user.", 
          "summary": "Set discovery url", 
          "type": "DiscoveryUrl", 
          "method": "PUT"
        }
      ], 
      "path": "/v1/accounts/{account_id}/account_authorization_configs/discovery_url", 
      "description": "If you have multiple IdPs configured, you can set a `discovery_url`.\nIf that is set, canvas will forward all users to that URL when they need to\nbe authenticated. That page will need to then help the user figure out where\nthey need to go to log in.\n\nIf no discovery url is configured, the 1st auth config will be used to\nattempt to authenticate the user."
    }, 
    {
      "operations": [
        {
          "parameters": [
            {
              "name": "account_id", 
              "format": null, 
              "paramType": "path", 
              "required": true, 
              "type": "string", 
              "description": "ID"
            }
          ], 
          "nickname": "delete_discovery_url", 
          "notes": "Clear discovery url", 
          "summary": "Delete discovery url", 
          "type": "void", 
          "method": "DELETE"
        }
      ], 
      "path": "/v1/accounts/{account_id}/account_authorization_configs/discovery_url", 
      "description": "Clear discovery url"
    }, 
    {
      "operations": [
        {
          "parameters": [
            {
              "name": "name", 
              "format": null, 
              "paramType": "query", 
              "required": false, 
              "type": "string", 
              "description": "campus name"
            }, 
            {
              "name": "domain", 
              "format": null, 
              "paramType": "query", 
              "required": false, 
              "type": "string", 
              "description": "no description"
            }, 
            {
              "name": "latitude", 
              "format": null, 
              "paramType": "query", 
              "required": false, 
              "type": "float", 
              "description": "no description"
            }, 
            {
              "name": "longitude", 
              "format": null, 
              "paramType": "query", 
              "required": false, 
              "type": "float", 
              "description": "no description"
            }
          ], 
          "nickname": "search_account_domains", 
          "notes": "Returns a list of up to 5 matching account domains\n\nPartial match on name / domain are supported", 
          "summary": "Search account domains", 
          "type": "void", 
          "method": "GET"
        }
      ], 
      "path": "/v1/accounts/search", 
      "description": "Returns a list of up to 5 matching account domains\n\nPartial match on name / domain are supported"
    }, 
    {
      "operations": [
        {
          "parameters": [
            {
              "name": "account_id", 
              "format": null, 
              "paramType": "path", 
              "required": true, 
              "type": "string", 
              "description": "ID"
            }, 
            {
              "name": "user_id", 
              "format": null, 
              "paramType": "path", 
              "required": true, 
              "type": "string", 
              "description": "ID"
            }
          ], 
          "nickname": "index_of_active_global_notification_for_user", 
          "notes": "Returns a list of all global notifications in the account for this user\nAny notifications that have been closed by the user will not be returned", 
          "summary": "Index of active global notification for the user", 
          "items": {
            "$ref": "AccountNotification"
          }, 
          "type": "array", 
          "method": "GET"
        }
      ], 
      "path": "/v1/accounts/{account_id}/users/{user_id}/account_notifications", 
      "description": "Returns a list of all global notifications in the account for this user\nAny notifications that have been closed by the user will not be returned"
    }, 
    {
      "operations": [
        {
          "parameters": [
            {
              "name": "account_id", 
              "format": null, 
              "paramType": "path", 
              "required": true, 
              "type": "string", 
              "description": "ID"
            }, 
            {
              "name": "user_id", 
              "format": null, 
              "paramType": "path", 
              "required": true, 
              "type": "string", 
              "description": "ID"
            }, 
            {
              "name": "id", 
              "format": null, 
              "paramType": "path", 
              "required": true, 
              "type": "string", 
              "description": "ID"
            }
          ], 
          "nickname": "close_notification_for_user", 
          "notes": "If the user no long wants to see this notification it can be excused with this call", 
          "summary": "Close notification for user", 
          "type": "AccountNotification", 
          "method": "DELETE"
        }
      ], 
      "path": "/v1/accounts/{account_id}/users/{user_id}/account_notifications/{id}", 
      "description": "If the user no long wants to see this notification it can be excused with this call"
    }, 
    {
      "operations": [
        {
          "parameters": [
            {
              "name": "account_id", 
              "format": null, 
              "paramType": "path", 
              "required": true, 
              "type": "string", 
              "description": "ID"
            }, 
            {
              "name": "account_notification[subject]", 
              "format": null, 
              "paramType": "form", 
              "required": true, 
              "type": "string", 
              "description": "The subject of the notification."
            }, 
            {
              "name": "account_notification[message]", 
              "format": null, 
              "paramType": "form", 
              "required": true, 
              "type": "string", 
              "description": "The message body of the notification."
            }, 
            {
              "name": "account_notification[start_at]", 
              "format": null, 
              "paramType": "form", 
              "required": true, 
              "type": "datetime", 
              "description": "The start date and time of the notification in ISO8601 format. e.g. 2014-01-01T01:00Z"
            }, 
            {
              "name": "account_notification[end_at]", 
              "format": null, 
              "paramType": "form", 
              "required": true, 
              "type": "datetime", 
              "description": "The end date and time of the notification in ISO8601 format. e.g. 2014-01-01T01:00Z"
            }, 
            {
              "enum": [
                "warning", 
                "information", 
                "question", 
                "error", 
                "calendar"
              ], 
              "name": "account_notification[icon]", 
              "format": null, 
              "paramType": "form", 
              "required": false, 
              "type": "string", 
              "description": "The icon to display with the notification. Note: Defaults to warning."
            }, 
            {
              "name": "account_notification_roles", 
              "format": null, 
              "items": {
                "type": "string"
              }, 
              "paramType": "form", 
              "required": false, 
              "type": "array", 
              "description": "The role(s) to send global notification to. Note: ommitting this field will send to everyone Example: account_notification_roles: [\"StudentEnrollment\", \"TeacherEnrollment\"]"
            }
          ], 
          "nickname": "create_global_notification", 
          "notes": "Create and return a new global notification for an account.", 
          "summary": "Create a global notification", 
          "type": "void", 
          "method": "POST"
        }
      ], 
      "path": "/v1/accounts/{account_id}/account_notifications", 
      "description": "Create and return a new global notification for an account."
    }, 
    {
      "operations": [
        {
          "parameters": [
            {
              "name": "account_id", 
              "format": null, 
              "paramType": "path", 
              "required": true, 
              "type": "string", 
              "description": "ID"
            }
          ], 
          "nickname": "list_available_reports", 
          "notes": "Returns the list of reports for the current context.", 
          "summary": "List Available Reports", 
          "type": "void", 
          "method": "GET"
        }
      ], 
      "path": "/v1/accounts/{account_id}/reports", 
      "description": "Returns the list of reports for the current context."
    }, 
    {
      "operations": [
        {
          "parameters": [
            {
              "name": "account_id", 
              "format": null, 
              "paramType": "path", 
              "required": true, 
              "type": "string", 
              "description": "ID"
            }, 
            {
              "name": "report", 
              "format": null, 
              "paramType": "path", 
              "required": true, 
              "type": "string", 
              "description": "ID"
            }, 
            {
              "name": "[parameters]", 
              "format": null, 
              "paramType": "form", 
              "required": false, 
              "type": "string", 
              "description": "The parameters will vary for each report"
            }
          ], 
          "nickname": "start_report", 
          "notes": "Generates a report instance for the account.", 
          "summary": "Start a Report", 
          "type": "Report", 
          "method": "POST"
        }
      ], 
      "path": "/v1/accounts/{account_id}/reports/{report}", 
      "description": "Generates a report instance for the account."
    }, 
    {
      "operations": [
        {
          "parameters": [
            {
              "name": "account_id", 
              "format": null, 
              "paramType": "path", 
              "required": true, 
              "type": "string", 
              "description": "ID"
            }, 
            {
              "name": "report", 
              "format": null, 
              "paramType": "path", 
              "required": true, 
              "type": "string", 
              "description": "ID"
            }
          ], 
          "nickname": "index_of_reports", 
          "notes": "Shows all reports that have been run for the account of a specific type.", 
          "summary": "Index of Reports", 
          "items": {
            "$ref": "Report"
          }, 
          "type": "array", 
          "method": "GET"
        }
      ], 
      "path": "/v1/accounts/{account_id}/reports/{report}", 
      "description": "Shows all reports that have been run for the account of a specific type."
    }, 
    {
      "operations": [
        {
          "parameters": [
            {
              "name": "account_id", 
              "format": null, 
              "paramType": "path", 
              "required": true, 
              "type": "string", 
              "description": "ID"
            }, 
            {
              "name": "report", 
              "format": null, 
              "paramType": "path", 
              "required": true, 
              "type": "string", 
              "description": "ID"
            }, 
            {
              "name": "id", 
              "format": null, 
              "paramType": "path", 
              "required": true, 
              "type": "string", 
              "description": "ID"
            }
          ], 
          "nickname": "status_of_report", 
          "notes": "Returns the status of a report.", 
          "summary": "Status of a Report", 
          "type": "Report", 
          "method": "GET"
        }
      ], 
      "path": "/v1/accounts/{account_id}/reports/{report}/{id}", 
      "description": "Returns the status of a report."
    }, 
    {
      "operations": [
        {
          "parameters": [
            {
              "name": "account_id", 
              "format": null, 
              "paramType": "path", 
              "required": true, 
              "type": "string", 
              "description": "ID"
            }, 
            {
              "name": "report", 
              "format": null, 
              "paramType": "path", 
              "required": true, 
              "type": "string", 
              "description": "ID"
            }, 
            {
              "name": "id", 
              "format": null, 
              "paramType": "path", 
              "required": true, 
              "type": "string", 
              "description": "ID"
            }
          ], 
          "nickname": "delete_report", 
          "notes": "Deletes a generated report instance.", 
          "summary": "Delete a Report", 
          "type": "Report", 
          "method": "DELETE"
        }
      ], 
      "path": "/v1/accounts/{account_id}/reports/{report}/{id}", 
      "description": "Deletes a generated report instance."
    }, 
    {
      "operations": [
        {
          "parameters": [
            {
              "name": "account_id", 
              "format": null, 
              "paramType": "path", 
              "required": true, 
              "type": "string", 
              "description": "ID"
            }, 
            {
              "name": "user_id", 
              "format": "int64", 
              "paramType": "form", 
              "required": true, 
              "type": "integer", 
              "description": "The id of the user to promote."
            }, 
            {
              "name": "role", 
              "format": null, 
              "paramType": "form", 
              "required": false, 
              "type": "string", 
              "description": "(deprecated) The user's admin relationship with the account will be created with the given role. Defaults to 'AccountAdmin'."
            }, 
            {
              "name": "role_id", 
              "format": "int64", 
              "paramType": "form", 
              "required": false, 
              "type": "integer", 
              "description": "The user's admin relationship with the account will be created with the given role. Defaults to the built-in role for 'AccountAdmin'."
            }, 
            {
              "name": "send_confirmation", 
              "format": null, 
              "paramType": "form", 
              "required": false, 
              "type": "boolean", 
              "description": "Send a notification email to the new admin if true. Default is true."
            }
          ], 
          "nickname": "make_account_admin", 
          "notes": "Flag an existing user as an admin within the account.", 
          "summary": "Make an account admin", 
          "type": "Admin", 
          "method": "POST"
        }
      ], 
      "path": "/v1/accounts/{account_id}/admins", 
      "description": "Flag an existing user as an admin within the account."
    }, 
    {
      "operations": [
        {
          "parameters": [
            {
              "name": "account_id", 
              "format": null, 
              "paramType": "path", 
              "required": true, 
              "type": "string", 
              "description": "ID"
            }, 
            {
              "name": "user_id", 
              "format": null, 
              "paramType": "path", 
              "required": true, 
              "type": "string", 
              "description": "ID"
            }, 
            {
              "name": "role", 
              "format": null, 
              "paramType": "query", 
              "required": false, 
              "type": "string", 
              "description": "(Deprecated) Account role to remove from the user. Defaults to 'AccountAdmin'. Any other account role must be specified explicitly."
            }, 
            {
              "name": "role_id", 
              "format": "int64", 
              "paramType": "query", 
              "required": false, 
              "type": "integer", 
              "description": "The user's admin relationship with the account will be created with the given role. Defaults to the built-in role for 'AccountAdmin'."
            }
          ], 
          "nickname": "remove_account_admin", 
          "notes": "Remove the rights associated with an account admin role from a user.", 
          "summary": "Remove account admin", 
          "type": "Admin", 
          "method": "DELETE"
        }
      ], 
      "path": "/v1/accounts/{account_id}/admins/{user_id}", 
      "description": "Remove the rights associated with an account admin role from a user."
    }, 
    {
      "operations": [
        {
          "parameters": [
            {
              "name": "account_id", 
              "format": null, 
              "paramType": "path", 
              "required": true, 
              "type": "string", 
              "description": "ID"
            }, 
            {
              "name": "user_id", 
              "format": null, 
              "items": {
                "$ref": "[integer]"
              }, 
              "paramType": "query", 
              "required": false, 
              "type": "array", 
              "description": "Scope the results to those with user IDs equal to any of the IDs specified here."
            }
          ], 
          "nickname": "list_account_admins", 
          "notes": "List the admins in the account", 
          "summary": "List account admins", 
          "items": {
            "$ref": "Admin"
          }, 
          "type": "array", 
          "method": "GET"
        }
      ], 
      "path": "/v1/accounts/{account_id}/admins", 
      "description": "List the admins in the account"
    }, 
    {
      "operations": [
        {
          "parameters": [
            {
              "name": "course_id", 
              "format": null, 
              "paramType": "path", 
              "required": true, 
              "type": "string", 
              "description": "ID"
            }
          ], 
          "nickname": "list_external_feeds_courses", 
          "notes": "Returns the list of External Feeds this course or group.", 
          "summary": "List external feeds", 
          "items": {
            "$ref": "ExternalFeed"
          }, 
          "type": "array", 
          "method": "GET"
        }
      ], 
      "path": "/v1/courses/{course_id}/external_feeds", 
      "description": "Returns the list of External Feeds this course or group."
    }, 
    {
      "operations": [
        {
          "parameters": [
            {
              "name": "group_id", 
              "format": null, 
              "paramType": "path", 
              "required": true, 
              "type": "string", 
              "description": "ID"
            }
          ], 
          "nickname": "list_external_feeds_groups", 
          "notes": "Returns the list of External Feeds this course or group.", 
          "summary": "List external feeds", 
          "items": {
            "$ref": "ExternalFeed"
          }, 
          "type": "array", 
          "method": "GET"
        }
      ], 
      "path": "/v1/groups/{group_id}/external_feeds", 
      "description": "Returns the list of External Feeds this course or group."
    }, 
    {
      "operations": [
        {
          "parameters": [
            {
              "name": "course_id", 
              "format": null, 
              "paramType": "path", 
              "required": true, 
              "type": "string", 
              "description": "ID"
            }, 
            {
              "name": "url", 
              "format": null, 
              "paramType": "form", 
              "required": true, 
              "type": "string", 
              "description": "The url to the external rss or atom feed"
            }, 
            {
              "name": "header_match", 
              "format": null, 
              "paramType": "form", 
              "required": false, 
              "type": "boolean", 
              "description": "If given, only feed entries that contain this string in their title will be imported"
            }, 
            {
              "enum": [
                "full", 
                "truncate", 
                "link_only"
              ], 
              "name": "verbosity", 
              "format": null, 
              "paramType": "form", 
              "required": false, 
              "type": "string", 
              "description": "Defaults to \"full\""
            }
          ], 
          "nickname": "create_external_feed_courses", 
          "notes": "Create a new external feed for the course or group.", 
          "summary": "Create an external feed", 
          "type": "ExternalFeed", 
          "method": "POST"
        }
      ], 
      "path": "/v1/courses/{course_id}/external_feeds", 
      "description": "Create a new external feed for the course or group."
    }, 
    {
      "operations": [
        {
          "parameters": [
            {
              "name": "group_id", 
              "format": null, 
              "paramType": "path", 
              "required": true, 
              "type": "string", 
              "description": "ID"
            }, 
            {
              "name": "url", 
              "format": null, 
              "paramType": "form", 
              "required": true, 
              "type": "string", 
              "description": "The url to the external rss or atom feed"
            }, 
            {
              "name": "header_match", 
              "format": null, 
              "paramType": "form", 
              "required": false, 
              "type": "boolean", 
              "description": "If given, only feed entries that contain this string in their title will be imported"
            }, 
            {
              "enum": [
                "full", 
                "truncate", 
                "link_only"
              ], 
              "name": "verbosity", 
              "format": null, 
              "paramType": "form", 
              "required": false, 
              "type": "string", 
              "description": "Defaults to \"full\""
            }
          ], 
          "nickname": "create_external_feed_groups", 
          "notes": "Create a new external feed for the course or group.", 
          "summary": "Create an external feed", 
          "type": "ExternalFeed", 
          "method": "POST"
        }
      ], 
      "path": "/v1/groups/{group_id}/external_feeds", 
      "description": "Create a new external feed for the course or group."
    }, 
    {
      "operations": [
        {
          "parameters": [
            {
              "name": "course_id", 
              "format": null, 
              "paramType": "path", 
              "required": true, 
              "type": "string", 
              "description": "ID"
            }, 
            {
              "name": "external_feed_id", 
              "format": null, 
              "paramType": "path", 
              "required": true, 
              "type": "string", 
              "description": "ID"
            }
          ], 
          "nickname": "delete_external_feed_courses", 
          "notes": "Deletes the external feed.", 
          "summary": "Delete an external feed", 
          "type": "ExternalFeed", 
          "method": "DELETE"
        }
      ], 
      "path": "/v1/courses/{course_id}/external_feeds/{external_feed_id}", 
      "description": "Deletes the external feed."
    }, 
    {
      "operations": [
        {
          "parameters": [
            {
              "name": "group_id", 
              "format": null, 
              "paramType": "path", 
              "required": true, 
              "type": "string", 
              "description": "ID"
            }, 
            {
              "name": "external_feed_id", 
              "format": null, 
              "paramType": "path", 
              "required": true, 
              "type": "string", 
              "description": "ID"
            }
          ], 
          "nickname": "delete_external_feed_groups", 
          "notes": "Deletes the external feed.", 
          "summary": "Delete an external feed", 
          "type": "ExternalFeed", 
          "method": "DELETE"
        }
      ], 
      "path": "/v1/groups/{group_id}/external_feeds/{external_feed_id}", 
      "description": "Deletes the external feed."
    }, 
    {
      "operations": [
        {
          "parameters": [
            {
              "enum": [
                "reservable", 
                "manageable"
              ], 
              "name": "scope", 
              "format": null, 
              "paramType": "query", 
              "required": false, 
              "type": "string", 
              "description": "Defaults to \"reservable\""
            }, 
            {
              "name": "context_codes", 
              "format": null, 
              "items": {
                "type": "string"
              }, 
              "paramType": "query", 
              "required": false, 
              "type": "array", 
              "description": "Array of context codes used to limit returned results."
            }, 
            {
              "name": "include_past_appointments", 
              "format": null, 
              "paramType": "query", 
              "required": false, 
              "type": "boolean", 
              "description": "Defaults to false. If true, includes past appointment groups"
            }, 
            {
              "enum": [
                "appointments", 
                "child_events", 
                "participant_count", 
                "reserved_times"
              ], 
              "name": "include", 
              "format": null, 
              "items": {
                "type": "string"
              }, 
              "paramType": "query", 
              "required": false, 
              "type": "array", 
              "description": "Array of additional information to include. \"appointments\":: calendar event time slots for this appointment group \"child_events\":: reservations of those time slots \"participant_count\":: number of reservations \"reserved_times\":: the event id, start time and end time of reservations the current user has made)"
            }
          ], 
          "nickname": "list_appointment_groups", 
          "notes": "Retrieve the list of appointment groups that can be reserved or managed by\nthe current user.", 
          "summary": "List appointment groups", 
          "type": "void", 
          "method": "GET"
        }
      ], 
      "path": "/v1/appointment_groups", 
      "description": "Retrieve the list of appointment groups that can be reserved or managed by\nthe current user."
    }, 
    {
      "operations": [
        {
          "parameters": [
            {
              "name": "appointment_group[context_codes]", 
              "format": null, 
              "items": {
                "type": "string"
              }, 
              "paramType": "form", 
              "required": true, 
              "type": "array", 
              "description": "Array of context codes (courses, e.g. course_1) this group should be linked to (1 or more). Users in the course(s) with appropriate permissions will be able to sign up for this appointment group."
            }, 
            {
              "name": "appointment_group[sub_context_codes]", 
              "format": null, 
              "items": {
                "type": "string"
              }, 
              "paramType": "form", 
              "required": false, 
              "type": "array", 
              "description": "Array of sub context codes (course sections or a single group category) this group should be linked to. Used to limit the appointment group to particular sections. If a group category is specified, students will sign up in groups and the participant_type will be \"Group\" instead of \"User\"."
            }, 
            {
              "name": "appointment_group[title]", 
              "format": null, 
              "paramType": "form", 
              "required": true, 
              "type": "string", 
              "description": "Short title for the appointment group."
            }, 
            {
              "name": "appointment_group[description]", 
              "format": null, 
              "paramType": "form", 
              "required": false, 
              "type": "string", 
              "description": "Longer text description of the appointment group."
            }, 
            {
              "name": "appointment_group[location_name]", 
              "format": null, 
              "paramType": "form", 
              "required": false, 
              "type": "string", 
              "description": "Location name of the appointment group."
            }, 
            {
              "name": "appointment_group[location_address]", 
              "format": null, 
              "paramType": "form", 
              "required": false, 
              "type": "string", 
              "description": "Location address."
            }, 
            {
              "name": "appointment_group[publish]", 
              "format": null, 
              "paramType": "form", 
              "required": false, 
              "type": "boolean", 
              "description": "Indicates whether this appointment group should be published (i.e. made available for signup). Once published, an appointment group cannot be unpublished. Defaults to false."
            }, 
            {
              "name": "appointment_group[participants_per_appointment]", 
              "format": "int64", 
              "paramType": "form", 
              "required": false, 
              "type": "integer", 
              "description": "Maximum number of participants that may register for each time slot. Defaults to null (no limit)."
            }, 
            {
              "name": "appointment_group[min_appointments_per_participant]", 
              "format": "int64", 
              "paramType": "form", 
              "required": false, 
              "type": "integer", 
              "description": "Minimum number of time slots a user must register for. If not set, users do not need to sign up for any time slots."
            }, 
            {
              "name": "appointment_group[max_appointments_per_participant]", 
              "format": "int64", 
              "paramType": "form", 
              "required": false, 
              "type": "integer", 
              "description": "Maximum number of time slots a user may register for."
            }, 
            {
              "name": "appointment_group[new_appointments][X]", 
              "format": null, 
              "items": {
                "type": "string"
              }, 
              "paramType": "form", 
              "required": false, 
              "type": "array", 
              "description": "Nested array of start time/end time pairs indicating time slots for this appointment group. Refer to the example request."
            }, 
            {
              "enum": [
                "private", 
                "protected"
              ], 
              "name": "appointment_group[participant_visibility]", 
              "format": null, 
              "paramType": "form", 
              "required": false, 
              "type": "string", 
              "description": "\"private\":: participants cannot see who has signed up for a particular time slot \"protected\":: participants can see who has signed up. Defaults to \"private\"."
            }
          ], 
          "nickname": "create_appointment_group", 
          "notes": "Create and return a new appointment group. If new_appointments are\nspecified, the response will return a new_appointments array (same format\nas appointments array, see \"List appointment groups\" action)", 
          "summary": "Create an appointment group", 
          "type": "void", 
          "method": "POST"
        }
      ], 
      "path": "/v1/appointment_groups", 
      "description": "Create and return a new appointment group. If new_appointments are\nspecified, the response will return a new_appointments array (same format\nas appointments array, see \"List appointment groups\" action)"
    }, 
    {
      "operations": [
        {
          "parameters": [
            {
              "name": "id", 
              "format": null, 
              "paramType": "path", 
              "required": true, 
              "type": "string", 
              "description": "ID"
            }, 
            {
              "enum": [
                "child_events", 
                "appointments"
              ], 
              "name": "include", 
              "format": null, 
              "items": {
                "type": "string"
              }, 
              "paramType": "query", 
              "required": false, 
              "type": "array", 
              "description": "Array of additional information to include. Ssee include[] argument of \"List appointment groups\" action. \"child_events\":: reservations of time slots time slots \"appointments\":: will always be returned"
            }
          ], 
          "nickname": "get_single_appointment_group", 
          "notes": "Returns information for a single appointment group", 
          "summary": "Get a single appointment group", 
          "type": "void", 
          "method": "GET"
        }
      ], 
      "path": "/v1/appointment_groups/{id}", 
      "description": "Returns information for a single appointment group"
    }, 
    {
      "operations": [
        {
          "parameters": [
            {
              "name": "id", 
              "format": null, 
              "paramType": "path", 
              "required": true, 
              "type": "string", 
              "description": "ID"
            }, 
            {
              "name": "appointment_group[context_codes]", 
              "format": null, 
              "items": {
                "type": "string"
              }, 
              "paramType": "form", 
              "required": true, 
              "type": "array", 
              "description": "Array of context codes (courses, e.g. course_1) this group should be linked to (1 or more). Users in the course(s) with appropriate permissions will be able to sign up for this appointment group."
            }, 
            {
              "name": "appointment_group[sub_context_codes]", 
              "format": null, 
              "items": {
                "type": "string"
              }, 
              "paramType": "form", 
              "required": false, 
              "type": "array", 
              "description": "Array of sub context codes (course sections or a single group category) this group should be linked to. Used to limit the appointment group to particular sections. If a group category is specified, students will sign up in groups and the participant_type will be \"Group\" instead of \"User\"."
            }, 
            {
              "name": "appointment_group[title]", 
              "format": null, 
              "paramType": "form", 
              "required": false, 
              "type": "string", 
              "description": "Short title for the appointment group."
            }, 
            {
              "name": "appointment_group[description]", 
              "format": null, 
              "paramType": "form", 
              "required": false, 
              "type": "string", 
              "description": "Longer text description of the appointment group."
            }, 
            {
              "name": "appointment_group[location_name]", 
              "format": null, 
              "paramType": "form", 
              "required": false, 
              "type": "string", 
              "description": "Location name of the appointment group."
            }, 
            {
              "name": "appointment_group[location_address]", 
              "format": null, 
              "paramType": "form", 
              "required": false, 
              "type": "string", 
              "description": "Location address."
            }, 
            {
              "name": "appointment_group[publish]", 
              "format": null, 
              "paramType": "form", 
              "required": false, 
              "type": "boolean", 
              "description": "Indicates whether this appointment group should be published (i.e. made available for signup). Once published, an appointment group cannot be unpublished. Defaults to false."
            }, 
            {
              "name": "appointment_group[participants_per_appointment]", 
              "format": "int64", 
              "paramType": "form", 
              "required": false, 
              "type": "integer", 
              "description": "Maximum number of participants that may register for each time slot. Defaults to null (no limit)."
            }, 
            {
              "name": "appointment_group[min_appointments_per_participant]", 
              "format": "int64", 
              "paramType": "form", 
              "required": false, 
              "type": "integer", 
              "description": "Minimum number of time slots a user must register for. If not set, users do not need to sign up for any time slots."
            }, 
            {
              "name": "appointment_group[max_appointments_per_participant]", 
              "format": "int64", 
              "paramType": "form", 
              "required": false, 
              "type": "integer", 
              "description": "Maximum number of time slots a user may register for."
            }, 
            {
              "name": "appointment_group[new_appointments][X]", 
              "format": null, 
              "items": {
                "type": "string"
              }, 
              "paramType": "form", 
              "required": false, 
              "type": "array", 
              "description": "Nested array of start time/end time pairs indicating time slots for this appointment group. Refer to the example request."
            }, 
            {
              "enum": [
                "private", 
                "protected"
              ], 
              "name": "appointment_group[participant_visibility]", 
              "format": null, 
              "paramType": "form", 
              "required": false, 
              "type": "string", 
              "description": "\"private\":: participants cannot see who has signed up for a particular time slot \"protected\":: participants can see who has signed up. Defaults to \"private\"."
            }
          ], 
          "nickname": "update_appointment_group", 
          "notes": "Update and return an appointment group. If new_appointments are specified,\nthe response will return a new_appointments array (same format as\nappointments array, see \"List appointment groups\" action).", 
          "summary": "Update an appointment group", 
          "type": "void", 
          "method": "PUT"
        }
      ], 
      "path": "/v1/appointment_groups/{id}", 
      "description": "Update and return an appointment group. If new_appointments are specified,\nthe response will return a new_appointments array (same format as\nappointments array, see \"List appointment groups\" action)."
    }, 
    {
      "operations": [
        {
          "parameters": [
            {
              "name": "id", 
              "format": null, 
              "paramType": "path", 
              "required": true, 
              "type": "string", 
              "description": "ID"
            }, 
            {
              "name": "cancel_reason", 
              "format": null, 
              "paramType": "query", 
              "required": false, 
              "type": "string", 
              "description": "Reason for deleting/canceling the appointment group."
            }
          ], 
          "nickname": "delete_appointment_group", 
          "notes": "Delete an appointment group (and associated time slots and reservations) \nand return the deleted group", 
          "summary": "Delete an appointment group", 
          "type": "void", 
          "method": "DELETE"
        }
      ], 
      "path": "/v1/appointment_groups/{id}", 
      "description": "Delete an appointment group (and associated time slots and reservations) \nand return the deleted group"
    }, 
    {
      "operations": [
        {
          "parameters": [
            {
              "name": "id", 
              "format": null, 
              "paramType": "path", 
              "required": true, 
              "type": "string", 
              "description": "ID"
            }, 
            {
              "enum": [
                "all", 
                "registered", 
                "registered"
              ], 
              "name": "registration_status", 
              "format": null, 
              "paramType": "query", 
              "required": false, 
              "type": "string", 
              "description": "Limits results to the a given participation status, defaults to \"all\""
            }
          ], 
          "nickname": "list_user_participants", 
          "notes": "List users that are (or may be) participating in this appointment group.\nRefer to the Users API for the response fields. Returns no results for\nappointment groups with the \"Group\" participant_type.", 
          "summary": "List user participants", 
          "type": "void", 
          "method": "GET"
        }
      ], 
      "path": "/v1/appointment_groups/{id}/users", 
      "description": "List users that are (or may be) participating in this appointment group.\nRefer to the Users API for the response fields. Returns no results for\nappointment groups with the \"Group\" participant_type."
    }, 
    {
      "operations": [
        {
          "parameters": [
            {
              "name": "id", 
              "format": null, 
              "paramType": "path", 
              "required": true, 
              "type": "string", 
              "description": "ID"
            }, 
            {
              "enum": [
                "all", 
                "registered", 
                "registered"
              ], 
              "name": "registration_status", 
              "format": null, 
              "paramType": "query", 
              "required": false, 
              "type": "string", 
              "description": "Limits results to the a given participation status, defaults to \"all\""
            }
          ], 
          "nickname": "list_student_group_participants", 
          "notes": "List student groups that are (or may be) participating in this appointment\ngroup. Refer to the Groups API for the response fields. Returns no results\nfor appointment groups with the \"User\" participant_type.", 
          "summary": "List student group participants", 
          "type": "void", 
          "method": "GET"
        }
      ], 
      "path": "/v1/appointment_groups/{id}/groups", 
      "description": "List student groups that are (or may be) participating in this appointment\ngroup. Refer to the Groups API for the response fields. Returns no results\nfor appointment groups with the \"User\" participant_type."
    }, 
    {
      "operations": [
        {
          "parameters": [
            {
              "name": "course_id", 
              "format": null, 
              "paramType": "path", 
              "required": true, 
              "type": "string", 
              "description": "ID"
            }, 
            {
              "name": "id", 
              "format": null, 
              "paramType": "path", 
              "required": true, 
              "type": "string", 
              "description": "ID"
            }
          ], 
          "nickname": "delete_assignment", 
          "notes": "Delete the given assignment.", 
          "summary": "Delete an assignment", 
          "type": "Assignment", 
          "method": "DELETE"
        }
      ], 
      "path": "/v1/courses/{course_id}/assignments/{id}", 
      "description": "Delete the given assignment."
    }, 
    {
      "operations": [
        {
          "parameters": [
            {
              "name": "course_id", 
              "format": null, 
              "paramType": "path", 
              "required": true, 
              "type": "string", 
              "description": "ID"
            }, 
            {
              "enum": [
                "submission", 
                "assignment_visibility", 
                "all_dates", 
                "overrides"
              ], 
              "name": "include", 
              "format": null, 
              "items": {
                "type": "string"
              }, 
              "paramType": "query", 
              "required": false, 
              "type": "array", 
              "description": "Associations to include with the assignment. The \"assignment_visibility\" option requires that the Differentiated Assignments course feature be turned on."
            }, 
            {
              "name": "search_term", 
              "format": null, 
              "paramType": "query", 
              "required": false, 
              "type": "string", 
              "description": "The partial title of the assignments to match and return."
            }, 
            {
              "name": "override_assignment_dates", 
              "format": null, 
              "paramType": "query", 
              "required": false, 
              "type": "boolean", 
              "description": "Apply assignment overrides for each assignment, defaults to true."
            }, 
            {
              "name": "needs_grading_count_by_section", 
              "format": null, 
              "paramType": "query", 
              "required": false, 
              "type": "boolean", 
              "description": "Split up \"needs_grading_count\" by sections into the \"needs_grading_count_by_section\" key, defaults to false"
            }, 
            {
              "name": "bucket", 
              "format": null, 
              "paramType": "query", 
              "required": false, 
              "type": "string", 
              "description": "If included, only return certain assignments depending on due date and submission status. Valid buckets are \"past\", \"overdue\", \"undated\", \"ungraded\", \"upcoming\", and \"future\"."
            }
          ], 
          "nickname": "list_assignments", 
          "notes": "Returns the list of assignments for the current context.", 
          "summary": "List assignments", 
          "items": {
            "$ref": "Assignment"
          }, 
          "type": "array", 
          "method": "GET"
        }
      ], 
      "path": "/v1/courses/{course_id}/assignments", 
      "description": "Returns the list of assignments for the current context."
    }, 
    {
      "operations": [
        {
          "parameters": [
            {
              "name": "course_id", 
              "format": null, 
              "paramType": "path", 
              "required": true, 
              "type": "string", 
              "description": "ID"
            }, 
            {
              "name": "id", 
              "format": null, 
              "paramType": "path", 
              "required": true, 
              "type": "string", 
              "description": "ID"
            }, 
            {
              "enum": [
                "submission", 
                "assignment_visibility", 
                "overrides"
              ], 
              "name": "include", 
              "format": null, 
              "items": {
                "type": "string"
              }, 
              "paramType": "query", 
              "required": false, 
              "type": "array", 
              "description": "Associations to include with the assignment. The \"assignment_visibility\" option requires that the Differentiated Assignments course feature be turned on."
            }, 
            {
              "name": "override_assignment_dates", 
              "format": null, 
              "paramType": "query", 
              "required": false, 
              "type": "boolean", 
              "description": "Apply assignment overrides to the assignment, defaults to true."
            }, 
            {
              "name": "needs_grading_count_by_section", 
              "format": null, 
              "paramType": "query", 
              "required": false, 
              "type": "boolean", 
              "description": "Split up \"needs_grading_count\" by sections into the \"needs_grading_count_by_section\" key, defaults to false"
            }, 
            {
              "name": "all_dates", 
              "format": null, 
              "paramType": "query", 
              "required": false, 
              "type": "boolean", 
              "description": "All dates associated with the assignment, if applicable"
            }
          ], 
          "nickname": "get_single_assignment", 
          "notes": "Returns the assignment with the given id.", 
          "summary": "Get a single assignment", 
          "type": "Assignment", 
          "method": "GET"
        }
      ], 
      "path": "/v1/courses/{course_id}/assignments/{id}", 
      "description": "Returns the assignment with the given id."
    }, 
    {
      "operations": [
        {
          "parameters": [
            {
              "name": "course_id", 
              "format": null, 
              "paramType": "path", 
              "required": true, 
              "type": "string", 
              "description": "ID"
            }, 
            {
              "name": "assignment[name]", 
              "format": null, 
              "paramType": "form", 
              "required": true, 
              "type": "string", 
              "description": "The assignment name."
            }, 
            {
              "name": "assignment[position]", 
              "format": "int64", 
              "paramType": "form", 
              "required": false, 
              "type": "integer", 
              "description": "The position of this assignment in the group when displaying assignment lists."
            }, 
            {
              "enum": [
                "online_quiz", 
                "none", 
                "on_paper", 
                "online_quiz", 
                "discussion_topic", 
                "external_tool", 
                "online_upload", 
                "online_text_entry", 
                "online_url", 
                "media_recording"
              ], 
              "name": "assignment[submission_types]", 
              "format": null, 
              "items": {
                "type": "string"
              }, 
              "paramType": "form", 
              "required": false, 
              "type": "array", 
              "description": "List of supported submission types for the assignment. Unless the assignment is allowing online submissions, the array should only have one element. If not allowing online submissions, your options are: \"online_quiz\" \"none\" \"on_paper\" \"online_quiz\" \"discussion_topic\" \"external_tool\" If you are allowing online submissions, you can have one or many allowed submission types: \"online_upload\" \"online_text_entry\" \"online_url\" \"media_recording\" (Only valid when the Kaltura plugin is enabled)"
            }, 
            {
              "name": "assignment[allowed_extensions]", 
              "format": null, 
              "items": {
                "type": "string"
              }, 
              "paramType": "form", 
              "required": false, 
              "type": "array", 
              "description": "Allowed extensions if submission_types includes \"online_upload\" Example: allowed_extensions: [\"docx\",\"ppt\"]"
            }, 
            {
              "name": "assignment[turnitin_enabled]", 
              "format": null, 
              "paramType": "form", 
              "required": false, 
              "type": "boolean", 
              "description": "Only applies when the Turnitin plugin is enabled for a course and the submission_types array includes \"online_upload\". Toggles Turnitin submissions for the assignment. Will be ignored if Turnitin is not available for the course."
            }, 
            {
              "name": "assignment[turnitin_settings]", 
              "format": null, 
              "paramType": "form", 
              "required": false, 
              "type": "string", 
              "description": "Settings to send along to turnitin. See Assignment object definition for format."
            }, 
            {
              "name": "assignment[integration_data]", 
              "format": null, 
              "paramType": "form", 
              "required": false, 
              "type": "string", 
              "description": "Data related to third party integrations, JSON string required."
            }, 
            {
              "name": "assignment[integration_id]", 
              "format": null, 
              "paramType": "form", 
              "required": false, 
              "type": "string", 
              "description": "Unique ID from third party integrations"
            }, 
            {
              "name": "assignment[peer_reviews]", 
              "format": null, 
              "paramType": "form", 
              "required": false, 
              "type": "boolean", 
              "description": "If submission_types does not include external_tool,discussion_topic, online_quiz, or on_paper, determines whether or not peer reviews will be turned on for the assignment."
            }, 
            {
              "name": "assignment[automatic_peer_reviews]", 
              "format": null, 
              "paramType": "form", 
              "required": false, 
              "type": "boolean", 
              "description": "Whether peer reviews will be assigned automatically by Canvas or if teachers must manually assign peer reviews. Does not apply if peer reviews are not enabled."
            }, 
            {
              "name": "assignment[notify_of_update]", 
              "format": null, 
              "paramType": "form", 
              "required": false, 
              "type": "boolean", 
              "description": "If true, Canvas will send a notification to students in the class notifying them that the content has changed."
            }, 
            {
              "name": "assignment[group_category_id]", 
              "format": "int64", 
              "paramType": "form", 
              "required": false, 
              "type": "integer", 
              "description": "If present, the assignment will become a group assignment assigned to the group."
            }, 
            {
              "name": "assignment[grade_group_students_individually]", 
              "format": "int64", 
              "paramType": "form", 
              "required": false, 
              "type": "integer", 
              "description": "If this is a group assignment, teachers have the options to grade students individually. If false, Canvas will apply the assignment's score to each member of the group. If true, the teacher can manually assign scores to each member of the group."
            }, 
            {
              "enum": [
                "Hash of attributes if submission_types is [external_tool] Example: external_tool_tag_attributes: { // url to the external tool url: http://instructure.com"
              ], 
              "name": "assignment[external_tool_tag_attributes]", 
              "format": null, 
              "paramType": "form", 
              "required": false, 
              "type": "// create a new tab for the module", 
              "description": "no description"
            }, 
            {
              "name": "assignment[points_possible]", 
              "format": null, 
              "paramType": "form", 
              "required": false, 
              "type": "float", 
              "description": "The maximum points possible on the assignment."
            }, 
            {
              "enum": [
                "pass_fail", 
                "percent", 
                "letter_grade", 
                "gpa_scale", 
                "points"
              ], 
              "name": "assignment[grading_type]", 
              "format": null, 
              "paramType": "form", 
              "required": false, 
              "type": "string", 
              "description": "The strategy used for grading the assignment. The assignment is ungraded if this field is omitted."
            }, 
            {
              "name": "assignment[due_at]", 
              "format": null, 
              "paramType": "form", 
              "required": false, 
              "type": "timestamp", 
              "description": "The day/time the assignment is due. Accepts times in ISO 8601 format, e.g. 2014-10-21T18:48:00Z."
            }, 
            {
              "name": "assignment[lock_at]", 
              "format": null, 
              "paramType": "form", 
              "required": false, 
              "type": "timestamp", 
              "description": "The day/time the assignment is locked after. Accepts times in ISO 8601 format, e.g. 2014-10-21T18:48:00Z."
            }, 
            {
              "name": "assignment[unlock_at]", 
              "format": null, 
              "paramType": "form", 
              "required": false, 
              "type": "timestamp", 
              "description": "The day/time the assignment is unlocked. Accepts times in ISO 8601 format, e.g. 2014-10-21T18:48:00Z."
            }, 
            {
              "name": "assignment[description]", 
              "format": null, 
              "paramType": "form", 
              "required": false, 
              "type": "string", 
              "description": "The assignment's description, supports HTML."
            }, 
            {
              "name": "assignment[assignment_group_id]", 
              "format": "int64", 
              "paramType": "form", 
              "required": false, 
              "type": "integer", 
              "description": "The assignment group id to put the assignment in. Defaults to the top assignment group in the course."
            }, 
            {
              "name": "assignment[muted]", 
              "format": null, 
              "paramType": "form", 
              "required": false, 
              "type": "boolean", 
              "description": "Whether this assignment is muted. A muted assignment does not send change notifications and hides grades from students. Defaults to false."
            }, 
            {
              "name": "assignment[assignment_overrides]", 
              "format": null, 
              "items": {
                "$ref": "assignmentoverride"
              }, 
              "paramType": "form", 
              "required": false, 
              "type": "array", 
              "description": "List of overrides for the assignment. NOTE: The assignment overrides feature is in beta."
            }, 
            {
              "name": "assignment[only_visible_to_overrides]", 
              "format": null, 
              "paramType": "form", 
              "required": false, 
              "type": "boolean", 
              "description": "Whether this assignment is only visible to overrides (Only useful if 'differentiated assignments' account setting is on)"
            }, 
            {
              "name": "assignment[published]", 
              "format": null, 
              "paramType": "form", 
              "required": false, 
              "type": "boolean", 
              "description": "Whether this assignment is published. (Only useful if 'draft state' account setting is on) Unpublished assignments are not visible to students."
            }, 
            {
              "name": "assignment[grading_standard_id]", 
              "format": "int64", 
              "paramType": "form", 
              "required": false, 
              "type": "integer", 
              "description": "The grading standard id to set for the course. If no value is provided for this argument the current grading_standard will be un-set from this course. This will update the grading_type for the course to 'letter_grade' unless it is already 'gpa_scale'."
            }
          ], 
          "nickname": "create_assignment", 
          "notes": "Create a new assignment for this course. The assignment is created in the\nactive state.", 
          "summary": "Create an assignment", 
          "type": "Assignment", 
          "method": "POST"
        }
      ], 
      "path": "/v1/courses/{course_id}/assignments", 
      "description": "Create a new assignment for this course. The assignment is created in the\nactive state."
    }, 
    {
      "operations": [
        {
          "parameters": [
            {
              "name": "course_id", 
              "format": null, 
              "paramType": "path", 
              "required": true, 
              "type": "string", 
              "description": "ID"
            }, 
            {
              "name": "id", 
              "format": null, 
              "paramType": "path", 
              "required": true, 
              "type": "string", 
              "description": "ID"
            }, 
            {
              "name": "assignment[name]", 
              "format": null, 
              "paramType": "form", 
              "required": false, 
              "type": "string", 
              "description": "The assignment name."
            }, 
            {
              "name": "assignment[position]", 
              "format": "int64", 
              "paramType": "form", 
              "required": false, 
              "type": "integer", 
              "description": "The position of this assignment in the group when displaying assignment lists."
            }, 
            {
              "enum": [
                "online_quiz", 
                "none", 
                "on_paper", 
                "online_quiz", 
                "discussion_topic", 
                "external_tool", 
                "online_upload", 
                "online_text_entry", 
                "online_url", 
                "media_recording"
              ], 
              "name": "assignment[submission_types]", 
              "format": null, 
              "items": {
                "type": "string"
              }, 
              "paramType": "form", 
              "required": false, 
              "type": "array", 
              "description": "List of supported submission types for the assignment. Unless the assignment is allowing online submissions, the array should only have one element. If not allowing online submissions, your options are: \"online_quiz\" \"none\" \"on_paper\" \"online_quiz\" \"discussion_topic\" \"external_tool\" If you are allowing online submissions, you can have one or many allowed submission types: \"online_upload\" \"online_text_entry\" \"online_url\" \"media_recording\" (Only valid when the Kaltura plugin is enabled)"
            }, 
            {
              "name": "assignment[allowed_extensions]", 
              "format": null, 
              "items": {
                "type": "string"
              }, 
              "paramType": "form", 
              "required": false, 
              "type": "array", 
              "description": "Allowed extensions if submission_types includes \"online_upload\" Example: allowed_extensions: [\"docx\",\"ppt\"]"
            }, 
            {
              "name": "assignment[turnitin_enabled]", 
              "format": null, 
              "paramType": "form", 
              "required": false, 
              "type": "boolean", 
              "description": "Only applies when the Turnitin plugin is enabled for a course and the submission_types array includes \"online_upload\". Toggles Turnitin submissions for the assignment. Will be ignored if Turnitin is not available for the course."
            }, 
            {
              "name": "assignment[turnitin_settings]", 
              "format": null, 
              "paramType": "form", 
              "required": false, 
              "type": "string", 
              "description": "Settings to send along to turnitin. See Assignment object definition for format."
            }, 
            {
              "name": "assignment[integration_data]", 
              "format": null, 
              "paramType": "form", 
              "required": false, 
              "type": "string", 
              "description": "Data related to third party integrations, JSON string required."
            }, 
            {
              "name": "assignment[integration_id]", 
              "format": null, 
              "paramType": "form", 
              "required": false, 
              "type": "string", 
              "description": "Unique ID from third party integrations"
            }, 
            {
              "name": "assignment[peer_reviews]", 
              "format": null, 
              "paramType": "form", 
              "required": false, 
              "type": "boolean", 
              "description": "If submission_types does not include external_tool,discussion_topic, online_quiz, or on_paper, determines whether or not peer reviews will be turned on for the assignment."
            }, 
            {
              "name": "assignment[automatic_peer_reviews]", 
              "format": null, 
              "paramType": "form", 
              "required": false, 
              "type": "boolean", 
              "description": "Whether peer reviews will be assigned automatically by Canvas or if teachers must manually assign peer reviews. Does not apply if peer reviews are not enabled."
            }, 
            {
              "name": "assignment[notify_of_update]", 
              "format": null, 
              "paramType": "form", 
              "required": false, 
              "type": "boolean", 
              "description": "If true, Canvas will send a notification to students in the class notifying them that the content has changed."
            }, 
            {
              "name": "assignment[group_category_id]", 
              "format": "int64", 
              "paramType": "form", 
              "required": false, 
              "type": "integer", 
              "description": "If present, the assignment will become a group assignment assigned to the group."
            }, 
            {
              "name": "assignment[grade_group_students_individually]", 
              "format": "int64", 
              "paramType": "form", 
              "required": false, 
              "type": "integer", 
              "description": "If this is a group assignment, teachers have the options to grade students individually. If false, Canvas will apply the assignment's score to each member of the group. If true, the teacher can manually assign scores to each member of the group."
            }, 
            {
              "enum": [
                "Hash of attributes if submission_types is [external_tool] Example: external_tool_tag_attributes: { // url to the external tool url: http://instructure.com"
              ], 
              "name": "assignment[external_tool_tag_attributes]", 
              "format": null, 
              "paramType": "form", 
              "required": false, 
              "type": "// create a new tab for the module", 
              "description": "no description"
            }, 
            {
              "name": "assignment[points_possible]", 
              "format": null, 
              "paramType": "form", 
              "required": false, 
              "type": "float", 
              "description": "The maximum points possible on the assignment."
            }, 
            {
              "enum": [
                "pass_fail", 
                "percent", 
                "letter_grade", 
                "gpa_scale", 
                "points"
              ], 
              "name": "assignment[grading_type]", 
              "format": null, 
              "paramType": "form", 
              "required": false, 
              "type": "string", 
              "description": "The strategy used for grading the assignment. The assignment is ungraded if this field is omitted."
            }, 
            {
              "name": "assignment[due_at]", 
              "format": null, 
              "paramType": "form", 
              "required": false, 
              "type": "timestamp", 
              "description": "The day/time the assignment is due. Accepts times in ISO 8601 format, e.g. 2014-10-21T18:48:00Z."
            }, 
            {
              "name": "assignment[lock_at]", 
              "format": null, 
              "paramType": "form", 
              "required": false, 
              "type": "timestamp", 
              "description": "The day/time the assignment is locked after. Accepts times in ISO 8601 format, e.g. 2014-10-21T18:48:00Z."
            }, 
            {
              "name": "assignment[unlock_at]", 
              "format": null, 
              "paramType": "form", 
              "required": false, 
              "type": "timestamp", 
              "description": "The day/time the assignment is unlocked. Accepts times in ISO 8601 format, e.g. 2014-10-21T18:48:00Z."
            }, 
            {
              "name": "assignment[description]", 
              "format": null, 
              "paramType": "form", 
              "required": false, 
              "type": "string", 
              "description": "The assignment's description, supports HTML."
            }, 
            {
              "name": "assignment[assignment_group_id]", 
              "format": "int64", 
              "paramType": "form", 
              "required": false, 
              "type": "integer", 
              "description": "The assignment group id to put the assignment in. Defaults to the top assignment group in the course."
            }, 
            {
              "name": "assignment[muted]", 
              "format": null, 
              "paramType": "form", 
              "required": false, 
              "type": "boolean", 
              "description": "Whether this assignment is muted. A muted assignment does not send change notifications and hides grades from students. Defaults to false."
            }, 
            {
              "name": "assignment[assignment_overrides]", 
              "format": null, 
              "items": {
                "$ref": "assignmentoverride"
              }, 
              "paramType": "form", 
              "required": false, 
              "type": "array", 
              "description": "List of overrides for the assignment. NOTE: The assignment overrides feature is in beta."
            }, 
            {
              "name": "assignment[only_visible_to_overrides]", 
              "format": null, 
              "paramType": "form", 
              "required": false, 
              "type": "boolean", 
              "description": "Whether this assignment is only visible to overrides (Only useful if 'differentiated assignments' account setting is on)"
            }, 
            {
              "name": "assignment[published]", 
              "format": null, 
              "paramType": "form", 
              "required": false, 
              "type": "boolean", 
              "description": "Whether this assignment is published. (Only useful if 'draft state' account setting is on) Unpublished assignments are not visible to students."
            }, 
            {
              "name": "assignment[grading_standard_id]", 
              "format": "int64", 
              "paramType": "form", 
              "required": false, 
              "type": "integer", 
              "description": "The grading standard id to set for the course. If no value is provided for this argument the current grading_standard will be un-set from this course. This will update the grading_type for the course to 'letter_grade' unless it is already 'gpa_scale'."
            }
          ], 
          "nickname": "edit_assignment", 
          "notes": "Modify an existing assignment.\n\nIf the assignment [assignment_overrides] key is absent, any existing\noverrides are kept as is. If the assignment [assignment_overrides] key is\npresent, existing overrides are updated or deleted (and new ones created,\nas necessary) to match the provided list.\n\nNOTE: The assignment overrides feature is in beta.", 
          "summary": "Edit an assignment", 
          "type": "Assignment", 
          "method": "PUT"
        }
      ], 
      "path": "/v1/courses/{course_id}/assignments/{id}", 
      "description": "Modify an existing assignment.\n\nIf the assignment [assignment_overrides] key is absent, any existing\noverrides are kept as is. If the assignment [assignment_overrides] key is\npresent, existing overrides are updated or deleted (and new ones created,\nas necessary) to match the provided list.\n\nNOTE: The assignment overrides feature is in beta."
    }, 
    {
      "operations": [
        {
          "parameters": [
            {
              "name": "course_id", 
              "format": null, 
              "paramType": "path", 
              "required": true, 
              "type": "string", 
              "description": "ID"
            }, 
            {
              "name": "assignment_id", 
              "format": null, 
              "paramType": "path", 
              "required": true, 
              "type": "string", 
              "description": "ID"
            }
          ], 
          "nickname": "list_assignment_overrides", 
          "notes": "Returns the list of overrides for this assignment that target\nsections/groups/students visible to the current user.", 
          "summary": "List assignment overrides", 
          "items": {
            "$ref": "AssignmentOverride"
          }, 
          "type": "array", 
          "method": "GET"
        }
      ], 
      "path": "/v1/courses/{course_id}/assignments/{assignment_id}/overrides", 
      "description": "Returns the list of overrides for this assignment that target\nsections/groups/students visible to the current user."
    }, 
    {
      "operations": [
        {
          "parameters": [
            {
              "name": "course_id", 
              "format": null, 
              "paramType": "path", 
              "required": true, 
              "type": "string", 
              "description": "ID"
            }, 
            {
              "name": "assignment_id", 
              "format": null, 
              "paramType": "path", 
              "required": true, 
              "type": "string", 
              "description": "ID"
            }, 
            {
              "name": "id", 
              "format": null, 
              "paramType": "path", 
              "required": true, 
              "type": "string", 
              "description": "ID"
            }
          ], 
          "nickname": "get_single_assignment_override", 
          "notes": "Returns details of the the override with the given id.", 
          "summary": "Get a single assignment override", 
          "type": "AssignmentOverride", 
          "method": "GET"
        }
      ], 
      "path": "/v1/courses/{course_id}/assignments/{assignment_id}/overrides/{id}", 
      "description": "Returns details of the the override with the given id."
    }, 
    {
      "operations": [
        {
          "parameters": [
            {
              "name": "group_id", 
              "format": null, 
              "paramType": "path", 
              "required": true, 
              "type": "string", 
              "description": "ID"
            }, 
            {
              "name": "assignment_id", 
              "format": null, 
              "paramType": "path", 
              "required": true, 
              "type": "string", 
              "description": "ID"
            }
          ], 
          "nickname": "redirect_to_assignment_override_for_group", 
          "notes": "Responds with a redirect to the override for the given group, if any\n(404 otherwise).", 
          "summary": "Redirect to the assignment override for a group", 
          "type": "void", 
          "method": "GET"
        }
      ], 
      "path": "/v1/groups/{group_id}/assignments/{assignment_id}/override", 
      "description": "Responds with a redirect to the override for the given group, if any\n(404 otherwise)."
    }, 
    {
      "operations": [
        {
          "parameters": [
            {
              "name": "course_section_id", 
              "format": null, 
              "paramType": "path", 
              "required": true, 
              "type": "string", 
              "description": "ID"
            }, 
            {
              "name": "assignment_id", 
              "format": null, 
              "paramType": "path", 
              "required": true, 
              "type": "string", 
              "description": "ID"
            }
          ], 
          "nickname": "redirect_to_assignment_override_for_section", 
          "notes": "Responds with a redirect to the override for the given section, if any\n(404 otherwise).", 
          "summary": "Redirect to the assignment override for a section", 
          "type": "void", 
          "method": "GET"
        }
      ], 
      "path": "/v1/sections/{course_section_id}/assignments/{assignment_id}/override", 
      "description": "Responds with a redirect to the override for the given section, if any\n(404 otherwise)."
    }, 
    {
      "operations": [
        {
          "parameters": [
            {
              "name": "course_id", 
              "format": null, 
              "paramType": "path", 
              "required": true, 
              "type": "string", 
              "description": "ID"
            }, 
            {
              "name": "assignment_id", 
              "format": null, 
              "paramType": "path", 
              "required": true, 
              "type": "string", 
              "description": "ID"
            }, 
            {
              "name": "assignment_override[student_ids]", 
              "format": "int64", 
              "items": {
                "type": "integer"
              }, 
              "paramType": "form", 
              "required": false, 
              "type": "array", 
              "description": "The IDs of the override's target students. If present, the IDs must each identify a user with an active student enrollment in the course that is not already targetted by a different adhoc override."
            }, 
            {
              "name": "assignment_override[title]", 
              "format": null, 
              "paramType": "form", 
              "required": false, 
              "type": "string", 
              "description": "The title of the adhoc assignment override. Required if student_ids is present, ignored otherwise (the title is set to the name of the targetted group or section instead)."
            }, 
            {
              "name": "assignment_override[group_id]", 
              "format": "int64", 
              "paramType": "form", 
              "required": false, 
              "type": "integer", 
              "description": "The ID of the override's target group. If present, the following conditions must be met for the override to be successful: 1. the assignment MUST be a group assignment (a group_category_id is assigned to it) 2. the ID must identify an active group in the group set the assignment is in 3. the ID must not be targetted by a different override See {Appendix: Group assignments} for more info."
            }, 
            {
              "name": "assignment_override[course_section_id]", 
              "format": "int64", 
              "paramType": "form", 
              "required": false, 
              "type": "integer", 
              "description": "The ID of the override's target section. If present, must identify an active section of the assignment's course not already targetted by a different override."
            }, 
            {
              "name": "assignment_override[due_at]", 
              "format": null, 
              "paramType": "form", 
              "required": false, 
              "type": "timestamp", 
              "description": "The day/time the overridden assignment is due. Accepts times in ISO 8601 format, e.g. 2014-10-21T18:48:00Z. If absent, this override will not affect due date. May be present but null to indicate the override removes any previous due date."
            }, 
            {
              "name": "assignment_override[unlock_at]", 
              "format": null, 
              "paramType": "form", 
              "required": false, 
              "type": "timestamp", 
              "description": "The day/time the overridden assignment becomes unlocked. Accepts times in ISO 8601 format, e.g. 2014-10-21T18:48:00Z. If absent, this override will not affect the unlock date. May be present but null to indicate the override removes any previous unlock date."
            }, 
            {
              "name": "assignment_override[lock_at]", 
              "format": null, 
              "paramType": "form", 
              "required": false, 
              "type": "timestamp", 
              "description": "The day/time the overridden assignment becomes locked. Accepts times in ISO 8601 format, e.g. 2014-10-21T18:48:00Z. If absent, this override will not affect the lock date. May be present but null to indicate the override removes any previous lock date."
            }
          ], 
          "nickname": "create_assignment_override", 
          "notes": "One of student_ids, group_id, or course_section_id must be present. At most\none should be present; if multiple are present only the most specific\n(student_ids first, then group_id, then course_section_id) is used and any\nothers are ignored.", 
          "summary": "Create an assignment override", 
          "type": "AssignmentOverride", 
          "method": "POST"
        }
      ], 
      "path": "/v1/courses/{course_id}/assignments/{assignment_id}/overrides", 
      "description": "One of student_ids, group_id, or course_section_id must be present. At most\none should be present; if multiple are present only the most specific\n(student_ids first, then group_id, then course_section_id) is used and any\nothers are ignored."
    }, 
    {
      "operations": [
        {
          "parameters": [
            {
              "name": "course_id", 
              "format": null, 
              "paramType": "path", 
              "required": true, 
              "type": "string", 
              "description": "ID"
            }, 
            {
              "name": "assignment_id", 
              "format": null, 
              "paramType": "path", 
              "required": true, 
              "type": "string", 
              "description": "ID"
            }, 
            {
              "name": "id", 
              "format": null, 
              "paramType": "path", 
              "required": true, 
              "type": "string", 
              "description": "ID"
            }, 
            {
              "name": "assignment_override[student_ids]", 
              "format": "int64", 
              "items": {
                "type": "integer"
              }, 
              "paramType": "form", 
              "required": false, 
              "type": "array", 
              "description": "The IDs of the override's target students. If present, the IDs must each identify a user with an active student enrollment in the course that is not already targetted by a different adhoc override. Ignored unless the override being updated is adhoc."
            }, 
            {
              "name": "assignment_override[title]", 
              "format": null, 
              "paramType": "form", 
              "required": false, 
              "type": "string", 
              "description": "The title of an adhoc assignment override. Ignored unless the override being updated is adhoc."
            }, 
            {
              "name": "assignment_override[due_at]", 
              "format": null, 
              "paramType": "form", 
              "required": false, 
              "type": "timestamp", 
              "description": "The day/time the overridden assignment is due. Accepts times in ISO 8601 format, e.g. 2014-10-21T18:48:00Z. If absent, this override will not affect due date. May be present but null to indicate the override removes any previous due date."
            }, 
            {
              "name": "assignment_override[unlock_at]", 
              "format": null, 
              "paramType": "form", 
              "required": false, 
              "type": "timestamp", 
              "description": "The day/time the overridden assignment becomes unlocked. Accepts times in ISO 8601 format, e.g. 2014-10-21T18:48:00Z. If absent, this override will not affect the unlock date. May be present but null to indicate the override removes any previous unlock date."
            }, 
            {
              "name": "assignment_override[lock_at]", 
              "format": null, 
              "paramType": "form", 
              "required": false, 
              "type": "timestamp", 
              "description": "The day/time the overridden assignment becomes locked. Accepts times in ISO 8601 format, e.g. 2014-10-21T18:48:00Z. If absent, this override will not affect the lock date. May be present but null to indicate the override removes any previous lock date."
            }
          ], 
          "nickname": "update_assignment_override", 
          "notes": "All current overridden values must be supplied if they are to be retained;\ne.g. if due_at was overridden, but this PUT omits a value for due_at,\ndue_at will no longer be overridden. If the override is adhoc and\nstudent_ids is not supplied, the target override set is unchanged. Target\noverride sets cannot be changed for group or section overrides.", 
          "summary": "Update an assignment override", 
          "type": "AssignmentOverride", 
          "method": "PUT"
        }
      ], 
      "path": "/v1/courses/{course_id}/assignments/{assignment_id}/overrides/{id}", 
      "description": "All current overridden values must be supplied if they are to be retained;\ne.g. if due_at was overridden, but this PUT omits a value for due_at,\ndue_at will no longer be overridden. If the override is adhoc and\nstudent_ids is not supplied, the target override set is unchanged. Target\noverride sets cannot be changed for group or section overrides."
    }, 
    {
      "operations": [
        {
          "parameters": [
            {
              "name": "course_id", 
              "format": null, 
              "paramType": "path", 
              "required": true, 
              "type": "string", 
              "description": "ID"
            }, 
            {
              "name": "assignment_id", 
              "format": null, 
              "paramType": "path", 
              "required": true, 
              "type": "string", 
              "description": "ID"
            }, 
            {
              "name": "id", 
              "format": null, 
              "paramType": "path", 
              "required": true, 
              "type": "string", 
              "description": "ID"
            }
          ], 
          "nickname": "delete_assignment_override", 
          "notes": "Deletes an override and returns its former details.", 
          "summary": "Delete an assignment override", 
          "type": "AssignmentOverride", 
          "method": "DELETE"
        }
      ], 
      "path": "/v1/courses/{course_id}/assignments/{assignment_id}/overrides/{id}", 
      "description": "Deletes an override and returns its former details."
    }
  ], 
  "models": {
    "TurnitinSettings": {
      "properties": {
        "originality_report_visibility": {
          "type": "string", 
          "example": "after_grading"
        }, 
        "s_paper_check": {
          "type": "boolean", 
          "example": false
        }, 
        "journal_check": {
          "type": "boolean", 
          "example": false
        }, 
        "exclude_small_matches_type": {
          "type": "string", 
          "example": "percent"
        }, 
        "exclude_quoted": {
          "type": "boolean", 
          "example": false
        }, 
        "internet_check": {
          "type": "boolean", 
          "example": false
        }, 
        "exclude_small_matches_value": {
          "type": "integer", 
          "example": 50
        }, 
        "exclude_biblio": {
          "type": "boolean", 
          "example": false
        }
      }, 
      "required": [], 
      "id": "TurnitinSettings", 
      "description": ""
    }, 
    "AssignmentOverride": {
      "properties": {
        "unlock_at": {
          "type": "datetime", 
          "description": "the overridden unlock at (present if unlock_at is overridden)", 
          "example": "2012-07-01T23:59:00-06:00"
        }, 
        "title": {
          "type": "string", 
          "description": "the title of the override", 
          "example": "an assignment override"
        }, 
        "assignment_id": {
          "type": "integer", 
          "description": "the ID of the assignment the override applies to", 
          "example": 123
        }, 
        "lock_at": {
          "type": "datetime", 
          "description": "the overridden lock at, if any (present if lock_at is overridden)", 
          "example": "2012-07-01T23:59:00-06:00"
        }, 
        "course_section_id": {
          "type": "integer", 
          "description": "the ID of the overrides's target section (present if the override targets a section)", 
          "example": 1
        }, 
        "all_day": {
          "type": "integer", 
          "description": "the overridden all day flag (present if due_at is overridden)", 
          "example": true
        }, 
        "student_ids": {
          "items": {
            "type": "integer"
          }, 
          "type": "array", 
          "description": "the IDs of the override's target students (present if the override targets an ad-hoc set of students)", 
          "example": "[1, 2, 3]"
        }, 
        "all_day_date": {
          "type": "datetime", 
          "description": "the overridden all day date (present if due_at is overridden)", 
          "example": "2012-07-01"
        }, 
        "due_at": {
          "type": "datetime", 
          "description": "the overridden due at (present if due_at is overridden)", 
          "example": "2012-07-01T23:59:00-06:00"
        }, 
        "group_id": {
          "type": "integer", 
          "description": "the ID of the override's target group (present if the override targets a group and the assignment is a group assignment)", 
          "example": 2
        }, 
        "id": {
          "type": "integer", 
          "description": "the ID of the assignment override", 
          "example": 4
        }
      }, 
      "required": [], 
      "id": "AssignmentOverride", 
      "description": "NOTE: The Assignment Override feature is in beta! This API is not finalized and there could be breaking changes before its final release."
    }, 
    "Account": {
      "properties": {
        "integration_id": {
          "type": "string", 
          "description": "The account's identifier in the Student Information System. Only included if the user has permission to view SIS information.", 
          "example": "123xyz"
        }, 
        "default_time_zone": {
          "type": "string", 
          "description": "The default time zone of the account. Allowed time zones are {http://www.iana.org/time-zones IANA time zones} or friendlier {http://api.rubyonrails.org/classes/ActiveSupport/TimeZone.html Ruby on Rails time zones}.", 
          "example": "America/Denver"
        }, 
        "name": {
          "type": "string", 
          "description": "The display name of the account", 
          "example": "Canvas Account"
        }, 
        "default_storage_quota_mb": {
          "type": "integer", 
          "description": "The storage quota for the account in megabytes, if not otherwise specified", 
          "example": 500
        }, 
        "sis_account_id": {
          "type": "string", 
          "description": "The account's identifier in the Student Information System. Only included if the user has permission to view SIS information.", 
          "example": "123xyz"
        }, 
        "root_account_id": {
          "type": "integer", 
          "description": "The ID of the root account, or null if this is the root account", 
          "example": 1
        }, 
        "default_group_storage_quota_mb": {
          "type": "integer", 
          "description": "The storage quota for a group in the account in megabytes, if not otherwise specified", 
          "example": 50
        }, 
        "id": {
          "type": "integer", 
          "description": "the ID of the Account object", 
          "example": 2
        }, 
        "sis_import_id": {
          "type": "integer", 
          "description": "The id of the SIS import if created through SIS. Only included if the user has permission to manage SIS information.", 
          "example": "12"
        }, 
        "lti_guid": {
          "type": "string", 
          "description": "The account's identifier that is sent as context_id in LTI launches.", 
          "example": "123xyz"
        }, 
        "workflow_state": {
          "type": "string", 
          "description": "The state of the account. Can be 'active' or 'deleted'.", 
          "example": "active"
        }, 
        "parent_account_id": {
          "type": "integer", 
          "description": "The account's parent ID, or null if this is the root account", 
          "example": 1
        }, 
        "default_user_storage_quota_mb": {
          "type": "integer", 
          "description": "The storage quota for a user in the account in megabytes, if not otherwise specified", 
          "example": 50
        }
      }, 
      "required": [], 
      "id": "Account", 
      "description": ""
    }, 
    "Appointment": {
      "properties": {
        "start_at": {
          "type": "datetime", 
          "description": "Start time for the appointment", 
          "example": "2012-07-20T15:00:00-06:00"
        }, 
        "id": {
          "type": "integer", 
          "description": "The appointment identifier.", 
          "example": 987
        }, 
        "end_at": {
          "type": "datetime", 
          "description": "End time for the appointment", 
          "example": "2012-07-20T15:00:00-06:00"
        }
      }, 
      "required": [], 
      "id": "Appointment", 
      "description": "Date and time for an appointment"
    }, 
    "DiscoveryUrl": {
      "properties": {
        "discovery_url": {
          "type": "string", 
          "example": "http://..."
        }
      }, 
      "required": [], 
      "id": "DiscoveryUrl", 
      "description": ""
    }, 
    "ExternalToolTagAttributes": {
      "properties": {
        "url": {
          "type": "string", 
          "description": "URL to the external tool", 
          "example": "http://instructure.com"
        }, 
        "new_tab": {
          "type": "boolean", 
          "description": "Whether or not there is a new tab for the external tool", 
          "example": false
        }, 
        "resource_link_id": {
          "type": "string", 
          "description": "the identifier for this tool_tag", 
          "example": "ab81173af98b8c33e66a"
        }
      }, 
      "required": [], 
      "id": "ExternalToolTagAttributes", 
      "description": ""
    }, 
    "AccountAuthorizationConfig": {
      "properties": {
        "auth_type": {
          "type": "string", 
          "description": "Valid for SAML, LDAP and CAS authorization.", 
          "example": "saml"
        }, 
        "auth_base": {
          "type": "string", 
          "description": "Valid for LDAP and CAS authorization."
        }, 
        "log_in_url": {
          "type": "string", 
          "description": "Valid for SAML and CAS authorization.", 
          "example": "http://example.com/saml1/sli"
        }, 
        "auth_over_tls": {
          "type": "integer", 
          "description": "Valid for LDAP authorization."
        }, 
        "requested_authn_context": {
          "type": "string", 
          "description": "Valid for SAML authorization."
        }, 
        "identifier_format": {
          "type": "string", 
          "description": "Valid for SAML authorization.", 
          "example": "urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress"
        }, 
        "auth_port": {
          "type": "integer", 
          "description": "Valid for LDAP authorization."
        }, 
        "idp_entity_id": {
          "type": "string", 
          "description": "Valid for SAML authorization.", 
          "example": "http://example.com/saml1"
        }, 
        "log_out_url": {
          "type": "string", 
          "description": "Valid for SAML authorization.", 
          "example": "http://example.com/saml1/slo"
        }, 
        "certificate_fingerprint": {
          "type": "string", 
          "description": "Valid for SAML authorization.", 
          "example": "111222"
        }, 
        "auth_filter": {
          "type": "string", 
          "description": "Valid for LDAP authorization.", 
          "example": "filter1"
        }, 
        "login_attribute": {
          "type": "string", 
          "description": "Valid for SAML authorization.", 
          "example": "nameid"
        }, 
        "auth_host": {
          "type": "string", 
          "description": "Valid for LDAP authorization.", 
          "example": "127.0.0.1"
        }, 
        "position": {
          "type": "integer", 
          "description": "Valid for SAML, LDAP and CAS authorization.", 
          "example": 1
        }, 
        "change_password_url": {
          "type": "string", 
          "description": "Valid for SAML authorization."
        }, 
        "unknown_user_url": {
          "type": "string", 
          "description": "Valid for SAML and CAS authorization.", 
          "example": "https://canvas.instructure.com/login"
        }, 
        "login_handle_name": {
          "type": "string", 
          "description": "Valid for SAML and CAS authorization."
        }, 
        "auth_username": {
          "type": "string", 
          "description": "Valid for LDAP authorization.", 
          "example": "username1"
        }, 
        "id": {
          "type": "integer", 
          "description": "Valid for SAML, LDAP and CAS authorization.", 
          "example": 1649
        }
      }, 
      "required": [], 
      "id": "AccountAuthorizationConfig", 
      "description": ""
    }, 
    "Assignment": {
      "properties": {
        "use_rubric_for_grading": {
          "type": "boolean", 
          "description": "(Optional) If true, the rubric is directly tied to grading the assignment. Otherwise, it is only advisory. Included if there is an associated rubric.", 
          "example": true
        }, 
        "has_overrides": {
          "type": "boolean", 
          "description": "whether this assignment has overrides", 
          "example": true
        }, 
        "lock_info": {
          "description": "(Optional) Information for the user about the lock. Present when locked_for_user is true.", 
          "$ref": "LockInfo"
        }, 
        "frozen_attributes": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "(Optional) Array of frozen attributes for the assignment. Only account administrators currently have permission to change an attribute in this list. Will be empty if no attributes are frozen for this assignment. Possible frozen attributes are: title, description, lock_at, points_possible, grading_type, submission_types, assignment_group_id, allowed_extensions, group_category_id, notify_of_update, peer_reviews NOTE: This field will only be present if the AssignmentFreezer plugin is available for your account.", 
          "example": "[\"title\"]"
        }, 
        "points_possible": {
          "type": "integer", 
          "description": "the maximum points possible for the assignment", 
          "example": 12
        }, 
        "assignment_visibility": {
          "items": {
            "type": "integer"
          }, 
          "type": "array", 
          "description": "(Optional) If 'assignment_visibility' is included in the 'include' parameter, includes an array of student IDs who can see this assignment.", 
          "example": "[137,381,572]"
        }, 
        "updated_at": {
          "type": "datetime", 
          "description": "The time at which this assignment was last modified in any way", 
          "example": "2012-07-01T23:59:00-06:00"
        }, 
        "turnitin_enabled": {
          "type": "boolean", 
          "description": "Boolean flag indicating whether or not Turnitin has been enabled for the assignment. NOTE: This flag will not appear unless your account has the Turnitin plugin available", 
          "example": true
        }, 
        "rubric": {
          "items": {
            "$ref": "RubricCriteria"
          }, 
          "type": "array", 
          "description": "(Optional) A list of scoring criteria and ratings for each rubric criterion. Included if there is an associated rubric."
        }, 
        "course_id": {
          "type": "integer", 
          "description": "the ID of the course the assignment belongs to", 
          "example": 123
        }, 
        "needs_grading_count_by_section": {
          "items": {
            "$ref": "NeedsGradingCount"
          }, 
          "type": "array", 
          "description": "if the requesting user has grading rights and the 'needs_grading_count_by_section' flag is specified, the number of submissions that need grading split out by section. NOTE: This key is NOT present unless you pass the 'needs_grading_count_by_section' argument as true.  ANOTHER NOTE: it's possible to be enrolled in multiple sections, and if a student is setup that way they will show an assignment that needs grading in multiple sections (effectively the count will be duplicated between sections)", 
          "example": [
            {
              "needs_grading_count": 5, 
              "section_id": "123456"
            }, 
            {
              "needs_grading_count": 0, 
              "section_id": "654321"
            }
          ]
        }, 
        "id": {
          "type": "integer", 
          "description": "the ID of the assignment", 
          "example": 4
        }, 
        "locked_for_user": {
          "type": "boolean", 
          "description": "Whether or not this is locked for the user.", 
          "example": false
        }, 
        "muted": {
          "type": "boolean", 
          "description": "whether the assignment is muted"
        }, 
        "grading_type": {
          "allowableValues": {
            "values": [
              "pass_fail", 
              "percent", 
              "letter_grade", 
              "gpa_scale", 
              "points"
            ]
          }, 
          "type": "string", 
          "description": "The type of grading the assignment receives; one of 'pass_fail', 'percent', 'letter_grade', 'gpa_scale', 'points'", 
          "example": "points"
        }, 
        "rubric_settings": {
          "type": "string", 
          "description": "(Optional) An object describing the basic attributes of the rubric, including the point total. Included if there is an associated rubric.", 
          "example": "{\"points_possible\"=>12}"
        }, 
        "anonymous_submissions": {
          "type": "boolean", 
          "description": "(Optional) whether anonymous submissions are accepted (applies only to quiz assignments)", 
          "example": false
        }, 
        "peer_reviews": {
          "type": "boolean", 
          "description": "Boolean indicating if peer reviews are required for this assignment", 
          "example": false
        }, 
        "discussion_topic": {
          "description": "(Optional) the DiscussionTopic associated with the assignment, if applicable", 
          "$ref": "DiscussionTopic"
        }, 
        "quiz_id": {
          "type": "integer", 
          "description": "(Optional) id of the associated quiz (applies only when submission_types is ['online_quiz'])", 
          "example": 620
        }, 
        "freeze_on_copy": {
          "type": "boolean", 
          "description": "(Optional) Boolean indicating if assignment will be frozen when it is copied. NOTE: This field will only be present if the AssignmentFreezer plugin is available for your account.", 
          "example": false
        }, 
        "grade_group_students_individually": {
          "type": "boolean", 
          "description": "If this is a group assignment, boolean flag indicating whether or not students will be graded individually.", 
          "example": false
        }, 
        "integration_data": {
          "type": "string", 
          "example": "12341234", 
          "description": "(optional, Third Party integration data for assignment)"
        }, 
        "description": {
          "type": "string", 
          "description": "the assignment description, in an HTML fragment", 
          "example": "<p>Do the following:</p>..."
        }, 
        "peer_review_count": {
          "type": "integer", 
          "description": "Integer representing the amount of reviews each user is assigned. NOTE: This key is NOT present unless you have automatic_peer_reviews set to true.", 
          "example": 0
        }, 
        "all_dates": {
          "items": {
            "$ref": "AssignmentDate"
          }, 
          "type": "array", 
          "description": "(Optional) all dates associated with the assignment, if applicable"
        }, 
        "grading_standard_id": {
          "type": "integer", 
          "description": "The id of the grading standard being applied to this assignment. Valid if grading_type is 'letter_grade' or 'gpa_scale'."
        }, 
        "external_tool_tag_attributes": {
          "description": "(Optional) assignment's settings for external tools if submission_types include 'external_tool'. Only url and new_tab are included. Use the 'External Tools' API if you need more information about an external tool.", 
          "$ref": "ExternalToolTagAttributes"
        }, 
        "html_url": {
          "type": "string", 
          "description": "the URL to the assignment's web page", 
          "example": "https://..."
        }, 
        "turnitin_settings": {
          "description": "Settings to pass along to turnitin to control what kinds of matches should be considered. originality_report_visibility can be 'immediate', 'after_grading', 'after_due_date', or 'never' exclude_small_matches_type can be null, 'percent', 'words' exclude_small_matches_value: - if type is null, this will be null also - if type is 'percent', this will be a number between 0 and 100 representing match size to exclude as a percentage of the document size. - if type is 'words', this will be number > 0 representing how many words a match must contain for it to be considered NOTE: This flag will not appear unless your account has the Turnitin plugin available", 
          "$ref": "TurnitinSettings"
        }, 
        "group_category_id": {
          "type": "integer", 
          "description": "The ID of the assignment\u2019s group set, if this is a group assignment. For group discussions, set group_category_id on the discussion topic, not the linked assignment.", 
          "example": 1
        }, 
        "lock_explanation": {
          "type": "string", 
          "description": "(Optional) An explanation of why this is locked for the user. Present when locked_for_user is true.", 
          "example": "This assignment is locked until September 1 at 12:00am"
        }, 
        "needs_grading_count": {
          "type": "integer", 
          "description": "if the requesting user has grading rights, the number of submissions that need grading.", 
          "example": 17
        }, 
        "peer_reviews_assign_at": {
          "type": "datetime", 
          "description": "String representing a date the reviews are due by. Must be a date that occurs after the default due date. If blank, or date is not after the assignment's due date, the assignment's due date will be used. NOTE: This key is NOT present unless you have automatic_peer_reviews set to true.", 
          "example": "2012-07-01T23:59:00-06:00"
        }, 
        "name": {
          "type": "string", 
          "description": "the name of the assignment", 
          "example": "some assignment"
        }, 
        "integration_id": {
          "type": "string", 
          "example": "12341234", 
          "description": "(optional, Third Party unique identifier for Assignment)"
        }, 
        "frozen": {
          "type": "boolean", 
          "description": "(Optional) Boolean indicating if assignment is frozen for the calling user. NOTE: This field will only be present if the AssignmentFreezer plugin is available for your account.", 
          "example": false
        }, 
        "only_visible_to_overrides": {
          "type": "boolean", 
          "description": "(Only visible if the Differentiated Assignments course feature is turned on) Whether the assignment is only visible to overrides.", 
          "example": false
        }, 
        "unlock_at": {
          "type": "datetime", 
          "description": "the unlock date (assignment is unlocked after this date) returns null if not present NOTE: If this assignment has assignment overrides, this field will be the unlock date as it applies to the user requesting information from the API.", 
          "example": "2012-07-01T23:59:00-06:00"
        }, 
        "submission": {
          "$ref": "Submission", 
          "description": "(Optional) If 'submission' is included in the 'include' parameter, includes a Submission object that represents the current user's (user who is requesting information from the api) current submission for the assignment. See the Submissions API for an example response. If the user does not have a submission, this key will be absent.", 
          "example": "{}"
        }, 
        "due_at": {
          "type": "datetime", 
          "description": "the due date for the assignment. returns null if not present. NOTE: If this assignment has assignment overrides, this field will be the due date as it applies to the user requesting information from the API.", 
          "example": "2012-07-01T23:59:00-06:00"
        }, 
        "created_at": {
          "type": "datetime", 
          "description": "The time at which this assignment was originally created", 
          "example": "2012-07-01T23:59:00-06:00"
        }, 
        "post_to_sis": {
          "type": "boolean", 
          "example": true, 
          "description": "(optional, present if Post Grades to SIS feature is enabled)"
        }, 
        "lock_at": {
          "type": "datetime", 
          "description": "the lock date (assignment is locked after this date). returns null if not present. NOTE: If this assignment has assignment overrides, this field will be the lock date as it applies to the user requesting information from the API.", 
          "example": "2012-07-01T23:59:00-06:00"
        }, 
        "assignment_group_id": {
          "type": "integer", 
          "description": "the ID of the assignment's group", 
          "example": 2
        }, 
        "allowed_extensions": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "Allowed file extensions, which take effect if submission_types includes 'online_upload'.", 
          "example": "[\"docx\", \"ppt\"]"
        }, 
        "automatic_peer_reviews": {
          "type": "boolean", 
          "description": "Boolean indicating peer reviews are assigned automatically. If false, the teacher is expected to manually assign peer reviews.", 
          "example": false
        }, 
        "published": {
          "type": "boolean", 
          "description": "(Only visible if 'enable draft' account setting is on) whether the assignment is published", 
          "example": true
        }, 
        "position": {
          "type": "integer", 
          "description": "the sorting order of the assignment in the group", 
          "example": 1
        }, 
        "submission_types": {
          "items": {
            "type": "string"
          }, 
          "allowableValues": {
            "values": [
              "discussion_topic", 
              "online_quiz", 
              "on_paper", 
              "none", 
              "external_tool", 
              "online_text_entry", 
              "online_url", 
              "online_upload", 
              "media_recording"
            ]
          }, 
          "type": "array", 
          "description": "the types of submissions allowed for this assignment list containing one or more of the following: 'discussion_topic', 'online_quiz', 'on_paper', 'none', 'external_tool', 'online_text_entry', 'online_url', 'online_upload' 'media_recording'", 
          "example": "[\"online_text_entry\"]"
        }, 
        "overrides": {
          "items": {
            "$ref": "AssignmentOverride"
          }, 
          "type": "array", 
          "description": "(Optional) If 'overrides' is included in the 'include' parameter, includes an array of assignment override objects."
        }, 
        "unpublishable": {
          "type": "boolean", 
          "description": "(Only visible if 'enable draft' account setting is on) Whether the assignment's 'published' state can be changed to false. Will be false if there are student submissions for the assignment.", 
          "example": false
        }
      }, 
      "required": [], 
      "id": "Assignment", 
      "description": ""
    }, 
    "NeedsGradingCount": {
      "properties": {
        "needs_grading_count": {
          "type": "integer", 
          "description": "Number of submissions that need grading", 
          "example": 5
        }, 
        "section_id": {
          "type": "string", 
          "description": "The section ID", 
          "example": "123456"
        }
      }, 
      "required": [], 
      "id": "NeedsGradingCount", 
      "description": "Used by Assignment model"
    }, 
    "RubricCriteria": {
      "properties": {
        "vendor_guid": {
          "type": "string", 
          "description": "(Optional) The 3rd party vendor's GUID for the outcome this criteria references, if any.", 
          "example": "abdsfjasdfne3jsdfn2"
        }, 
        "description": {
          "type": "string", 
          "example": "Criterion 1"
        }, 
        "ratings": {
          "items": {
            "$ref": "RubricRating"
          }, 
          "type": "array"
        }, 
        "id": {
          "type": "string", 
          "description": "The id of rubric criteria.", 
          "example": "crit1"
        }, 
        "points": {
          "type": "integer", 
          "example": 10
        }, 
        "outcome_id": {
          "type": "string", 
          "description": "(Optional) The id of the learning outcome this criteria uses, if any.", 
          "example": "1234"
        }, 
        "long_description": {
          "type": "string", 
          "example": "Criterion 1 more details"
        }
      }, 
      "required": [], 
      "id": "RubricCriteria", 
      "description": ""
    }, 
    "Admin": {
      "properties": {
        "status": {
          "type": "string", 
          "description": "The status of the account role/user assignment.", 
          "example": "deleted"
        }, 
        "role": {
          "type": "string", 
          "description": "The account role assigned. This can be 'AccountAdmin' or a user-defined role created by the Roles API.", 
          "example": "AccountAdmin"
        }, 
        "id": {
          "type": "integer", 
          "description": "The unique identifier for the account role/user assignment.", 
          "example": 1023
        }, 
        "user": {
          "description": "The user the role is assigned to. See the Users API for details.", 
          "$ref": "User"
        }
      }, 
      "required": [
        "id"
      ], 
      "id": "Admin", 
      "description": ""
    }, 
    "AccountNotification": {
      "properties": {
        "role_ids": {
          "items": {
            "type": "integer"
          }, 
          "type": "array", 
          "description": "The roles to send the notification to.  If roles is not passed it defaults to all roles", 
          "example": "[1]"
        }, 
        "start_at": {
          "type": "datetime", 
          "description": "When to send out the notification.", 
          "example": "2013-08-28T23:59:00-06:00"
        }, 
        "roles": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "(Deprecated) The roles to send the notification to.  If roles is not passed it defaults to all roles", 
          "example": "[\"StudentEnrollment\"]"
        }, 
        "end_at": {
          "type": "datetime", 
          "description": "When to expire the notification.", 
          "example": "2013-08-29T23:59:00-06:00"
        }, 
        "message": {
          "type": "string", 
          "description": "The message to be sent in the notification.", 
          "example": "This is a test of the notification system."
        }, 
        "subject": {
          "type": "string", 
          "description": "The subject of the notifications", 
          "example": "Attention Students"
        }, 
        "icon": {
          "items": {
            "type": "string"
          }, 
          "allowableValues": {
            "values": [
              "warning", 
              "information", 
              "question", 
              "error", 
              "calendar"
            ]
          }, 
          "type": "array", 
          "description": "The icon to display with the message.  Defaults to warning.", 
          "example": "[\"information\"]"
        }
      }, 
      "required": [], 
      "id": "AccountNotification", 
      "description": ""
    }, 
    "RubricRating": {
      "properties": {
        "points": {
          "type": "integer", 
          "example": 10
        }, 
        "id": {
          "type": "string", 
          "example": "rat1"
        }, 
        "description": {
          "type": "string", 
          "example": "Full marks"
        }
      }, 
      "required": [], 
      "id": "RubricRating", 
      "description": ""
    }, 
    "LockInfo": {
      "properties": {
        "lock_at": {
          "type": "datetime", 
          "description": "(Optional) Time at which this was/will be locked.", 
          "example": "2013-02-01T00:00:00-06:00"
        }, 
        "context_module": {
          "type": "string", 
          "description": "(Optional) Context module causing the lock.", 
          "example": "{}"
        }, 
        "asset_string": {
          "type": "string", 
          "description": "Asset string for the object causing the lock", 
          "example": "assignment_4"
        }, 
        "unlock_at": {
          "type": "datetime", 
          "description": "(Optional) Time at which this was/will be unlocked.", 
          "example": "2013-01-01T00:00:00-06:00"
        }, 
        "manually_locked": {
          "type": "boolean", 
          "example": true
        }
      }, 
      "required": [], 
      "id": "LockInfo", 
      "description": ""
    }, 
    "Report": {
      "properties": {
        "status": {
          "type": "string", 
          "description": "The status of the report", 
          "example": "complete"
        }, 
        "parameters": {
          "description": "The report parameters", 
          "$ref": "ReportParameters"
        }, 
        "file_url": {
          "type": "string", 
          "description": "The url to the report download.", 
          "example": "https://example.com/some/path"
        }, 
        "report": {
          "type": "string", 
          "description": "The type of report.", 
          "example": "sis_export_csv"
        }, 
        "progress": {
          "type": "string", 
          "description": "The progress of the report", 
          "example": "100"
        }, 
        "id": {
          "type": "integer", 
          "description": "The unique identifier for the report.", 
          "example": "1"
        }
      }, 
      "required": [], 
      "id": "Report", 
      "description": ""
    }, 
    "AssignmentDate": {
      "properties": {
        "unlock_at": {
          "type": "datetime", 
          "example": "2013-08-01T00:00:00-06:00"
        }, 
        "title": {
          "type": "string", 
          "example": "Summer Session"
        }, 
        "due_at": {
          "type": "datetime", 
          "example": "2013-08-28T23:59:00-06:00"
        }, 
        "lock_at": {
          "type": "datetime", 
          "example": "2013-08-31T23:59:00-06:00"
        }, 
        "base": {
          "type": "boolean", 
          "example": true, 
          "description": "(Optional, present if 'id' is missing) whether this date represents the assignment's or quiz's default due date"
        }, 
        "id": {
          "type": "integer", 
          "example": 1, 
          "description": "(Optional, missing if 'base' is present) id of the assignment override this date represents"
        }
      }, 
      "required": [], 
      "id": "AssignmentDate", 
      "description": "Object representing a due date for an assignment or quiz. If the due date came from an assignment override, it will have an 'id' field."
    }, 
    "AppointmentGroup": {
      "properties": {
        "participant_visibility": {
          "allowableValues": {
            "values": [
              "private", 
              "protected"
            ]
          }, 
          "type": "string", 
          "description": "'private' means participants cannot see who has signed up for a particular time slot, 'protected' means that they can", 
          "example": "private"
        }, 
        "updated_at": {
          "type": "datetime", 
          "description": "When the appointment group was last updated", 
          "example": "2012-07-13T10:55:20-06:00"
        }, 
        "context_codes": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "The context codes (i.e. courses) this appointment group belongs to. Only people in these courses will be eligible to sign up.", 
          "example": "[course_123]"
        }, 
        "participant_type": {
          "allowableValues": {
            "values": [
              "User", 
              "Group"
            ]
          }, 
          "type": "string", 
          "description": "Indicates how participants sign up for the appointment group, either as individuals ('User') or in student groups ('Group'). Related to sub_context_codes (i.e. 'Group' signups always have a single group category)", 
          "example": "User"
        }, 
        "end_at": {
          "type": "datetime", 
          "description": "The end of the last time slot in the appointment group", 
          "example": "2012-07-20T17:00:00-06:00"
        }, 
        "id": {
          "type": "integer", 
          "description": "The ID of the appointment group", 
          "example": 543
        }, 
        "participants_per_appointment": {
          "type": "integer", 
          "description": "Maximum number of participants that may register for each time slot, or null if no limit", 
          "example": 1
        }, 
        "title": {
          "type": "string", 
          "description": "The title of the appointment group", 
          "example": "Final Presentation"
        }, 
        "new_appointments": {
          "items": {
            "$ref": "CalendarEvent"
          }, 
          "type": "array", 
          "description": "Newly created time slots (same format as appointments above). Only returned in Create/Update responses where new time slots have been added", 
          "example": "[]"
        }, 
        "min_appointments_per_participant": {
          "type": "integer", 
          "description": "Minimum number of time slots a user must register for. If not set, users do not need to sign up for any time slots", 
          "example": 1
        }, 
        "appointments_count": {
          "type": "integer", 
          "description": "Number of time slots in this appointment group", 
          "example": 2
        }, 
        "start_at": {
          "type": "datetime", 
          "description": "The start of the first time slot in the appointment group", 
          "example": "2012-07-20T15:00:00-06:00"
        }, 
        "description": {
          "type": "string", 
          "description": "The text description of the appointment group", 
          "example": "Es muy importante"
        }, 
        "participant_count": {
          "type": "integer", 
          "description": "The number of participant who have reserved slots (see include[] argument)", 
          "example": 2
        }, 
        "workflow_state": {
          "allowableValues": {
            "values": [
              "pending", 
              "active", 
              "deleted"
            ]
          }, 
          "type": "string", 
          "description": "Current state of the appointment group ('pending', 'active' or 'deleted'). 'pending' indicates that it has not been published yet and is invisible to participants.", 
          "example": "active"
        }, 
        "html_url": {
          "type": "string", 
          "description": "URL for a user to view this appointment group", 
          "example": "http://example.com/appointment_groups/1"
        }, 
        "location_address": {
          "type": "string", 
          "description": "The address of the appointment group's location", 
          "example": "Room 234"
        }, 
        "appointments": {
          "items": {
            "$ref": "CalendarEvent"
          }, 
          "type": "array", 
          "description": "Calendar Events representing the time slots (see include[] argument) Refer to the Calendar Events API for more information", 
          "example": "[]"
        }, 
        "reserved_times": {
          "items": {
            "$ref": "Appointment"
          }, 
          "type": "array", 
          "description": "The start and end times of slots reserved by the current user as well as the id of the calendar event for the reservation (see include[] argument)", 
          "example": "[{\"id\"=>987, \"start_at\"=>\"2012-07-20T15:00:00-06:00\", \"end_at\"=>\"2012-07-20T15:00:00-06:00\"}]"
        }, 
        "location_name": {
          "type": "string", 
          "description": "The location name of the appointment group", 
          "example": "El Tigre Chino's office"
        }, 
        "max_appointments_per_participant": {
          "type": "integer", 
          "description": "Maximum number of time slots a user may register for, or null if no limit", 
          "example": 1
        }, 
        "url": {
          "type": "string", 
          "description": "URL for this appointment group (to update, delete, etc.)", 
          "example": "https://example.com/api/v1/appointment_groups/543"
        }, 
        "created_at": {
          "type": "datetime", 
          "description": "When the appointment group was created", 
          "example": "2012-07-13T10:55:20-06:00"
        }, 
        "sub_context_codes": {
          "items": {
            "type": "integer"
          }, 
          "type": "array", 
          "description": "The sub-context codes (i.e. course sections and group categories) this appointment group is restricted to", 
          "example": "[course_section_234]"
        }, 
        "requiring_action": {
          "type": "boolean", 
          "description": "Boolean indicating whether the current user needs to sign up for this appointment group (i.e. it's reservable and the min_appointments_per_participant limit has not been met by this user).", 
          "example": true
        }
      }, 
      "required": [], 
      "id": "AppointmentGroup", 
      "description": ""
    }, 
    "ExternalFeed": {
      "properties": {
        "display_name": {
          "type": "string", 
          "description": "The title of the feed, pulled from the feed itself. If the feed hasn't yet been pulled, a temporary name will be synthesized based on the URL", 
          "example": "My Blog"
        }, 
        "url": {
          "type": "string", 
          "description": "The HTTP/HTTPS URL to the feed", 
          "example": "http://example.com/myblog.rss"
        }, 
        "created_at": {
          "type": "datetime", 
          "description": "When this external feed was added to Canvas", 
          "example": "2012-06-01T00:00:00-06:00"
        }, 
        "id": {
          "type": "integer", 
          "description": "The ID of the feed", 
          "example": 5
        }, 
        "header_match": {
          "type": "string", 
          "description": "If not null, only feed entries whose title contains this string will trigger new posts in Canvas", 
          "example": "pattern"
        }, 
        "verbosity": {
          "allowableValues": {
            "values": [
              "link_only", 
              "truncate", 
              "full"
            ]
          }, 
          "type": "string", 
          "description": "The verbosity setting determines how much of the feed's content is imported into Canvas as part of the posting. 'link_only' means that only the title and a link to the item. 'truncate' means that a summary of the first portion of the item body will be used. 'full' means that the full item body will be used.", 
          "example": "truncate"
        }
      }, 
      "required": [], 
      "id": "ExternalFeed", 
      "description": ""
    }, 
    "ReportParameters": {
      "properties": {
        "include_enrollment_state": {
          "type": "boolean", 
          "description": "Include enrollment state. Defaults to false", 
          "example": false
        }, 
        "enrollment_state[]": {
          "type": "string", 
          "description": "Include enrollment state. Defaults to 'all' Options: ['active'| 'invited'| 'creation_pending'| 'deleted'| 'rejected'| 'completed'| 'inactive'| 'all']", 
          "example": "['all']"
        }, 
        "sis_terms_csv": {
          "type": "integer", 
          "example": 1
        }, 
        "terms": {
          "type": "boolean", 
          "description": "Get the data for terms", 
          "example": false
        }, 
        "users": {
          "type": "boolean", 
          "description": "Get the data for users", 
          "example": false
        }, 
        "enrollments": {
          "type": "boolean", 
          "description": "Get the data for enrollments", 
          "example": false
        }, 
        "enrollment_term_id": {
          "type": "integer", 
          "description": "The canvas id of the term to get grades from", 
          "example": 2
        }, 
        "include_deleted": {
          "type": "boolean", 
          "description": "Include deleted objects", 
          "example": false
        }, 
        "courses": {
          "type": "boolean", 
          "description": "Get the data for courses", 
          "example": false
        }, 
        "sis_accounts_csv": {
          "type": "integer", 
          "example": 1
        }, 
        "accounts": {
          "type": "boolean", 
          "description": "Get the data for accounts", 
          "example": false
        }, 
        "groups": {
          "type": "boolean", 
          "description": "Get the data for groups", 
          "example": false
        }, 
        "course_id": {
          "type": "integer", 
          "description": "The course to report on", 
          "example": 2
        }, 
        "start_at": {
          "type": "datetime", 
          "description": "The beginning date for submissions. Max time range is 2 weeks.", 
          "example": "2012-07-13T10:55:20-06:00"
        }, 
        "end_at": {
          "type": "datetime", 
          "description": "The end date for submissions. Max time range is 2 weeks.", 
          "example": "2012-07-13T10:55:20-06:00"
        }, 
        "sections": {
          "type": "boolean", 
          "description": "Get the data for sections", 
          "example": false
        }, 
        "order": {
          "allowableValues": {
            "values": [
              "users", 
              "courses", 
              "outcomes"
            ]
          }, 
          "type": "string", 
          "description": "The sort order for the csv, Options: 'users', 'courses', 'outcomes'.", 
          "example": "users"
        }, 
        "xlist": {
          "type": "boolean", 
          "description": "Get the data for cross-listed courses", 
          "example": false
        }
      }, 
      "required": [], 
      "id": "ReportParameters", 
      "description": "The parameters returned will vary for each report."
    }
  }, 
  "basePath": "https://canvas.instructure.com/api", 
  "produces": [
    "application/json"
  ], 
  "resourcePath": "/accounts", 
  "apiVersion": "1.0"
}