{
  "apiVersion": "1.0",
  "swaggerVersion": "1.2",
  "basePath": "https://canvas.instructure.com/api",
  "resourcePath": "/submissions",
  "produces": [
    "application/json"
  ],
  "apis": [
    {
      "path": "/v1/courses/{course_id}/assignments/{assignment_id}/submissions",
      "description": "Make a submission for an assignment. You must be enrolled as a student in\nthe course/section to do this.\n\nAll online turn-in submission types are supported in this API. However,\nthere are a few things that are not yet supported:\n\n* Files can be submitted based on a file ID of a user or group file. However, there is no API yet for listing the user and group files, or uploading new files via the API. A file upload API is coming soon.\n* Media comments can be submitted, however, there is no API yet for creating a media comment to submit.\n* Integration with Google Docs is not yet supported.",
      "operations": [
        {
          "method": "POST",
          "summary": "Submit an assignment",
          "notes": "Make a submission for an assignment. You must be enrolled as a student in\nthe course/section to do this.\n\nAll online turn-in submission types are supported in this API. However,\nthere are a few things that are not yet supported:\n\n* Files can be submitted based on a file ID of a user or group file. However, there is no API yet for listing the user and group files, or uploading new files via the API. A file upload API is coming soon.\n* Media comments can be submitted, however, there is no API yet for creating a media comment to submit.\n* Integration with Google Docs is not yet supported.",
          "nickname": "submit_assignment_courses",
          "parameters": [
            {
              "paramType": "path",
              "name": "course_id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            },
            {
              "paramType": "path",
              "name": "assignment_id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            },
            {
              "paramType": "form",
              "name": "comment[text_comment]",
              "description": "Include a textual comment with the submission.",
              "type": "string",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "submission[submission_type]",
              "description": "The type of submission being made. The assignment submission_types must\ninclude this submission type as an allowed option, or the submission will be rejected with a 400 error.\n\nThe submission_type given determines which of the following parameters is\nused. For instance, to submit a URL, submission [submission_type] must be\nset to \"online_url\", otherwise the submission [url] parameter will be\nignored.",
              "type": "string",
              "format": null,
              "required": true,
              "enum": [
                "online_text_entry",
                "online_url",
                "online_upload",
                "media_recording"
              ]
            },
            {
              "paramType": "form",
              "name": "submission[body]",
              "description": "Submit the assignment as an HTML document snippet. Note this HTML snippet\nwill be sanitized using the same ruleset as a submission made from the\nCanvas web UI. The sanitized HTML will be returned in the response as the\nsubmission body. Requires a submission_type of \"online_text_entry\".",
              "type": "string",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "submission[url]",
              "description": "Submit the assignment as a URL. The URL scheme must be \"http\" or \"https\",\nno \"ftp\" or other URL schemes are allowed. If no scheme is given (e.g.\n\"www.example.com\") then \"http\" will be assumed. Requires a submission_type\nof \"online_url\".",
              "type": "string",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "submission[file_ids]",
              "description": "Submit the assignment as a set of one or more previously uploaded files\nresiding in the submitting user's files section (or the group's files\nsection, for group assignments).\n\nTo upload a new file to submit, see the submissions {api:SubmissionsApiController#create_file Upload a file API}.\n\nRequires a submission_type of \"online_upload\".",
              "type": "array",
              "format": "int64",
              "required": false,
              "items": {
                "type": "integer"
              }
            },
            {
              "paramType": "form",
              "name": "submission[media_comment_id]",
              "description": "The media comment id to submit. Media comment ids can be submitted via\nthis API, however, note that there is not yet an API to generate or list\nexisting media comments, so this functionality is currently of limited use.\n\nRequires a submission_type of \"media_recording\".",
              "type": "string",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "submission[media_comment_type]",
              "description": "The type of media comment being submitted.",
              "type": "string",
              "format": null,
              "required": false,
              "enum": [
                "audio",
                "video"
              ]
            }
          ],
          "type": "void"
        }
      ]
    },
    {
      "path": "/v1/sections/{section_id}/assignments/{assignment_id}/submissions",
      "description": "Make a submission for an assignment. You must be enrolled as a student in\nthe course/section to do this.\n\nAll online turn-in submission types are supported in this API. However,\nthere are a few things that are not yet supported:\n\n* Files can be submitted based on a file ID of a user or group file. However, there is no API yet for listing the user and group files, or uploading new files via the API. A file upload API is coming soon.\n* Media comments can be submitted, however, there is no API yet for creating a media comment to submit.\n* Integration with Google Docs is not yet supported.",
      "operations": [
        {
          "method": "POST",
          "summary": "Submit an assignment",
          "notes": "Make a submission for an assignment. You must be enrolled as a student in\nthe course/section to do this.\n\nAll online turn-in submission types are supported in this API. However,\nthere are a few things that are not yet supported:\n\n* Files can be submitted based on a file ID of a user or group file. However, there is no API yet for listing the user and group files, or uploading new files via the API. A file upload API is coming soon.\n* Media comments can be submitted, however, there is no API yet for creating a media comment to submit.\n* Integration with Google Docs is not yet supported.",
          "nickname": "submit_assignment_sections",
          "parameters": [
            {
              "paramType": "path",
              "name": "section_id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            },
            {
              "paramType": "path",
              "name": "assignment_id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            },
            {
              "paramType": "form",
              "name": "comment[text_comment]",
              "description": "Include a textual comment with the submission.",
              "type": "string",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "submission[submission_type]",
              "description": "The type of submission being made. The assignment submission_types must\ninclude this submission type as an allowed option, or the submission will be rejected with a 400 error.\n\nThe submission_type given determines which of the following parameters is\nused. For instance, to submit a URL, submission [submission_type] must be\nset to \"online_url\", otherwise the submission [url] parameter will be\nignored.",
              "type": "string",
              "format": null,
              "required": true,
              "enum": [
                "online_text_entry",
                "online_url",
                "online_upload",
                "media_recording"
              ]
            },
            {
              "paramType": "form",
              "name": "submission[body]",
              "description": "Submit the assignment as an HTML document snippet. Note this HTML snippet\nwill be sanitized using the same ruleset as a submission made from the\nCanvas web UI. The sanitized HTML will be returned in the response as the\nsubmission body. Requires a submission_type of \"online_text_entry\".",
              "type": "string",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "submission[url]",
              "description": "Submit the assignment as a URL. The URL scheme must be \"http\" or \"https\",\nno \"ftp\" or other URL schemes are allowed. If no scheme is given (e.g.\n\"www.example.com\") then \"http\" will be assumed. Requires a submission_type\nof \"online_url\".",
              "type": "string",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "submission[file_ids]",
              "description": "Submit the assignment as a set of one or more previously uploaded files\nresiding in the submitting user's files section (or the group's files\nsection, for group assignments).\n\nTo upload a new file to submit, see the submissions {api:SubmissionsApiController#create_file Upload a file API}.\n\nRequires a submission_type of \"online_upload\".",
              "type": "array",
              "format": "int64",
              "required": false,
              "items": {
                "type": "integer"
              }
            },
            {
              "paramType": "form",
              "name": "submission[media_comment_id]",
              "description": "The media comment id to submit. Media comment ids can be submitted via\nthis API, however, note that there is not yet an API to generate or list\nexisting media comments, so this functionality is currently of limited use.\n\nRequires a submission_type of \"media_recording\".",
              "type": "string",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "submission[media_comment_type]",
              "description": "The type of media comment being submitted.",
              "type": "string",
              "format": null,
              "required": false,
              "enum": [
                "audio",
                "video"
              ]
            }
          ],
          "type": "void"
        }
      ]
    },
    {
      "path": "/v1/courses/{course_id}/assignments/{assignment_id}/submissions",
      "description": "Get all existing submissions for an assignment.",
      "operations": [
        {
          "method": "GET",
          "summary": "List assignment submissions",
          "notes": "Get all existing submissions for an assignment.",
          "nickname": "list_assignment_submissions_courses",
          "parameters": [
            {
              "paramType": "path",
              "name": "course_id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            },
            {
              "paramType": "path",
              "name": "assignment_id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            },
            {
              "paramType": "query",
              "name": "include",
              "description": "Associations to include with the group.  \"group\" will add group_id and group_name.",
              "type": "array",
              "format": null,
              "required": false,
              "enum": [
                "submission_history",
                "submission_comments",
                "rubric_assessment",
                "assignment",
                "visibility",
                "course",
                "user",
                "group"
              ],
              "items": {
                "type": "string"
              }
            },
            {
              "paramType": "query",
              "name": "grouped",
              "description": "If this argument is true, the response will be grouped by student groups.",
              "type": "boolean",
              "format": null,
              "required": false
            }
          ],
          "type": "array",
          "items": {
            "$ref": "Submission"
          }
        }
      ]
    },
    {
      "path": "/v1/sections/{section_id}/assignments/{assignment_id}/submissions",
      "description": "Get all existing submissions for an assignment.",
      "operations": [
        {
          "method": "GET",
          "summary": "List assignment submissions",
          "notes": "Get all existing submissions for an assignment.",
          "nickname": "list_assignment_submissions_sections",
          "parameters": [
            {
              "paramType": "path",
              "name": "section_id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            },
            {
              "paramType": "path",
              "name": "assignment_id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            },
            {
              "paramType": "query",
              "name": "include",
              "description": "Associations to include with the group.  \"group\" will add group_id and group_name.",
              "type": "array",
              "format": null,
              "required": false,
              "enum": [
                "submission_history",
                "submission_comments",
                "rubric_assessment",
                "assignment",
                "visibility",
                "course",
                "user",
                "group"
              ],
              "items": {
                "type": "string"
              }
            },
            {
              "paramType": "query",
              "name": "grouped",
              "description": "If this argument is true, the response will be grouped by student groups.",
              "type": "boolean",
              "format": null,
              "required": false
            }
          ],
          "type": "array",
          "items": {
            "$ref": "Submission"
          }
        }
      ]
    },
    {
      "path": "/v1/courses/{course_id}/students/submissions",
      "description": "Get all existing submissions for a given set of students and assignments.",
      "operations": [
        {
          "method": "GET",
          "summary": "List submissions for multiple assignments",
          "notes": "Get all existing submissions for a given set of students and assignments.",
          "nickname": "list_submissions_for_multiple_assignments_courses",
          "parameters": [
            {
              "paramType": "path",
              "name": "course_id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            },
            {
              "paramType": "query",
              "name": "student_ids",
              "description": "List of student ids to return submissions for. If this argument is\nomitted, return submissions for the calling user. Students may only list\ntheir own submissions. Observers may only list those of associated\nstudents. The special id \"all\" will return submissions for all students\nin the course/section as appropriate.",
              "type": "array",
              "format": null,
              "required": false,
              "items": {
                "type": "string"
              }
            },
            {
              "paramType": "query",
              "name": "assignment_ids",
              "description": "List of assignments to return submissions for. If none are given,\nsubmissions for all assignments are returned.",
              "type": "array",
              "format": null,
              "required": false,
              "items": {
                "type": "string"
              }
            },
            {
              "paramType": "query",
              "name": "grouped",
              "description": "If this argument is present, the response will be grouped by student,\nrather than a flat array of submissions.",
              "type": "boolean",
              "format": null,
              "required": false
            },
            {
              "paramType": "query",
              "name": "grading_period_id",
              "description": "The id of the grading period in which submissions are being requested\n(Requires the Multiple Grading Periods account feature turned on)",
              "type": "integer",
              "format": "int64",
              "required": false
            },
            {
              "paramType": "query",
              "name": "include",
              "description": "Associations to include with the group. `total_scores` requires the\n`grouped` argument.",
              "type": "array",
              "format": null,
              "required": false,
              "enum": [
                "submission_history",
                "submission_comments",
                "rubric_assessment",
                "assignment",
                "total_scores",
                "visibility",
                "course",
                "user"
              ],
              "items": {
                "type": "string"
              }
            }
          ],
          "type": "void"
        }
      ]
    },
    {
      "path": "/v1/sections/{section_id}/students/submissions",
      "description": "Get all existing submissions for a given set of students and assignments.",
      "operations": [
        {
          "method": "GET",
          "summary": "List submissions for multiple assignments",
          "notes": "Get all existing submissions for a given set of students and assignments.",
          "nickname": "list_submissions_for_multiple_assignments_sections",
          "parameters": [
            {
              "paramType": "path",
              "name": "section_id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            },
            {
              "paramType": "query",
              "name": "student_ids",
              "description": "List of student ids to return submissions for. If this argument is\nomitted, return submissions for the calling user. Students may only list\ntheir own submissions. Observers may only list those of associated\nstudents. The special id \"all\" will return submissions for all students\nin the course/section as appropriate.",
              "type": "array",
              "format": null,
              "required": false,
              "items": {
                "type": "string"
              }
            },
            {
              "paramType": "query",
              "name": "assignment_ids",
              "description": "List of assignments to return submissions for. If none are given,\nsubmissions for all assignments are returned.",
              "type": "array",
              "format": null,
              "required": false,
              "items": {
                "type": "string"
              }
            },
            {
              "paramType": "query",
              "name": "grouped",
              "description": "If this argument is present, the response will be grouped by student,\nrather than a flat array of submissions.",
              "type": "boolean",
              "format": null,
              "required": false
            },
            {
              "paramType": "query",
              "name": "grading_period_id",
              "description": "The id of the grading period in which submissions are being requested\n(Requires the Multiple Grading Periods account feature turned on)",
              "type": "integer",
              "format": "int64",
              "required": false
            },
            {
              "paramType": "query",
              "name": "include",
              "description": "Associations to include with the group. `total_scores` requires the\n`grouped` argument.",
              "type": "array",
              "format": null,
              "required": false,
              "enum": [
                "submission_history",
                "submission_comments",
                "rubric_assessment",
                "assignment",
                "total_scores",
                "visibility",
                "course",
                "user"
              ],
              "items": {
                "type": "string"
              }
            }
          ],
          "type": "void"
        }
      ]
    },
    {
      "path": "/v1/courses/{course_id}/assignments/{assignment_id}/submissions/{user_id}",
      "description": "Get a single submission, based on user id.",
      "operations": [
        {
          "method": "GET",
          "summary": "Get a single submission",
          "notes": "Get a single submission, based on user id.",
          "nickname": "get_single_submission_courses",
          "parameters": [
            {
              "paramType": "path",
              "name": "course_id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            },
            {
              "paramType": "path",
              "name": "assignment_id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            },
            {
              "paramType": "path",
              "name": "user_id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            },
            {
              "paramType": "query",
              "name": "include",
              "description": "Associations to include with the group.",
              "type": "array",
              "format": null,
              "required": false,
              "enum": [
                "submission_history",
                "submission_comments",
                "rubric_assessment",
                "visibility",
                "course",
                "user"
              ],
              "items": {
                "type": "string"
              }
            }
          ],
          "type": "void"
        }
      ]
    },
    {
      "path": "/v1/sections/{section_id}/assignments/{assignment_id}/submissions/{user_id}",
      "description": "Get a single submission, based on user id.",
      "operations": [
        {
          "method": "GET",
          "summary": "Get a single submission",
          "notes": "Get a single submission, based on user id.",
          "nickname": "get_single_submission_sections",
          "parameters": [
            {
              "paramType": "path",
              "name": "section_id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            },
            {
              "paramType": "path",
              "name": "assignment_id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            },
            {
              "paramType": "path",
              "name": "user_id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            },
            {
              "paramType": "query",
              "name": "include",
              "description": "Associations to include with the group.",
              "type": "array",
              "format": null,
              "required": false,
              "enum": [
                "submission_history",
                "submission_comments",
                "rubric_assessment",
                "visibility",
                "course",
                "user"
              ],
              "items": {
                "type": "string"
              }
            }
          ],
          "type": "void"
        }
      ]
    },
    {
      "path": "/v1/courses/{course_id}/assignments/{assignment_id}/submissions/{user_id}/files",
      "description": "Upload a file to a submission.\n\nThis API endpoint is the first step in uploading a file to a submission as a student.\nSee the {file:file_uploads.html File Upload Documentation} for details on the file upload workflow.\n\nThe final step of the file upload workflow will return the attachment data,\nincluding the new file id. The caller can then POST to submit the\n+online_upload+ assignment with these file ids.",
      "operations": [
        {
          "method": "POST",
          "summary": "Upload a file",
          "notes": "Upload a file to a submission.\n\nThis API endpoint is the first step in uploading a file to a submission as a student.\nSee the {file:file_uploads.html File Upload Documentation} for details on the file upload workflow.\n\nThe final step of the file upload workflow will return the attachment data,\nincluding the new file id. The caller can then POST to submit the\n+online_upload+ assignment with these file ids.",
          "nickname": "upload_file_courses",
          "parameters": [
            {
              "paramType": "path",
              "name": "course_id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            },
            {
              "paramType": "path",
              "name": "assignment_id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            },
            {
              "paramType": "path",
              "name": "user_id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            }
          ],
          "type": "void"
        }
      ]
    },
    {
      "path": "/v1/sections/{section_id}/assignments/{assignment_id}/submissions/{user_id}/files",
      "description": "Upload a file to a submission.\n\nThis API endpoint is the first step in uploading a file to a submission as a student.\nSee the {file:file_uploads.html File Upload Documentation} for details on the file upload workflow.\n\nThe final step of the file upload workflow will return the attachment data,\nincluding the new file id. The caller can then POST to submit the\n+online_upload+ assignment with these file ids.",
      "operations": [
        {
          "method": "POST",
          "summary": "Upload a file",
          "notes": "Upload a file to a submission.\n\nThis API endpoint is the first step in uploading a file to a submission as a student.\nSee the {file:file_uploads.html File Upload Documentation} for details on the file upload workflow.\n\nThe final step of the file upload workflow will return the attachment data,\nincluding the new file id. The caller can then POST to submit the\n+online_upload+ assignment with these file ids.",
          "nickname": "upload_file_sections",
          "parameters": [
            {
              "paramType": "path",
              "name": "section_id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            },
            {
              "paramType": "path",
              "name": "assignment_id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            },
            {
              "paramType": "path",
              "name": "user_id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            }
          ],
          "type": "void"
        }
      ]
    },
    {
      "path": "/v1/courses/{course_id}/assignments/{assignment_id}/submissions/{user_id}",
      "description": "Comment on and/or update the grading for a student's assignment submission.\nIf any submission or rubric_assessment arguments are provided, the user\nmust have permission to manage grades in the appropriate context (course or\nsection).",
      "operations": [
        {
          "method": "PUT",
          "summary": "Grade or comment on a submission",
          "notes": "Comment on and/or update the grading for a student's assignment submission.\nIf any submission or rubric_assessment arguments are provided, the user\nmust have permission to manage grades in the appropriate context (course or\nsection).",
          "nickname": "grade_or_comment_on_submission_courses",
          "parameters": [
            {
              "paramType": "path",
              "name": "course_id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            },
            {
              "paramType": "path",
              "name": "assignment_id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            },
            {
              "paramType": "path",
              "name": "user_id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            },
            {
              "paramType": "form",
              "name": "comment[text_comment]",
              "description": "Add a textual comment to the submission.",
              "type": "string",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "comment[group_comment]",
              "description": "Whether or not this comment should be sent to the entire group (defaults\nto false). Ignored if this is not a group assignment or if no text_comment\nis provided.",
              "type": "boolean",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "comment[media_comment_id]",
              "description": "Add an audio/video comment to the submission. Media comments can be added\nvia this API, however, note that there is not yet an API to generate or\nlist existing media comments, so this functionality is currently of\nlimited use.",
              "type": "string",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "comment[media_comment_type]",
              "description": "The type of media comment being added.",
              "type": "string",
              "format": null,
              "required": false,
              "enum": [
                "audio",
                "video"
              ]
            },
            {
              "paramType": "form",
              "name": "comment[file_ids]",
              "description": "Attach files to this comment that were previously uploaded using the\nSubmission Comment API's files action",
              "type": "array",
              "format": "int64",
              "required": false,
              "items": {
                "type": "integer"
              }
            },
            {
              "paramType": "form",
              "name": "include[visibility]",
              "description": "Whether this assignment is visible to the owner of the submission",
              "type": "string",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "submission[posted_grade]",
              "description": "Assign a score to the submission, updating both the \"score\" and \"grade\"\nfields on the submission record. This parameter can be passed in a few\ndifferent formats:\n\npoints:: A floating point or integral value, such as \"13.5\". The grade\n  will be interpreted directly as the score of the assignment.\n  Values above assignment.points_possible are allowed, for awarding\n  extra credit.\npercentage:: A floating point value appended with a percent sign, such as\n   \"40%\". The grade will be interpreted as a percentage score on the\n   assignment, where 100% == assignment.points_possible. Values above 100%\n   are allowed, for awarding extra credit.\nletter grade:: A letter grade, following the assignment's defined letter\n   grading scheme. For example, \"A-\". The resulting score will be the high\n   end of the defined range for the letter grade. For instance, if \"B\" is\n   defined as 86% to 84%, a letter grade of \"B\" will be worth 86%. The\n   letter grade will be rejected if the assignment does not have a defined\n   letter grading scheme. For more fine-grained control of scores, pass in\n   points or percentage rather than the letter grade.\n\"pass/complete/fail/incomplete\":: A string value of \"pass\" or \"complete\"\n   will give a score of 100%. \"fail\" or \"incomplete\" will give a score of\n   0.\n\nNote that assignments with grading_type of \"pass_fail\" can only be\nassigned a score of 0 or assignment.points_possible, nothing inbetween. If\na posted_grade in the \"points\" or \"percentage\" format is sent, the grade\nwill only be accepted if the grade equals one of those two values.",
              "type": "string",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "submission[excuse]",
              "description": "Sets the \"excused\" status of an assignment.",
              "type": "boolean",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "rubric_assessment",
              "description": "Assign a rubric assessment to this assignment submission. The\nsub-parameters here depend on the rubric for the assignment. The general\nformat is, for each row in the rubric:\n\nThe points awarded for this row.\n  rubric_assessment[criterion_id][points]\n\nComments to add for this row.\n  rubric_assessment[criterion_id][comments]\n\nFor example, if the assignment rubric is (in JSON format):\n  !!!javascript\n  [\n    {\n      'id': 'crit1',\n      'points': 10,\n      'description': 'Criterion 1',\n      'ratings':\n      [\n        { 'description': 'Good', 'points': 10 },\n        { 'description': 'Poor', 'points': 3 }\n      ]\n    },\n    {\n      'id': 'crit2',\n      'points': 5,\n      'description': 'Criterion 2',\n      'ratings':\n      [\n        { 'description': 'Complete', 'points': 5 },\n        { 'description': 'Incomplete', 'points': 0 }\n      ]\n    }\n  ]\n\nThen a possible set of values for rubric_assessment would be:\n    rubric_assessment[crit1][points]=3&rubric_assessment[crit2][points]=5&rubric_assessment[crit2][comments]=Well%20Done.",
              "type": "RubricAssessment",
              "format": null,
              "required": false
            }
          ],
          "type": "void"
        }
      ]
    },
    {
      "path": "/v1/sections/{section_id}/assignments/{assignment_id}/submissions/{user_id}",
      "description": "Comment on and/or update the grading for a student's assignment submission.\nIf any submission or rubric_assessment arguments are provided, the user\nmust have permission to manage grades in the appropriate context (course or\nsection).",
      "operations": [
        {
          "method": "PUT",
          "summary": "Grade or comment on a submission",
          "notes": "Comment on and/or update the grading for a student's assignment submission.\nIf any submission or rubric_assessment arguments are provided, the user\nmust have permission to manage grades in the appropriate context (course or\nsection).",
          "nickname": "grade_or_comment_on_submission_sections",
          "parameters": [
            {
              "paramType": "path",
              "name": "section_id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            },
            {
              "paramType": "path",
              "name": "assignment_id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            },
            {
              "paramType": "path",
              "name": "user_id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            },
            {
              "paramType": "form",
              "name": "comment[text_comment]",
              "description": "Add a textual comment to the submission.",
              "type": "string",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "comment[group_comment]",
              "description": "Whether or not this comment should be sent to the entire group (defaults\nto false). Ignored if this is not a group assignment or if no text_comment\nis provided.",
              "type": "boolean",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "comment[media_comment_id]",
              "description": "Add an audio/video comment to the submission. Media comments can be added\nvia this API, however, note that there is not yet an API to generate or\nlist existing media comments, so this functionality is currently of\nlimited use.",
              "type": "string",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "comment[media_comment_type]",
              "description": "The type of media comment being added.",
              "type": "string",
              "format": null,
              "required": false,
              "enum": [
                "audio",
                "video"
              ]
            },
            {
              "paramType": "form",
              "name": "comment[file_ids]",
              "description": "Attach files to this comment that were previously uploaded using the\nSubmission Comment API's files action",
              "type": "array",
              "format": "int64",
              "required": false,
              "items": {
                "type": "integer"
              }
            },
            {
              "paramType": "form",
              "name": "include[visibility]",
              "description": "Whether this assignment is visible to the owner of the submission",
              "type": "string",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "submission[posted_grade]",
              "description": "Assign a score to the submission, updating both the \"score\" and \"grade\"\nfields on the submission record. This parameter can be passed in a few\ndifferent formats:\n\npoints:: A floating point or integral value, such as \"13.5\". The grade\n  will be interpreted directly as the score of the assignment.\n  Values above assignment.points_possible are allowed, for awarding\n  extra credit.\npercentage:: A floating point value appended with a percent sign, such as\n   \"40%\". The grade will be interpreted as a percentage score on the\n   assignment, where 100% == assignment.points_possible. Values above 100%\n   are allowed, for awarding extra credit.\nletter grade:: A letter grade, following the assignment's defined letter\n   grading scheme. For example, \"A-\". The resulting score will be the high\n   end of the defined range for the letter grade. For instance, if \"B\" is\n   defined as 86% to 84%, a letter grade of \"B\" will be worth 86%. The\n   letter grade will be rejected if the assignment does not have a defined\n   letter grading scheme. For more fine-grained control of scores, pass in\n   points or percentage rather than the letter grade.\n\"pass/complete/fail/incomplete\":: A string value of \"pass\" or \"complete\"\n   will give a score of 100%. \"fail\" or \"incomplete\" will give a score of\n   0.\n\nNote that assignments with grading_type of \"pass_fail\" can only be\nassigned a score of 0 or assignment.points_possible, nothing inbetween. If\na posted_grade in the \"points\" or \"percentage\" format is sent, the grade\nwill only be accepted if the grade equals one of those two values.",
              "type": "string",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "submission[excuse]",
              "description": "Sets the \"excused\" status of an assignment.",
              "type": "boolean",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "rubric_assessment",
              "description": "Assign a rubric assessment to this assignment submission. The\nsub-parameters here depend on the rubric for the assignment. The general\nformat is, for each row in the rubric:\n\nThe points awarded for this row.\n  rubric_assessment[criterion_id][points]\n\nComments to add for this row.\n  rubric_assessment[criterion_id][comments]\n\nFor example, if the assignment rubric is (in JSON format):\n  !!!javascript\n  [\n    {\n      'id': 'crit1',\n      'points': 10,\n      'description': 'Criterion 1',\n      'ratings':\n      [\n        { 'description': 'Good', 'points': 10 },\n        { 'description': 'Poor', 'points': 3 }\n      ]\n    },\n    {\n      'id': 'crit2',\n      'points': 5,\n      'description': 'Criterion 2',\n      'ratings':\n      [\n        { 'description': 'Complete', 'points': 5 },\n        { 'description': 'Incomplete', 'points': 0 }\n      ]\n    }\n  ]\n\nThen a possible set of values for rubric_assessment would be:\n    rubric_assessment[crit1][points]=3&rubric_assessment[crit2][points]=5&rubric_assessment[crit2][comments]=Well%20Done.",
              "type": "RubricAssessment",
              "format": null,
              "required": false
            }
          ],
          "type": "void"
        }
      ]
    },
    {
      "path": "/v1/courses/{course_id}/assignments/{assignment_id}/gradeable_students",
      "description": "List students eligible to submit the assignment. The caller must have permission to view grades.\n\nSection-limited instructors will only see students in their own sections.\n\nreturns [UserDisplay]",
      "operations": [
        {
          "method": "GET",
          "summary": "List gradeable students",
          "notes": "List students eligible to submit the assignment. The caller must have permission to view grades.\n\nSection-limited instructors will only see students in their own sections.\n\nreturns [UserDisplay]",
          "nickname": "list_gradeable_students",
          "parameters": [
            {
              "paramType": "path",
              "name": "course_id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            },
            {
              "paramType": "path",
              "name": "assignment_id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            }
          ],
          "type": "void"
        }
      ]
    },
    {
      "path": "/v1/courses/{course_id}/submissions/update_grades",
      "description": "Update the grading and comments on multiple student's assignment\nsubmissions in an asynchronous job.\n\nThe user must have permission to manage grades in the appropriate context\n(course or section).",
      "operations": [
        {
          "method": "POST",
          "summary": "Grade or comment on multiple submissions",
          "notes": "Update the grading and comments on multiple student's assignment\nsubmissions in an asynchronous job.\n\nThe user must have permission to manage grades in the appropriate context\n(course or section).",
          "nickname": "grade_or_comment_on_multiple_submissions_courses_submissions",
          "parameters": [
            {
              "paramType": "path",
              "name": "course_id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            },
            {
              "paramType": "form",
              "name": "grade_data[<student_id>][posted_grade]",
              "description": "See documentation for the posted_grade argument in the\n{api:SubmissionsApiController#update Submissions Update} documentation",
              "type": "string",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "grade_data[<student_id>][rubric_assessment]",
              "description": "See documentation for the rubric_assessment argument in the\n{api:SubmissionsApiController#update Submissions Update} documentation",
              "type": "RubricAssessment",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "grade_data[<student_id>][text_comment]",
              "description": "no description",
              "type": "string",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "grade_data[<student_id>][group_comment]",
              "description": "no description",
              "type": "boolean",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "grade_data[<student_id>][media_comment_id]",
              "description": "no description",
              "type": "string",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "grade_data[<student_id>][media_comment_type]",
              "description": "no description",
              "type": "string",
              "format": null,
              "required": false,
              "enum": [
                "audio",
                "video"
              ]
            },
            {
              "paramType": "form",
              "name": "grade_data[<student_id>][file_ids]",
              "description": "See documentation for the comment[] arguments in the\n{api:SubmissionsApiController#update Submissions Update} documentation",
              "type": "array",
              "format": "int64",
              "required": false,
              "items": {
                "type": "integer"
              }
            }
          ],
          "type": "Progress"
        }
      ]
    },
    {
      "path": "/v1/courses/{course_id}/assignments/{assignment_id}/submissions/update_grades",
      "description": "Update the grading and comments on multiple student's assignment\nsubmissions in an asynchronous job.\n\nThe user must have permission to manage grades in the appropriate context\n(course or section).",
      "operations": [
        {
          "method": "POST",
          "summary": "Grade or comment on multiple submissions",
          "notes": "Update the grading and comments on multiple student's assignment\nsubmissions in an asynchronous job.\n\nThe user must have permission to manage grades in the appropriate context\n(course or section).",
          "nickname": "grade_or_comment_on_multiple_submissions_courses_assignments",
          "parameters": [
            {
              "paramType": "path",
              "name": "course_id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            },
            {
              "paramType": "path",
              "name": "assignment_id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            },
            {
              "paramType": "form",
              "name": "grade_data[<student_id>][posted_grade]",
              "description": "See documentation for the posted_grade argument in the\n{api:SubmissionsApiController#update Submissions Update} documentation",
              "type": "string",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "grade_data[<student_id>][rubric_assessment]",
              "description": "See documentation for the rubric_assessment argument in the\n{api:SubmissionsApiController#update Submissions Update} documentation",
              "type": "RubricAssessment",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "grade_data[<student_id>][text_comment]",
              "description": "no description",
              "type": "string",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "grade_data[<student_id>][group_comment]",
              "description": "no description",
              "type": "boolean",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "grade_data[<student_id>][media_comment_id]",
              "description": "no description",
              "type": "string",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "grade_data[<student_id>][media_comment_type]",
              "description": "no description",
              "type": "string",
              "format": null,
              "required": false,
              "enum": [
                "audio",
                "video"
              ]
            },
            {
              "paramType": "form",
              "name": "grade_data[<student_id>][file_ids]",
              "description": "See documentation for the comment[] arguments in the\n{api:SubmissionsApiController#update Submissions Update} documentation",
              "type": "array",
              "format": "int64",
              "required": false,
              "items": {
                "type": "integer"
              }
            }
          ],
          "type": "Progress"
        }
      ]
    },
    {
      "path": "/v1/sections/{section_id}/submissions/update_grades",
      "description": "Update the grading and comments on multiple student's assignment\nsubmissions in an asynchronous job.\n\nThe user must have permission to manage grades in the appropriate context\n(course or section).",
      "operations": [
        {
          "method": "POST",
          "summary": "Grade or comment on multiple submissions",
          "notes": "Update the grading and comments on multiple student's assignment\nsubmissions in an asynchronous job.\n\nThe user must have permission to manage grades in the appropriate context\n(course or section).",
          "nickname": "grade_or_comment_on_multiple_submissions_sections_submissions",
          "parameters": [
            {
              "paramType": "path",
              "name": "section_id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            },
            {
              "paramType": "form",
              "name": "grade_data[<student_id>][posted_grade]",
              "description": "See documentation for the posted_grade argument in the\n{api:SubmissionsApiController#update Submissions Update} documentation",
              "type": "string",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "grade_data[<student_id>][rubric_assessment]",
              "description": "See documentation for the rubric_assessment argument in the\n{api:SubmissionsApiController#update Submissions Update} documentation",
              "type": "RubricAssessment",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "grade_data[<student_id>][text_comment]",
              "description": "no description",
              "type": "string",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "grade_data[<student_id>][group_comment]",
              "description": "no description",
              "type": "boolean",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "grade_data[<student_id>][media_comment_id]",
              "description": "no description",
              "type": "string",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "grade_data[<student_id>][media_comment_type]",
              "description": "no description",
              "type": "string",
              "format": null,
              "required": false,
              "enum": [
                "audio",
                "video"
              ]
            },
            {
              "paramType": "form",
              "name": "grade_data[<student_id>][file_ids]",
              "description": "See documentation for the comment[] arguments in the\n{api:SubmissionsApiController#update Submissions Update} documentation",
              "type": "array",
              "format": "int64",
              "required": false,
              "items": {
                "type": "integer"
              }
            }
          ],
          "type": "Progress"
        }
      ]
    },
    {
      "path": "/v1/sections/{section_id}/assignments/{assignment_id}/submissions/update_grades",
      "description": "Update the grading and comments on multiple student's assignment\nsubmissions in an asynchronous job.\n\nThe user must have permission to manage grades in the appropriate context\n(course or section).",
      "operations": [
        {
          "method": "POST",
          "summary": "Grade or comment on multiple submissions",
          "notes": "Update the grading and comments on multiple student's assignment\nsubmissions in an asynchronous job.\n\nThe user must have permission to manage grades in the appropriate context\n(course or section).",
          "nickname": "grade_or_comment_on_multiple_submissions_sections_assignments",
          "parameters": [
            {
              "paramType": "path",
              "name": "section_id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            },
            {
              "paramType": "path",
              "name": "assignment_id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            },
            {
              "paramType": "form",
              "name": "grade_data[<student_id>][posted_grade]",
              "description": "See documentation for the posted_grade argument in the\n{api:SubmissionsApiController#update Submissions Update} documentation",
              "type": "string",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "grade_data[<student_id>][rubric_assessment]",
              "description": "See documentation for the rubric_assessment argument in the\n{api:SubmissionsApiController#update Submissions Update} documentation",
              "type": "RubricAssessment",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "grade_data[<student_id>][text_comment]",
              "description": "no description",
              "type": "string",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "grade_data[<student_id>][group_comment]",
              "description": "no description",
              "type": "boolean",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "grade_data[<student_id>][media_comment_id]",
              "description": "no description",
              "type": "string",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "grade_data[<student_id>][media_comment_type]",
              "description": "no description",
              "type": "string",
              "format": null,
              "required": false,
              "enum": [
                "audio",
                "video"
              ]
            },
            {
              "paramType": "form",
              "name": "grade_data[<student_id>][file_ids]",
              "description": "See documentation for the comment[] arguments in the\n{api:SubmissionsApiController#update Submissions Update} documentation",
              "type": "array",
              "format": "int64",
              "required": false,
              "items": {
                "type": "integer"
              }
            }
          ],
          "type": "Progress"
        }
      ]
    },
    {
      "path": "/v1/courses/{course_id}/assignments/{assignment_id}/submissions/{user_id}/read",
      "description": "No request fields are necessary.\n\nOn success, the response will be 204 No Content with an empty body.",
      "operations": [
        {
          "method": "PUT",
          "summary": "Mark submission as read",
          "notes": "No request fields are necessary.\n\nOn success, the response will be 204 No Content with an empty body.",
          "nickname": "mark_submission_as_read_courses",
          "parameters": [
            {
              "paramType": "path",
              "name": "course_id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            },
            {
              "paramType": "path",
              "name": "assignment_id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            },
            {
              "paramType": "path",
              "name": "user_id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            }
          ],
          "type": "void"
        }
      ]
    },
    {
      "path": "/v1/sections/{section_id}/assignments/{assignment_id}/submissions/{user_id}/read",
      "description": "No request fields are necessary.\n\nOn success, the response will be 204 No Content with an empty body.",
      "operations": [
        {
          "method": "PUT",
          "summary": "Mark submission as read",
          "notes": "No request fields are necessary.\n\nOn success, the response will be 204 No Content with an empty body.",
          "nickname": "mark_submission_as_read_sections",
          "parameters": [
            {
              "paramType": "path",
              "name": "section_id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            },
            {
              "paramType": "path",
              "name": "assignment_id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            },
            {
              "paramType": "path",
              "name": "user_id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            }
          ],
          "type": "void"
        }
      ]
    },
    {
      "path": "/v1/courses/{course_id}/assignments/{assignment_id}/submissions/{user_id}/read",
      "description": "No request fields are necessary.\n\nOn success, the response will be 204 No Content with an empty body.",
      "operations": [
        {
          "method": "DELETE",
          "summary": "Mark submission as unread",
          "notes": "No request fields are necessary.\n\nOn success, the response will be 204 No Content with an empty body.",
          "nickname": "mark_submission_as_unread_courses",
          "parameters": [
            {
              "paramType": "path",
              "name": "course_id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            },
            {
              "paramType": "path",
              "name": "assignment_id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            },
            {
              "paramType": "path",
              "name": "user_id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            }
          ],
          "type": "void"
        }
      ]
    },
    {
      "path": "/v1/sections/{section_id}/assignments/{assignment_id}/submissions/{user_id}/read",
      "description": "No request fields are necessary.\n\nOn success, the response will be 204 No Content with an empty body.",
      "operations": [
        {
          "method": "DELETE",
          "summary": "Mark submission as unread",
          "notes": "No request fields are necessary.\n\nOn success, the response will be 204 No Content with an empty body.",
          "nickname": "mark_submission_as_unread_sections",
          "parameters": [
            {
              "paramType": "path",
              "name": "section_id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            },
            {
              "paramType": "path",
              "name": "assignment_id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            },
            {
              "paramType": "path",
              "name": "user_id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            }
          ],
          "type": "void"
        }
      ]
    }
  ],
  "models": {
    "MediaComment": {
      "id": "MediaComment",
      "description": "",
      "required": [

      ],
      "properties": {
        "content-type": {
          "example": "audio/mp4",
          "type": "string"
        },
        "display_name": {
          "example": "something",
          "type": "string"
        },
        "media_id": {
          "example": "3232",
          "type": "string"
        },
        "media_type": {
          "example": "audio",
          "type": "string"
        },
        "url": {
          "example": "http://example.com/media_url",
          "type": "string"
        }
      }
    },
    "SubmissionComment": {
      "id": "SubmissionComment",
      "description": "",
      "required": [

      ],
      "properties": {
        "id": {
          "example": 37,
          "type": "integer"
        },
        "author_id": {
          "example": 134,
          "type": "integer"
        },
        "author_name": {
          "example": "Toph Beifong",
          "type": "string"
        },
        "author": {
          "description": "Abbreviated user object UserDisplay (see users API).",
          "example": "{}",
          "type": "string"
        },
        "comment": {
          "example": "Well here's the thing...",
          "type": "string"
        },
        "created_at": {
          "example": "2012-01-01T01:00:00Z",
          "type": "datetime"
        },
        "media_comment": {
          "$ref": "MediaComment"
        }
      }
    },
    "Submission": {
      "id": "Submission",
      "description": "",
      "required": [

      ],
      "properties": {
        "assignment_id": {
          "description": "The submission's assignment id",
          "example": 23,
          "type": "integer"
        },
        "assignment": {
          "description": "The submission's assignment (see the assignments API) (optional)",
          "example": "Assignment",
          "type": "string"
        },
        "course": {
          "description": "The submission's course (see the course API) (optional)",
          "example": "Course",
          "type": "string"
        },
        "attempt": {
          "description": "This is the submission attempt number.",
          "example": 1,
          "type": "integer"
        },
        "body": {
          "description": "The content of the submission, if it was submitted directly in a text field.",
          "example": "There are three factors too...",
          "type": "string"
        },
        "grade": {
          "description": "The grade for the submission, translated into the assignment grading scheme (so a letter grade, for example).",
          "example": "A-",
          "type": "string"
        },
        "grade_matches_current_submission": {
          "description": "A boolean flag which is false if the student has re-submitted since the submission was last graded.",
          "example": true,
          "type": "boolean"
        },
        "html_url": {
          "description": "URL to the submission. This will require the user to log in.",
          "example": "http://example.com/courses/255/assignments/543/submissions/134",
          "type": "string"
        },
        "preview_url": {
          "description": "URL to the submission preview. This will require the user to log in.",
          "example": "http://example.com/courses/255/assignments/543/submissions/134?preview=1",
          "type": "string"
        },
        "score": {
          "description": "The raw score",
          "example": 13.5,
          "type": "number"
        },
        "submission_comments": {
          "description": "Associated comments for a submission (optional)",
          "type": "array",
          "items": {
            "$ref": "SubmissionComment"
          }
        },
        "submission_type": {
          "description": "The types of submission ex: ('online_text_entry'|'online_url'|'online_upload'|'media_recording')",
          "example": "online_text_entry",
          "type": "string",
          "allowableValues": {
            "values": [
              "online_text_entry",
              "online_url",
              "online_upload",
              "media_recording"
            ]
          }
        },
        "submitted_at": {
          "description": "The timestamp when the assignment was submitted",
          "example": "2012-01-01T01:00:00Z",
          "type": "datetime"
        },
        "url": {
          "description": "The URL of the submission (for 'online_url' submissions).",
          "type": "string"
        },
        "user_id": {
          "description": "The id of the user who created the submission",
          "example": 134,
          "type": "integer"
        },
        "grader_id": {
          "description": "The id of the user who graded the submission",
          "example": 86,
          "type": "integer"
        },
        "user": {
          "description": "The submissions user (see user API) (optional)",
          "example": "User",
          "type": "string"
        },
        "late": {
          "description": "Whether the submission was made after the applicable due date",
          "example": false,
          "type": "boolean"
        },
        "assignment_visible": {
          "description": "Whether the assignment is visible to the user who submitted the assignment. Submissions where `assignment_visible` is false no longer count towards the student's grade and the assignment can no longer be accessed by the student. `assignment_visible` becomes false for submissions that do not have a grade and whose assignment is no longer assigned to the student's section.",
          "example": true,
          "type": "boolean"
        },
        "excused": {
          "description": "Whether the assignment is excused.  Excused assignments have no impact on a user's grade.",
          "example": true,
          "type": "boolean"
        }
      }
    }
  }
}
