{
  "apiVersion": "1.0",
  "swaggerVersion": "1.2",
  "basePath": "https://canvas.instructure.com/api",
  "resourcePath": "/enrollments",
  "produces": [
    "application/json"
  ],
  "apis": [
    {
      "path": "/v1/courses/{course_id}/enrollments",
      "description": "Depending on the URL given, return either (1) all of the enrollments in\na course, (2) all of the enrollments in a section or (3) all of a user's\nenrollments. This includes student, teacher, TA, and observer enrollments.\n\nIf a user has multiple enrollments in a context (e.g. as a teacher\nand a student or in multiple course sections), each enrollment will be\nlisted separately.\n\nnote: Currently, only an admin user can return other users' enrollments. A\nuser can, however, return his/her own enrollments.",
      "operations": [
        {
          "method": "GET",
          "summary": "List enrollments",
          "notes": "Depending on the URL given, return either (1) all of the enrollments in\na course, (2) all of the enrollments in a section or (3) all of a user's\nenrollments. This includes student, teacher, TA, and observer enrollments.\n\nIf a user has multiple enrollments in a context (e.g. as a teacher\nand a student or in multiple course sections), each enrollment will be\nlisted separately.\n\nnote: Currently, only an admin user can return other users' enrollments. A\nuser can, however, return his/her own enrollments.",
          "nickname": "list_enrollments_courses",
          "parameters": [
            {
              "paramType": "path",
              "name": "course_id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            },
            {
              "paramType": "query",
              "name": "type",
              "description": "A list of enrollment types to return. Accepted values are 'StudentEnrollment', 'TeacherEnrollment', 'TaEnrollment', 'DesignerEnrollment', and 'ObserverEnrollment.' If omitted, all enrollment types are returned. This argument is ignored if `role` is given.",
              "type": "array",
              "format": null,
              "required": false,
              "items": {
                "type": "string"
              }
            },
            {
              "paramType": "query",
              "name": "role",
              "description": "A list of enrollment roles to return. Accepted values include course-level roles created by the {api:RoleOverridesController#add_role Add Role API} as well as the base enrollment types accepted by the `type` argument above.",
              "type": "array",
              "format": null,
              "required": false,
              "items": {
                "type": "string"
              }
            },
            {
              "paramType": "query",
              "name": "state",
              "description": "Filter by enrollment state. If omitted, 'active' and 'invited' enrollments are returned. When querying a user's enrollments (either via user_id argument or via user enrollments endpoint), the following additional synthetic states are supported: \"current_and_invited\"|\"current_and_future\"|\"current_and_concluded\"",
              "type": "array",
              "format": null,
              "required": false,
              "enum": [
                "active",
                "invited",
                "creation_pending",
                "deleted",
                "rejected",
                "completed",
                "inactive"
              ],
              "items": {
                "type": "string"
              }
            },
            {
              "paramType": "query",
              "name": "user_id",
              "description": "Filter by user_id (only valid for course or section enrollment queries). If set to the current user's id, this is a way to determine if the user has any enrollments in the course or section, independent of whether the user has permission to view other people on the roster.",
              "type": "string",
              "format": null,
              "required": false
            }
          ],
          "type": "array",
          "items": {
            "$ref": "Enrollment"
          }
        }
      ]
    },
    {
      "path": "/v1/sections/{section_id}/enrollments",
      "description": "Depending on the URL given, return either (1) all of the enrollments in\na course, (2) all of the enrollments in a section or (3) all of a user's\nenrollments. This includes student, teacher, TA, and observer enrollments.\n\nIf a user has multiple enrollments in a context (e.g. as a teacher\nand a student or in multiple course sections), each enrollment will be\nlisted separately.\n\nnote: Currently, only an admin user can return other users' enrollments. A\nuser can, however, return his/her own enrollments.",
      "operations": [
        {
          "method": "GET",
          "summary": "List enrollments",
          "notes": "Depending on the URL given, return either (1) all of the enrollments in\na course, (2) all of the enrollments in a section or (3) all of a user's\nenrollments. This includes student, teacher, TA, and observer enrollments.\n\nIf a user has multiple enrollments in a context (e.g. as a teacher\nand a student or in multiple course sections), each enrollment will be\nlisted separately.\n\nnote: Currently, only an admin user can return other users' enrollments. A\nuser can, however, return his/her own enrollments.",
          "nickname": "list_enrollments_sections",
          "parameters": [
            {
              "paramType": "path",
              "name": "section_id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            },
            {
              "paramType": "query",
              "name": "type",
              "description": "A list of enrollment types to return. Accepted values are 'StudentEnrollment', 'TeacherEnrollment', 'TaEnrollment', 'DesignerEnrollment', and 'ObserverEnrollment.' If omitted, all enrollment types are returned. This argument is ignored if `role` is given.",
              "type": "array",
              "format": null,
              "required": false,
              "items": {
                "type": "string"
              }
            },
            {
              "paramType": "query",
              "name": "role",
              "description": "A list of enrollment roles to return. Accepted values include course-level roles created by the {api:RoleOverridesController#add_role Add Role API} as well as the base enrollment types accepted by the `type` argument above.",
              "type": "array",
              "format": null,
              "required": false,
              "items": {
                "type": "string"
              }
            },
            {
              "paramType": "query",
              "name": "state",
              "description": "Filter by enrollment state. If omitted, 'active' and 'invited' enrollments are returned. When querying a user's enrollments (either via user_id argument or via user enrollments endpoint), the following additional synthetic states are supported: \"current_and_invited\"|\"current_and_future\"|\"current_and_concluded\"",
              "type": "array",
              "format": null,
              "required": false,
              "enum": [
                "active",
                "invited",
                "creation_pending",
                "deleted",
                "rejected",
                "completed",
                "inactive"
              ],
              "items": {
                "type": "string"
              }
            },
            {
              "paramType": "query",
              "name": "user_id",
              "description": "Filter by user_id (only valid for course or section enrollment queries). If set to the current user's id, this is a way to determine if the user has any enrollments in the course or section, independent of whether the user has permission to view other people on the roster.",
              "type": "string",
              "format": null,
              "required": false
            }
          ],
          "type": "array",
          "items": {
            "$ref": "Enrollment"
          }
        }
      ]
    },
    {
      "path": "/v1/users/{user_id}/enrollments",
      "description": "Depending on the URL given, return either (1) all of the enrollments in\na course, (2) all of the enrollments in a section or (3) all of a user's\nenrollments. This includes student, teacher, TA, and observer enrollments.\n\nIf a user has multiple enrollments in a context (e.g. as a teacher\nand a student or in multiple course sections), each enrollment will be\nlisted separately.\n\nnote: Currently, only an admin user can return other users' enrollments. A\nuser can, however, return his/her own enrollments.",
      "operations": [
        {
          "method": "GET",
          "summary": "List enrollments",
          "notes": "Depending on the URL given, return either (1) all of the enrollments in\na course, (2) all of the enrollments in a section or (3) all of a user's\nenrollments. This includes student, teacher, TA, and observer enrollments.\n\nIf a user has multiple enrollments in a context (e.g. as a teacher\nand a student or in multiple course sections), each enrollment will be\nlisted separately.\n\nnote: Currently, only an admin user can return other users' enrollments. A\nuser can, however, return his/her own enrollments.",
          "nickname": "list_enrollments_users",
          "parameters": [
            {
              "paramType": "query",
              "name": "type",
              "description": "A list of enrollment types to return. Accepted values are 'StudentEnrollment', 'TeacherEnrollment', 'TaEnrollment', 'DesignerEnrollment', and 'ObserverEnrollment.' If omitted, all enrollment types are returned. This argument is ignored if `role` is given.",
              "type": "array",
              "format": null,
              "required": false,
              "items": {
                "type": "string"
              }
            },
            {
              "paramType": "query",
              "name": "role",
              "description": "A list of enrollment roles to return. Accepted values include course-level roles created by the {api:RoleOverridesController#add_role Add Role API} as well as the base enrollment types accepted by the `type` argument above.",
              "type": "array",
              "format": null,
              "required": false,
              "items": {
                "type": "string"
              }
            },
            {
              "paramType": "query",
              "name": "state",
              "description": "Filter by enrollment state. If omitted, 'active' and 'invited' enrollments are returned. When querying a user's enrollments (either via user_id argument or via user enrollments endpoint), the following additional synthetic states are supported: \"current_and_invited\"|\"current_and_future\"|\"current_and_concluded\"",
              "type": "array",
              "format": null,
              "required": false,
              "enum": [
                "active",
                "invited",
                "creation_pending",
                "deleted",
                "rejected",
                "completed",
                "inactive"
              ],
              "items": {
                "type": "string"
              }
            },
            {
              "paramType": "path",
              "name": "user_id",
              "description": "Filter by user_id (only valid for course or section enrollment queries). If set to the current user's id, this is a way to determine if the user has any enrollments in the course or section, independent of whether the user has permission to view other people on the roster.",
              "type": "string",
              "format": null,
              "required": true
            }
          ],
          "type": "array",
          "items": {
            "$ref": "Enrollment"
          }
        }
      ]
    },
    {
      "path": "/v1/accounts/{account_id}/enrollments/{id}",
      "description": "Get an Enrollment object by Enrollment ID",
      "operations": [
        {
          "method": "GET",
          "summary": "Enrollment by ID",
          "notes": "Get an Enrollment object by Enrollment ID",
          "nickname": "enrollment_by_id",
          "parameters": [
            {
              "paramType": "path",
              "name": "account_id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            },
            {
              "paramType": "path",
              "name": "id",
              "description": "The ID of the enrollment object",
              "type": "integer",
              "format": "int64",
              "required": true
            }
          ],
          "type": "Enrollment"
        }
      ]
    },
    {
      "path": "/v1/courses/{course_id}/enrollments",
      "description": "Create a new user enrollment for a course or section.",
      "operations": [
        {
          "method": "POST",
          "summary": "Enroll a user",
          "notes": "Create a new user enrollment for a course or section.",
          "nickname": "enroll_user_courses",
          "parameters": [
            {
              "paramType": "path",
              "name": "course_id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            },
            {
              "paramType": "form",
              "name": "enrollment[user_id]",
              "description": "The ID of the user to be enrolled in the course.",
              "type": "string",
              "format": null,
              "required": true
            },
            {
              "paramType": "form",
              "name": "enrollment[type]",
              "description": "Enroll the user as a student, teacher, TA, observer, or designer. If no value is given, the type will be inferred by enrollment[role] if supplied, otherwise 'StudentEnrollment' will be used.",
              "type": "string",
              "format": null,
              "required": true,
              "enum": [
                "StudentEnrollment",
                "TeacherEnrollment",
                "TaEnrollment",
                "ObserverEnrollment",
                "DesignerEnrollment"
              ]
            },
            {
              "paramType": "form",
              "name": "enrollment[role]",
              "description": "Assigns a custom course-level role to the user.",
              "type": "deprecated",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "enrollment[role_id]",
              "description": "Assigns a custom course-level role to the user.",
              "type": "integer",
              "format": "int64",
              "required": false
            },
            {
              "paramType": "form",
              "name": "enrollment[enrollment_state]",
              "description": "If set to 'active,' student will be immediately enrolled in the course. Otherwise they will be required to accept a course invitation. Default is 'invited.'",
              "type": "string",
              "format": null,
              "required": false,
              "enum": [
                "active",
                "invited"
              ]
            },
            {
              "paramType": "form",
              "name": "enrollment[course_section_id]",
              "description": "The ID of the course section to enroll the student in. If the section-specific URL is used, this argument is redundant and will be ignored.",
              "type": "integer",
              "format": "int64",
              "required": false
            },
            {
              "paramType": "form",
              "name": "enrollment[limit_privileges_to_course_section]",
              "description": "If a teacher or TA enrollment, teacher/TA will be restricted to the section given by course_section_id.",
              "type": "boolean",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "enrollment[notify]",
              "description": "If true, a notification will be sent to the enrolled user. Notifications are not sent by default.",
              "type": "boolean",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "enrollment[self_enrollment_code]",
              "description": "If the current user is not allowed to manage enrollments in this course, but the course allows self-enrollment, the user can self- enroll as a student in the default section by passing in a valid code. When self-enrolling, the user_id must be 'self'. The enrollment_state will be set to 'active' and all other arguments will be ignored.",
              "type": "string",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "enrollment[self_enrolled]",
              "description": "If true, marks the enrollment as a self-enrollment, which gives students the ability to drop the course if desired. Defaults to false.",
              "type": "boolean",
              "format": null,
              "required": false
            }
          ],
          "type": "Enrollment"
        }
      ]
    },
    {
      "path": "/v1/sections/{section_id}/enrollments",
      "description": "Create a new user enrollment for a course or section.",
      "operations": [
        {
          "method": "POST",
          "summary": "Enroll a user",
          "notes": "Create a new user enrollment for a course or section.",
          "nickname": "enroll_user_sections",
          "parameters": [
            {
              "paramType": "path",
              "name": "section_id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            },
            {
              "paramType": "form",
              "name": "enrollment[user_id]",
              "description": "The ID of the user to be enrolled in the course.",
              "type": "string",
              "format": null,
              "required": true
            },
            {
              "paramType": "form",
              "name": "enrollment[type]",
              "description": "Enroll the user as a student, teacher, TA, observer, or designer. If no value is given, the type will be inferred by enrollment[role] if supplied, otherwise 'StudentEnrollment' will be used.",
              "type": "string",
              "format": null,
              "required": true,
              "enum": [
                "StudentEnrollment",
                "TeacherEnrollment",
                "TaEnrollment",
                "ObserverEnrollment",
                "DesignerEnrollment"
              ]
            },
            {
              "paramType": "form",
              "name": "enrollment[role]",
              "description": "Assigns a custom course-level role to the user.",
              "type": "deprecated",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "enrollment[role_id]",
              "description": "Assigns a custom course-level role to the user.",
              "type": "integer",
              "format": "int64",
              "required": false
            },
            {
              "paramType": "form",
              "name": "enrollment[enrollment_state]",
              "description": "If set to 'active,' student will be immediately enrolled in the course. Otherwise they will be required to accept a course invitation. Default is 'invited.'",
              "type": "string",
              "format": null,
              "required": false,
              "enum": [
                "active",
                "invited"
              ]
            },
            {
              "paramType": "form",
              "name": "enrollment[course_section_id]",
              "description": "The ID of the course section to enroll the student in. If the section-specific URL is used, this argument is redundant and will be ignored.",
              "type": "integer",
              "format": "int64",
              "required": false
            },
            {
              "paramType": "form",
              "name": "enrollment[limit_privileges_to_course_section]",
              "description": "If a teacher or TA enrollment, teacher/TA will be restricted to the section given by course_section_id.",
              "type": "boolean",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "enrollment[notify]",
              "description": "If true, a notification will be sent to the enrolled user. Notifications are not sent by default.",
              "type": "boolean",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "enrollment[self_enrollment_code]",
              "description": "If the current user is not allowed to manage enrollments in this course, but the course allows self-enrollment, the user can self- enroll as a student in the default section by passing in a valid code. When self-enrolling, the user_id must be 'self'. The enrollment_state will be set to 'active' and all other arguments will be ignored.",
              "type": "string",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "enrollment[self_enrolled]",
              "description": "If true, marks the enrollment as a self-enrollment, which gives students the ability to drop the course if desired. Defaults to false.",
              "type": "boolean",
              "format": null,
              "required": false
            }
          ],
          "type": "Enrollment"
        }
      ]
    },
    {
      "path": "/v1/courses/{course_id}/enrollments/{id}",
      "description": "Delete or conclude an enrollment.",
      "operations": [
        {
          "method": "DELETE",
          "summary": "Conclude an enrollment",
          "notes": "Delete or conclude an enrollment.",
          "nickname": "conclude_enrollment",
          "parameters": [
            {
              "paramType": "path",
              "name": "course_id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            },
            {
              "paramType": "path",
              "name": "id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            },
            {
              "paramType": "query",
              "name": "task",
              "description": "The action to take on the enrollment.",
              "type": "string",
              "format": null,
              "required": false,
              "enum": [
                "conclude",
                "delete"
              ]
            }
          ],
          "type": "Enrollment"
        }
      ]
    }
  ],
  "models": {
    "Grade": {
      "id": "Grade",
      "description": "",
      "required": [

      ],
      "properties": {
        "html_url": {
          "description": "The URL to the Canvas web UI page for the user's grades, if this is a student enrollment.",
          "example": "",
          "type": "string"
        },
        "current_grade": {
          "description": "The user's current grade in the class. Only included if user has permissions to view this grade.",
          "example": "",
          "type": "string"
        },
        "final_grade": {
          "description": "The user's final grade for the class. Only included if user has permissions to view this grade.",
          "example": "",
          "type": "string"
        },
        "current_score": {
          "description": "The user's current score in the class. Only included if user has permissions to view this score.",
          "example": "",
          "type": "string"
        },
        "final_score": {
          "description": "The user's final score for the class. Only included if user has permissions to view this score.",
          "example": "",
          "type": "string"
        }
      }
    },
    "Enrollment": {
      "id": "Enrollment",
      "description": "",
      "required": [

      ],
      "properties": {
        "id": {
          "description": "The ID of the enrollment.",
          "example": 1,
          "type": "integer"
        },
        "course_id": {
          "description": "The unique id of the course.",
          "example": 1,
          "type": "integer"
        },
        "sis_course_id": {
          "description": "The SIS Course ID in which the enrollment is associated. Only displayed if present. This field is only included if the user has permission to view SIS information.",
          "example": "SHEL93921",
          "type": "string"
        },
        "course_integration_id": {
          "description": "The Course Integration ID in which the enrollment is associated. This field is only included if the user has permission to view SIS information.",
          "example": "SHEL93921",
          "type": "string"
        },
        "course_section_id": {
          "description": "The unique id of the user's section.",
          "example": 1,
          "type": "integer"
        },
        "section_integration_id": {
          "description": "The Section Integration ID in which the enrollment is associated. This field is only included if the user has permission to view SIS information.",
          "example": "SHEL93921",
          "type": "string"
        },
        "sis_section_id": {
          "description": "The SIS Section ID in which the enrollment is associated. Only displayed if present. This field is only included if the user has permission to view SIS information.",
          "example": "SHEL93921",
          "type": "string"
        },
        "enrollment_state": {
          "description": "The state of the user's enrollment in the course.",
          "example": "active",
          "type": "string"
        },
        "limit_privileges_to_course_section": {
          "description": "User can only access his or her own course section.",
          "example": true,
          "type": "boolean"
        },
        "sis_import_id": {
          "description": "The unique identifier for the SIS import. This field is only included if the user has permission to manage SIS information.",
          "example": 83,
          "type": "integer"
        },
        "root_account_id": {
          "description": "The unique id of the user's account.",
          "example": 1,
          "type": "integer"
        },
        "type": {
          "description": "The enrollment type. One of 'StudentEnrollment', 'TeacherEnrollment', 'TaEnrollment', 'DesignerEnrollment', 'ObserverEnrollment'.",
          "example": "StudentEnrollment",
          "type": "string"
        },
        "user_id": {
          "description": "The unique id of the user.",
          "example": 1,
          "type": "integer"
        },
        "associated_user_id": {
          "description": "The unique id of the associated user. Will be null unless type is ObserverEnrollment.",
          "example": null,
          "type": "integer"
        },
        "role": {
          "description": "The enrollment role, for course-level permissions. This field will match `type` if the enrollment role has not been customized.",
          "example": "StudentEnrollment",
          "type": "string"
        },
        "updated_at": {
          "description": "The updated time of the enrollment, in ISO8601 format.",
          "example": "2012-04-18T23:08:51Z",
          "type": "datetime"
        },
        "start_at": {
          "description": "The start time of the enrollment, in ISO8601 format.",
          "example": "2012-04-18T23:08:51Z",
          "type": "datetime"
        },
        "end_at": {
          "description": "The end time of the enrollment, in ISO8601 format.",
          "example": "2012-04-18T23:08:51Z",
          "type": "datetime"
        },
        "last_activity_at": {
          "description": "The last activity time of the user for the enrollment, in ISO8601 format.",
          "example": "2012-04-18T23:08:51Z",
          "type": "datetime"
        },
        "total_activity_time": {
          "description": "The total activity time of the user for the enrollment, in seconds.",
          "example": 260,
          "type": "integer"
        },
        "html_url": {
          "description": "The URL to the Canvas web UI page for this course enrollment.",
          "example": "https://...",
          "type": "string"
        },
        "grades": {
          "description": "The URL to the Canvas web UI page the grades associated with this enrollment.",
          "$ref": "Grade"
        },
        "user": {
          "description": "A description of the user.",
          "type": "User"
        }
      }
    }
  }
}
