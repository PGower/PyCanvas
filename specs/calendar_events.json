{
  "apiVersion": "1.0",
  "swaggerVersion": "1.2",
  "basePath": "https://canvas.instructure.com/api",
  "resourcePath": "/calendar_events",
  "produces": [
    "application/json"
  ],
  "apis": [
    {
      "path": "/v1/calendar_events",
      "description": "Retrieve the list of calendar events or assignments for the current user",
      "operations": [
        {
          "method": "GET",
          "summary": "List calendar events",
          "notes": "Retrieve the list of calendar events or assignments for the current user",
          "nickname": "list_calendar_events",
          "parameters": [
            {
              "paramType": "query",
              "name": "type",
              "description": "Defaults to \"event\"",
              "type": "string",
              "format": null,
              "required": false,
              "enum": [
                "event",
                "assignment"
              ]
            },
            {
              "paramType": "query",
              "name": "start_date",
              "description": "Only return events since the start_date (inclusive). Defaults to today. The value should be formatted as: yyyy-mm-dd or ISO 8601 YYYY-MM-DDTHH:MM:SSZ.",
              "type": "date",
              "format": null,
              "required": false
            },
            {
              "paramType": "query",
              "name": "end_date",
              "description": "Only return events before the end_date (inclusive). Defaults to start_date. The value should be formatted as: yyyy-mm-dd or ISO 8601 YYYY-MM-DDTHH:MM:SSZ. If end_date is the same as start_date, then only events on that day are returned.",
              "type": "date",
              "format": null,
              "required": false
            },
            {
              "paramType": "query",
              "name": "undated",
              "description": "Defaults to false (dated events only). If true, only return undated events and ignore start_date and end_date.",
              "type": "boolean",
              "format": null,
              "required": false
            },
            {
              "paramType": "query",
              "name": "all_events",
              "description": "Defaults to false (uses start_date, end_date, and undated criteria). If true, all events are returned, ignoring start_date, end_date, and undated criteria.",
              "type": "boolean",
              "format": null,
              "required": false
            },
            {
              "paramType": "query",
              "name": "context_codes",
              "description": "List of context codes of courses/groups/users whose events you want to see. If not specified, defaults to the current user (i.e personal calendar, no course/group events). Limited to 10 context codes, additional ones are ignored. The format of this field is the context type, followed by an underscore, followed by the context id. For example: course_42",
              "type": "array",
              "format": null,
              "required": false,
              "items": {
                "type": "string"
              }
            }
          ],
          "type": "array",
          "items": {
            "$ref": "CalendarEvent"
          }
        }
      ]
    },
    {
      "path": "/v1/calendar_events",
      "description": "Create and return a new calendar event",
      "operations": [
        {
          "method": "POST",
          "summary": "Create a calendar event",
          "notes": "Create and return a new calendar event",
          "nickname": "create_calendar_event",
          "parameters": [
            {
              "paramType": "form",
              "name": "calendar_event[context_code]",
              "description": "Context code of the course/group/user whose calendar this event should be added to.",
              "type": "string",
              "format": null,
              "required": true
            },
            {
              "paramType": "form",
              "name": "calendar_event[title]",
              "description": "Short title for the calendar event.",
              "type": "string",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "calendar_event[description]",
              "description": "Longer HTML description of the event.",
              "type": "string",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "calendar_event[start_at]",
              "description": "Start date/time of the event.",
              "type": "datetime",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "calendar_event[end_at]",
              "description": "End date/time of the event.",
              "type": "datetime",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "calendar_event[location_name]",
              "description": "Location name of the event.",
              "type": "string",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "calendar_event[location_address]",
              "description": "Location address",
              "type": "string",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "calendar_event[time_zone_edited]",
              "description": "Time zone of the user editing the event. Allowed time zones are {http://www.iana.org/time-zones IANA time zones} or friendlier {http://api.rubyonrails.org/classes/ActiveSupport/TimeZone.html Ruby on Rails time zones}.",
              "type": "string",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "calendar_event[child_event_data][X][start_at]",
              "description": "Section-level start time(s) if this is a course event. X can be any identifier, provided that it is consistent across the start_at, end_at and context_code",
              "type": "datetime",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "calendar_event[child_event_data][X][end_at]",
              "description": "Section-level end time(s) if this is a course event.",
              "type": "datetime",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "calendar_event[child_event_data][X][context_code]",
              "description": "Context code(s) corresponding to the section-level start and end time(s).",
              "type": "string",
              "format": null,
              "required": false
            }
          ],
          "type": "void"
        }
      ]
    },
    {
      "path": "/v1/calendar_events/{id}",
      "description": "",
      "operations": [
        {
          "method": "GET",
          "summary": "Get a single calendar event or assignment",
          "notes": "",
          "nickname": "get_single_calendar_event_or_assignment",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            }
          ],
          "type": "CalendarEvent"
        }
      ]
    },
    {
      "path": "/v1/calendar_events/{id}/reservations",
      "description": "Reserves a particular time slot and return the new reservation",
      "operations": [
        {
          "method": "POST",
          "summary": "Reserve a time slot",
          "notes": "Reserves a particular time slot and return the new reservation",
          "nickname": "reserve_time_slot",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            },
            {
              "paramType": "form",
              "name": "participant_id",
              "description": "User or group id for whom you are making the reservation (depends on the participant type). Defaults to the current user (or user's candidate group).",
              "type": "string",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "cancel_existing",
              "description": "Defaults to false. If true, cancel any previous reservation(s) for this participant and appointment group.",
              "type": "boolean",
              "format": null,
              "required": false
            }
          ],
          "type": "void"
        }
      ]
    },
    {
      "path": "/v1/calendar_events/{id}/reservations/{participant_id}",
      "description": "Reserves a particular time slot and return the new reservation",
      "operations": [
        {
          "method": "POST",
          "summary": "Reserve a time slot",
          "notes": "Reserves a particular time slot and return the new reservation",
          "nickname": "reserve_time_slot_participant_id",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            },
            {
              "paramType": "path",
              "name": "participant_id",
              "description": "User or group id for whom you are making the reservation (depends on the participant type). Defaults to the current user (or user's candidate group).",
              "type": "string",
              "format": null,
              "required": true
            },
            {
              "paramType": "form",
              "name": "cancel_existing",
              "description": "Defaults to false. If true, cancel any previous reservation(s) for this participant and appointment group.",
              "type": "boolean",
              "format": null,
              "required": false
            }
          ],
          "type": "void"
        }
      ]
    },
    {
      "path": "/v1/calendar_events/{id}",
      "description": "Update and return a calendar event",
      "operations": [
        {
          "method": "PUT",
          "summary": "Update a calendar event",
          "notes": "Update and return a calendar event",
          "nickname": "update_calendar_event",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            },
            {
              "paramType": "form",
              "name": "calendar_event[context_code]",
              "description": "Context code of the course/group/user whose calendar this event should be added to.",
              "type": "string",
              "format": null,
              "required": true
            },
            {
              "paramType": "form",
              "name": "calendar_event[title]",
              "description": "Short title for the calendar event.",
              "type": "string",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "calendar_event[description]",
              "description": "Longer HTML description of the event.",
              "type": "string",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "calendar_event[start_at]",
              "description": "Start date/time of the event.",
              "type": "datetime",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "calendar_event[end_at]",
              "description": "End date/time of the event.",
              "type": "datetime",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "calendar_event[location_name]",
              "description": "Location name of the event.",
              "type": "string",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "calendar_event[location_address]",
              "description": "Location address",
              "type": "string",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "calendar_event[time_zone_edited]",
              "description": "Time zone of the user editing the event. Allowed time zones are {http://www.iana.org/time-zones IANA time zones} or friendlier {http://api.rubyonrails.org/classes/ActiveSupport/TimeZone.html Ruby on Rails time zones}.",
              "type": "string",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "calendar_event[child_event_data][X][start_at]",
              "description": "Section-level start time(s) if this is a course event. X can be any identifier, provided that it is consistent across the start_at, end_at and context_code",
              "type": "datetime",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "calendar_event[child_event_data][X][end_at]",
              "description": "Section-level end time(s) if this is a course event.",
              "type": "datetime",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "calendar_event[child_event_data][X][context_code]",
              "description": "Context code(s) corresponding to the section-level start and end time(s).",
              "type": "string",
              "format": null,
              "required": false
            }
          ],
          "type": "void"
        }
      ]
    },
    {
      "path": "/v1/calendar_events/{id}",
      "description": "Delete an event from the calendar and return the deleted event",
      "operations": [
        {
          "method": "DELETE",
          "summary": "Delete a calendar event",
          "notes": "Delete an event from the calendar and return the deleted event",
          "nickname": "delete_calendar_event",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            },
            {
              "paramType": "query",
              "name": "cancel_reason",
              "description": "Reason for deleting/canceling the event.",
              "type": "string",
              "format": null,
              "required": false
            }
          ],
          "type": "void"
        }
      ]
    }
  ],
  "models": {
    "CalendarEvent": {
      "id": "CalendarEvent",
      "description": "",
      "required": [

      ],
      "properties": {
        "id": {
          "description": "The ID of the calendar event",
          "example": 234,
          "type": "integer"
        },
        "title": {
          "description": "The title of the calendar event",
          "example": "Paintball Fight!",
          "type": "string"
        },
        "start_at": {
          "description": "The start timestamp of the event",
          "example": "2012-07-19T15:00:00-06:00",
          "type": "datetime"
        },
        "end_at": {
          "description": "The end timestamp of the event",
          "example": "2012-07-19T16:00:00-06:00",
          "type": "datetime"
        },
        "description": {
          "description": "The HTML description of the event",
          "example": "<b>It's that time again!</b>",
          "type": "string"
        },
        "location_name": {
          "description": "The location name of the event",
          "example": "Greendale Community College",
          "type": "string"
        },
        "location_address": {
          "description": "The address where the event is taking place",
          "example": "Greendale, Colorado",
          "type": "string"
        },
        "context_code": {
          "description": "the context code of the calendar this event belongs to (course, user or group)",
          "example": "course_123",
          "type": "string"
        },
        "effective_context_code": {
          "description": "if specified, it indicates which calendar this event should be displayed on. for example, a section-level event would have the course's context code here, while the section's context code would be returned above)",
          "type": "string"
        },
        "workflow_state": {
          "description": "Current state of the event ('active', 'locked' or 'deleted') 'locked' indicates that start_at/end_at cannot be changed (though the event could be deleted). Normally only reservations or time slots with reservations are locked (see the Appointment Groups API)",
          "example": "active",
          "type": "string"
        },
        "hidden": {
          "description": "Whether this event should be displayed on the calendar. Only true for course-level events with section-level child events.",
          "example": false,
          "type": "boolean"
        },
        "parent_event_id": {
          "description": "Normally null. If this is a reservation (see the Appointment Groups API), the id will indicate the time slot it is for. If this is a section-level event, this will be the course-level parent event.",
          "type": "integer"
        },
        "child_events_count": {
          "description": "The number of child_events. See child_events (and parent_event_id)",
          "example": 0,
          "type": "integer"
        },
        "child_events": {
          "description": "Included by default, but may be excluded (see include[] option). If this is a time slot (see the Appointment Groups API) this will be a list of any reservations. If this is a course-level event, this will be a list of section-level events (if any)",
          "type": "array",
          "items": {
            "type": "integer"
          }
        },
        "url": {
          "description": "URL for this calendar event (to update, delete, etc.)",
          "example": "https://example.com/api/v1/calendar_events/234",
          "type": "string"
        },
        "html_url": {
          "description": "URL for a user to view this event",
          "example": "https://example.com/calendar?event_id=234&include_contexts=course_123",
          "type": "string"
        },
        "all_day_date": {
          "description": "The date of this event",
          "example": "2012-07-19",
          "type": "datetime"
        },
        "all_day": {
          "description": "Boolean indicating whether this is an all-day event (midnight to midnight)",
          "example": false,
          "type": "boolean"
        },
        "created_at": {
          "description": "When the calendar event was created",
          "example": "2012-07-12T10:55:20-06:00",
          "type": "datetime"
        },
        "updated_at": {
          "description": "When the calendar event was last updated",
          "example": "2012-07-12T10:55:20-06:00",
          "type": "datetime"
        },
        "appointment_group_id": {
          "description": "Various Appointment-Group-related fields.These fields are only pertinent to time slots (appointments) and reservations of those time slots. See the Appointment Groups API. The id of the appointment group",
          "type": "integer"
        },
        "appointment_group_url": {
          "description": "The API URL of the appointment group",
          "type": "string"
        },
        "own_reservation": {
          "description": "If the event is a reservation, this a boolean indicating whether it is the current user's reservation, or someone else's",
          "example": false,
          "type": "boolean"
        },
        "reserve_url": {
          "description": "If the event is a time slot, the API URL for reserving it",
          "type": "string"
        },
        "reserved": {
          "description": "If the event is a time slot, a boolean indicating whether the user has already made a reservation for it",
          "example": false,
          "type": "boolean"
        },
        "participants_per_appointment": {
          "description": "If the event is a time slot, this is the participant limit",
          "type": "integer"
        },
        "available_slots": {
          "description": "If the event is a time slot and it has a participant limit, an integer indicating how many slots are available",
          "type": "integer"
        },
        "user": {
          "description": "If the event is a user-level reservation, this will contain the user participant JSON (refer to the Users API).",
          "type": "string"
        },
        "group": {
          "description": "If the event is a group-level reservation, this will contain the group participant JSON (refer to the Groups API).",
          "type": "string"
        }
      }
    },
    "AssignmentEvent": {
      "id": "AssignmentEvent",
      "description": "",
      "required": [

      ],
      "properties": {
        "id": {
          "description": "A synthetic ID for the assignment",
          "example": "assignment_987",
          "type": "string"
        },
        "title": {
          "description": "The title of the assignment",
          "example": "Essay",
          "type": "string"
        },
        "start_at": {
          "description": "The due_at timestamp of the assignment",
          "example": "2012-07-19T23:59:00-06:00",
          "type": "datetime"
        },
        "end_at": {
          "description": "The due_at timestamp of the assignment",
          "example": "2012-07-19T23:59:00-06:00",
          "type": "datetime"
        },
        "description": {
          "description": "The HTML description of the assignment",
          "example": "<b>Write an essay. Whatever you want.</b>",
          "type": "string"
        },
        "context_code": {
          "description": "the context code of the (course) calendar this assignment belongs to",
          "example": "course_123",
          "type": "string"
        },
        "workflow_state": {
          "description": "Current state of the assignment ('published' or 'deleted')",
          "example": "published",
          "type": "string",
          "allowableValues": {
            "values": [
              "published",
              "deleted"
            ]
          }
        },
        "url": {
          "description": "URL for this assignment (note that updating/deleting should be done via the Assignments API)",
          "example": "https://example.com/api/v1/calendar_events/assignment_987",
          "type": "string"
        },
        "html_url": {
          "description": "URL for a user to view this assignment",
          "example": "http://example.com/courses/123/assignments/987",
          "type": "string"
        },
        "all_day_date": {
          "description": "The due date of this assignment",
          "example": "2012-07-19",
          "type": "datetime"
        },
        "all_day": {
          "description": "Boolean indicating whether this is an all-day event (e.g. assignment due at midnight)",
          "example": true,
          "type": "boolean"
        },
        "created_at": {
          "description": "When the assignment was created",
          "example": "2012-07-12T10:55:20-06:00",
          "type": "datetime"
        },
        "updated_at": {
          "description": "When the assignment was last updated",
          "example": "2012-07-12T10:55:20-06:00",
          "type": "datetime"
        },
        "assignment": {
          "description": "The full assignment JSON data (See the Assignments API)",
          "$ref": "Assignment"
        }
      }
    }
  }
}
