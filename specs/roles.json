{
  "apiVersion": "1.0",
  "swaggerVersion": "1.2",
  "basePath": "https://canvas.instructure.com/api",
  "resourcePath": "/roles",
  "produces": [
    "application/json"
  ],
  "apis": [
    {
      "path": "/v1/accounts/{account_id}/roles",
      "description": "List the roles available to an account.",
      "operations": [
        {
          "method": "GET",
          "summary": "List roles",
          "notes": "List the roles available to an account.",
          "nickname": "list_roles",
          "parameters": [
            {
              "paramType": "path",
              "name": "account_id",
              "description": "The id of the account to retrieve roles for.",
              "type": "string",
              "format": null,
              "required": true
            },
            {
              "paramType": "query",
              "name": "state",
              "description": "Filter by role state. If this argument is omitted, only 'active' roles are\nreturned.",
              "type": "array",
              "format": null,
              "required": false,
              "enum": [
                "active",
                "inactive"
              ],
              "items": {
                "type": "string"
              }
            },
            {
              "paramType": "query",
              "name": "show_inherited",
              "description": "If this argument is true, all roles inherited from parent accounts will\nbe included.",
              "type": "boolean",
              "format": null,
              "required": false
            }
          ],
          "type": "array",
          "items": {
            "$ref": "Role"
          }
        }
      ]
    },
    {
      "path": "/v1/accounts/{account_id}/roles/{id}",
      "description": "Retrieve information about a single role",
      "operations": [
        {
          "method": "GET",
          "summary": "Get a single role",
          "notes": "Retrieve information about a single role",
          "nickname": "get_single_role",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            },
            {
              "paramType": "path",
              "name": "account_id",
              "description": "The id of the account containing the role",
              "type": "string",
              "format": null,
              "required": true
            },
            {
              "paramType": "query",
              "name": "role_id",
              "description": "The unique identifier for the role",
              "type": "integer",
              "format": "int64",
              "required": true
            },
            {
              "paramType": "query",
              "name": "role",
              "description": "The name for the role",
              "type": "string",
              "format": null,
              "required": false
            }
          ],
          "type": "Role"
        }
      ]
    },
    {
      "path": "/v1/accounts/{account_id}/roles",
      "description": "Create a new course-level or account-level role.",
      "operations": [
        {
          "method": "POST",
          "summary": "Create a new role",
          "notes": "Create a new course-level or account-level role.",
          "nickname": "create_new_role",
          "parameters": [
            {
              "paramType": "path",
              "name": "account_id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            },
            {
              "paramType": "form",
              "name": "label",
              "description": "Label for the role.",
              "type": "string",
              "format": null,
              "required": true
            },
            {
              "paramType": "form",
              "name": "role",
              "description": "Deprecated alias for label.",
              "type": "string",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "base_role_type",
              "description": "Specifies the role type that will be used as a base\nfor the permissions granted to this role.\n\nDefaults to 'AccountMembership' if absent",
              "type": "string",
              "format": null,
              "required": false,
              "enum": [
                "AccountMembership",
                "StudentEnrollment",
                "TeacherEnrollment",
                "TaEnrollment",
                "ObserverEnrollment",
                "DesignerEnrollment"
              ]
            },
            {
              "paramType": "form",
              "name": "permissions[<X>][explicit]",
              "description": "no description",
              "type": "boolean",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "permissions[<X>][enabled]",
              "description": "If explicit is 1 and enabled is 1, permission <X> will be explicitly\ngranted to this role. If explicit is 1 and enabled has any other value\n(typically 0), permission <X> will be explicitly denied to this role. If\nexplicit is any other value (typically 0) or absent, or if enabled is\nabsent, the value for permission <X> will be inherited from upstream.\nIgnored if permission <X> is locked upstream (in an ancestor account).\n\nMay occur multiple times with unique values for <X>. Recognized\npermission names for <X> are:\n\n  [For Account-Level Roles Only]\n  become_user                      -- Become other users\n  import_sis                       -- Import SIS data\n  manage_account_memberships       -- Add/remove other admins for the account\n  manage_account_settings          -- Manage account-level settings\n  manage_alerts                    -- Manage global alerts\n  manage_courses                   -- Manage ( add / edit / delete ) courses\n  manage_developer_keys            -- Manage developer keys\n  manage_global_outcomes           -- Manage learning outcomes\n  manage_jobs                      -- Manage background jobs\n  manage_role_overrides            -- Manage permissions\n  manage_storage_quotas            -- Set storage quotas for courses, groups, and users\n  manage_sis                       -- Manage SIS data\n  manage_site_settings             -- Manage site-wide and plugin settings\n  manage_user_logins               -- Modify login details for users\n  read_course_content              -- View course content\n  read_course_list                 -- View the list of courses\n  read_messages                    -- View notifications sent to users\n  site_admin                       -- Use the Site Admin section and admin all other accounts\n  view_error_reports               -- View error reports\n  view_statistics                  -- View statistics\n  manage_feature_flags             -- Enable or disable features at an account level\n\n  [For both Account-Level and Course-Level roles]\n   Note: Applicable enrollment types for course-level roles are given in brackets:\n         S = student, T = teacher, A = TA, D = designer, O = observer.\n         Lower-case letters indicate permissions that are off by default.\n         A missing letter indicates the permission cannot be enabled for the role\n         or any derived custom roles.\n  change_course_state              -- [ TaD ] Change course state\n  comment_on_others_submissions    -- [sTAD ] View all students' submissions and make comments on them\n  create_collaborations            -- [STADo] Create student collaborations\n  create_conferences               -- [STADo] Create web conferences\n  manage_admin_users               -- [ Tad ] Add/remove other teachers, course designers or TAs to the course\n  manage_assignments               -- [ TADo] Manage (add / edit / delete) assignments and quizzes\n  manage_calendar                  -- [sTADo] Add, edit and delete events on the course calendar\n  manage_content                   -- [ TADo] Manage all other course content\n  manage_files                     -- [ TADo] Manage (add / edit / delete) course files\n  manage_grades                    -- [ TA  ] Edit grades\n  manage_groups                    -- [ TAD ] Manage (create / edit / delete) groups\n  manage_interaction_alerts        -- [ Ta  ] Manage alerts\n  manage_outcomes                  -- [sTaDo] Manage learning outcomes\n  manage_sections                  -- [ TaD ] Manage (create / edit / delete) course sections\n  manage_students                  -- [ TAD ] Add/remove students for the course\n  manage_user_notes                -- [ TA  ] Manage faculty journal entries\n  manage_rubrics                   -- [ TAD ] Edit assessing rubrics\n  manage_wiki                      -- [ TADo] Manage (add / edit / delete) pages\n  read_forum                       -- [STADO] View discussions\n  moderate_forum                   -- [sTADo] Moderate discussions (delete/edit others' posts, lock topics)\n  post_to_forum                    -- [STADo] Post to discussions\n  read_announcements               -- [STADO] View announcements\n  read_question_banks              -- [ TADo] View and link to question banks\n  read_reports                     -- [ TAD ] View usage reports for the course\n  read_roster                      -- [STADo] See the list of users\n  read_sis                         -- [sTa  ] Read SIS data\n  send_messages                    -- [STADo] Send messages to individual course members\n  send_messages_all                -- [sTADo] Send messages to the entire class\n  view_all_grades                  -- [ TAd ] View all grades\n  view_group_pages                 -- [sTADo] View the group pages of all student groups\n  lti_add_edit                     -- [ TAD ] LTI add and edit\n\nSome of these permissions are applicable only for roles on the site admin\naccount, on a root account, or for course-level roles with a particular base role type;\nif a specified permission is inapplicable, it will be ignored.\n\nAdditional permissions may exist based on installed plugins.",
              "type": "boolean",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "permissions[<X>][locked]",
              "description": "If the value is 1, permission <X> will be locked downstream (new roles in\nsubaccounts cannot override the setting). For any other value, permission\n<X> is left unlocked. Ignored if permission <X> is already locked\nupstream. May occur multiple times with unique values for <X>.",
              "type": "boolean",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "permissions[<X>][applies_to_self]",
              "description": "If the value is 1, permission <X> applies to the account this role is in.\nThe default value is 1. Must be true if applies_to_descendants is false.\nThis value is only returned if enabled is true.",
              "type": "boolean",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "permissions[<X>][applies_to_descendants]",
              "description": "If the value is 1, permission <X> cascades down to sub accounts of the\naccount this role is in. The default value is 1.  Must be true if\napplies_to_self is false.This value is only returned if enabled is true.",
              "type": "boolean",
              "format": null,
              "required": false
            }
          ],
          "type": "Role"
        }
      ]
    },
    {
      "path": "/v1/accounts/{account_id}/roles/{id}",
      "description": "Deactivates a custom role.  This hides it in the user interface and prevents it\nfrom being assigned to new users.  Existing users assigned to the role will\ncontinue to function with the same permissions they had previously.\nBuilt-in roles cannot be deactivated.",
      "operations": [
        {
          "method": "DELETE",
          "summary": "Deactivate a role",
          "notes": "Deactivates a custom role.  This hides it in the user interface and prevents it\nfrom being assigned to new users.  Existing users assigned to the role will\ncontinue to function with the same permissions they had previously.\nBuilt-in roles cannot be deactivated.",
          "nickname": "deactivate_role",
          "parameters": [
            {
              "paramType": "path",
              "name": "account_id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            },
            {
              "paramType": "path",
              "name": "id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            },
            {
              "paramType": "query",
              "name": "role_id",
              "description": "The unique identifier for the role",
              "type": "integer",
              "format": "int64",
              "required": true
            },
            {
              "paramType": "query",
              "name": "role",
              "description": "The name for the role",
              "type": "string",
              "format": null,
              "required": false
            }
          ],
          "type": "Role"
        }
      ]
    },
    {
      "path": "/v1/accounts/{account_id}/roles/{id}/activate",
      "description": "Re-activates an inactive role (allowing it to be assigned to new users)",
      "operations": [
        {
          "method": "POST",
          "summary": "Activate a role",
          "notes": "Re-activates an inactive role (allowing it to be assigned to new users)",
          "nickname": "activate_role",
          "parameters": [
            {
              "paramType": "path",
              "name": "account_id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            },
            {
              "paramType": "path",
              "name": "id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            },
            {
              "paramType": "form",
              "name": "role_id",
              "description": "The unique identifier for the role",
              "type": "integer",
              "format": "int64",
              "required": true
            },
            {
              "paramType": "form",
              "name": "role",
              "description": "The name for the role",
              "type": "Deprecated",
              "format": null,
              "required": false
            }
          ],
          "type": "Role"
        }
      ]
    },
    {
      "path": "/v1/accounts/{account_id}/roles/{id}",
      "description": "Update permissions for an existing role.\n\nRecognized roles are:\n* TeacherEnrollment\n* StudentEnrollment\n* TaEnrollment\n* ObserverEnrollment\n* DesignerEnrollment\n* AccountAdmin\n* Any previously created custom role",
      "operations": [
        {
          "method": "PUT",
          "summary": "Update a role",
          "notes": "Update permissions for an existing role.\n\nRecognized roles are:\n* TeacherEnrollment\n* StudentEnrollment\n* TaEnrollment\n* ObserverEnrollment\n* DesignerEnrollment\n* AccountAdmin\n* Any previously created custom role",
          "nickname": "update_role",
          "parameters": [
            {
              "paramType": "path",
              "name": "account_id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            },
            {
              "paramType": "path",
              "name": "id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            },
            {
              "paramType": "form",
              "name": "label",
              "description": "The label for the role. Can only change the label of a custom role that belongs directly to the account.",
              "type": "string",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "permissions[<X>][explicit]",
              "description": "no description",
              "type": "boolean",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "permissions[<X>][enabled]",
              "description": "These arguments are described in the documentation for the\n{api:RoleOverridesController#add_role add_role method}.",
              "type": "boolean",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "permissions[<X>][applies_to_self]",
              "description": "If the value is 1, permission <X> applies to the account this role is in.\nThe default value is 1. Must be true if applies_to_descendants is false.\nThis value is only returned if enabled is true.",
              "type": "boolean",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "permissions[<X>][applies_to_descendants]",
              "description": "If the value is 1, permission <X> cascades down to sub accounts of the\naccount this role is in. The default value is 1.  Must be true if\napplies_to_self is false.This value is only returned if enabled is true.",
              "type": "boolean",
              "format": null,
              "required": false
            }
          ],
          "type": "Role"
        }
      ]
    }
  ],
  "models": {
    "RolePermissions": {
      "id": "RolePermissions",
      "description": "",
      "required": [

      ],
      "properties": {
        "enabled": {
          "description": "Whether the role has the permission",
          "example": true,
          "type": "boolean"
        },
        "locked": {
          "description": "Whether the permission is locked by this role",
          "example": false,
          "type": "boolean",
          "default": false
        },
        "applies_to_self": {
          "description": "Whether the permission applies to the account this role is in. Only present if enabled is true",
          "example": true,
          "type": "boolean",
          "default": true
        },
        "applies_to_descendants": {
          "description": "Whether the permission cascades down to sub accounts of the account this role is in. Only present if enabled is true",
          "example": false,
          "type": "boolean",
          "default": true
        },
        "readonly": {
          "description": "Whether the permission can be modified in this role (i.e. whether the permission is locked by an upstream role).",
          "example": false,
          "type": "boolean",
          "default": false
        },
        "explicit": {
          "description": "Whether the value of enabled is specified explicitly by this role, or inherited from an upstream role.",
          "example": true,
          "type": "boolean",
          "default": false
        },
        "prior_default": {
          "description": "The value that would have been inherited from upstream if the role had not explicitly set a value. Only present if explicit is true.",
          "example": false,
          "type": "boolean"
        }
      }
    },
    "Role": {
      "id": "Role",
      "description": "",
      "required": [

      ],
      "properties": {
        "label": {
          "description": "The label of the role.",
          "example": "New Role",
          "type": "string"
        },
        "role": {
          "description": "The label of the role. (Deprecated alias for 'label')",
          "example": "New Role",
          "type": "string"
        },
        "base_role_type": {
          "description": "The role type that is being used as a base for this role. For account-level roles, this is 'AccountMembership'. For course-level roles, it is an enrollment type.",
          "example": "AccountMembership",
          "type": "string"
        },
        "account": {
          "description": "JSON representation of the account the role is in.",
          "example": {
            "id": 1019,
            "name": "CGNU",
            "parent_account_id": 73,
            "root_account_id": 1,
            "sis_account_id": "cgnu"
          },
          "type": "object",
          "$ref": "Account"
        },
        "workflow_state": {
          "description": "The state of the role: 'active', 'inactive', or 'built_in'",
          "example": "active",
          "type": "string"
        },
        "permissions": {
          "description": "A dictionary of permissions keyed by name (see permissions input parameter in the 'Create a role' API).",
          "example": {
            "read_course_content": {
              "enabled": true,
              "locked": false,
              "readonly": false,
              "explicit": true,
              "prior_default": false
            },
            "read_course_list": {
              "enabled": true,
              "locked": true,
              "readonly": true,
              "explicit": false
            },
            "read_question_banks": {
              "enabled": false,
              "locked": true,
              "readonly": false,
              "explicit": true,
              "prior_default": false
            },
            "read_reports": {
              "enabled": true,
              "locked": false,
              "readonly": false,
              "explicit": false
            }
          },
          "type": "object",
          "key": {
            "type": "string"
          },
          "value": {
            "$ref": "RolePermissions"
          }
        }
      }
    }
  }
}
