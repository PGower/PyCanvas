# coding: utf-8

"""


    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from ...base_model import BaseModel
from pprint import pformat
from six import iteritems
import re


class MediaComment(BaseModel):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, content_type=None, display_name=None, media_id=None, media_type=None, url=None):
        """
        MediaComment - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'content_type': 'str',
            'display_name': 'str',
            'media_id': 'str',
            'media_type': 'str',
            'url': 'str'
        }

        self.attribute_map = {
            'content_type': 'content-type',
            'display_name': 'display_name',
            'media_id': 'media_id',
            'media_type': 'media_type',
            'url': 'url'
        }

        self._content_type = content_type
        self._display_name = display_name
        self._media_id = media_id
        self._media_type = media_type
        self._url = url

    @property
    def content_type(self):
        """
        Gets the content_type of this MediaComment.


        :return: The content_type of this MediaComment.
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """
        Sets the content_type of this MediaComment.


        :param content_type: The content_type of this MediaComment.
        :type: str
        """

        self._content_type = content_type

    @property
    def display_name(self):
        """
        Gets the display_name of this MediaComment.


        :return: The display_name of this MediaComment.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """
        Sets the display_name of this MediaComment.


        :param display_name: The display_name of this MediaComment.
        :type: str
        """

        self._display_name = display_name

    @property
    def media_id(self):
        """
        Gets the media_id of this MediaComment.


        :return: The media_id of this MediaComment.
        :rtype: str
        """
        return self._media_id

    @media_id.setter
    def media_id(self, media_id):
        """
        Sets the media_id of this MediaComment.


        :param media_id: The media_id of this MediaComment.
        :type: str
        """

        self._media_id = media_id

    @property
    def media_type(self):
        """
        Gets the media_type of this MediaComment.


        :return: The media_type of this MediaComment.
        :rtype: str
        """
        return self._media_type

    @media_type.setter
    def media_type(self, media_type):
        """
        Sets the media_type of this MediaComment.


        :param media_type: The media_type of this MediaComment.
        :type: str
        """

        self._media_type = media_type

    @property
    def url(self):
        """
        Gets the url of this MediaComment.


        :return: The url of this MediaComment.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """
        Sets the url of this MediaComment.


        :param url: The url of this MediaComment.
        :type: str
        """

        self._url = url

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
