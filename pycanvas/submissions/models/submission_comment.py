# coding: utf-8

"""


    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from ...base_model import BaseModel
from pprint import pformat
from six import iteritems
import re


class SubmissionComment(BaseModel):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, author_id=None, author_name=None, author=None, comment=None, created_at=None, media_comment=None):
        """
        SubmissionComment - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'author_id': 'int',
            'author_name': 'str',
            'author': 'str',
            'comment': 'str',
            'created_at': 'Datetime',
            'media_comment': 'MediaComment'
        }

        self.attribute_map = {
            'id': 'id',
            'author_id': 'author_id',
            'author_name': 'author_name',
            'author': 'author',
            'comment': 'comment',
            'created_at': 'created_at',
            'media_comment': 'media_comment'
        }

        self._id = id
        self._author_id = author_id
        self._author_name = author_name
        self._author = author
        self._comment = comment
        self._created_at = created_at
        self._media_comment = media_comment

    @property
    def id(self):
        """
        Gets the id of this SubmissionComment.


        :return: The id of this SubmissionComment.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this SubmissionComment.


        :param id: The id of this SubmissionComment.
        :type: int
        """

        self._id = id

    @property
    def author_id(self):
        """
        Gets the author_id of this SubmissionComment.


        :return: The author_id of this SubmissionComment.
        :rtype: int
        """
        return self._author_id

    @author_id.setter
    def author_id(self, author_id):
        """
        Sets the author_id of this SubmissionComment.


        :param author_id: The author_id of this SubmissionComment.
        :type: int
        """

        self._author_id = author_id

    @property
    def author_name(self):
        """
        Gets the author_name of this SubmissionComment.


        :return: The author_name of this SubmissionComment.
        :rtype: str
        """
        return self._author_name

    @author_name.setter
    def author_name(self, author_name):
        """
        Sets the author_name of this SubmissionComment.


        :param author_name: The author_name of this SubmissionComment.
        :type: str
        """

        self._author_name = author_name

    @property
    def author(self):
        """
        Gets the author of this SubmissionComment.
        Abbreviated user object UserDisplay (see users API).

        :return: The author of this SubmissionComment.
        :rtype: str
        """
        return self._author

    @author.setter
    def author(self, author):
        """
        Sets the author of this SubmissionComment.
        Abbreviated user object UserDisplay (see users API).

        :param author: The author of this SubmissionComment.
        :type: str
        """

        self._author = author

    @property
    def comment(self):
        """
        Gets the comment of this SubmissionComment.


        :return: The comment of this SubmissionComment.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """
        Sets the comment of this SubmissionComment.


        :param comment: The comment of this SubmissionComment.
        :type: str
        """

        self._comment = comment

    @property
    def created_at(self):
        """
        Gets the created_at of this SubmissionComment.


        :return: The created_at of this SubmissionComment.
        :rtype: Datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this SubmissionComment.


        :param created_at: The created_at of this SubmissionComment.
        :type: Datetime
        """

        self._created_at = created_at

    @property
    def media_comment(self):
        """
        Gets the media_comment of this SubmissionComment.


        :return: The media_comment of this SubmissionComment.
        :rtype: MediaComment
        """
        return self._media_comment

    @media_comment.setter
    def media_comment(self, media_comment):
        """
        Sets the media_comment of this SubmissionComment.


        :param media_comment: The media_comment of this SubmissionComment.
        :type: MediaComment
        """

        self._media_comment = media_comment

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
