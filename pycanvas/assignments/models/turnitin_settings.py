# coding: utf-8

"""


    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from ...base_model import BaseModel
from pprint import pformat
from six import iteritems
import re


class TurnitinSettings(BaseModel):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, originality_report_visibility=None, s_paper_check=None, internet_check=None, journal_check=None, exclude_biblio=None, exclude_quoted=None, exclude_small_matches_type=None, exclude_small_matches_value=None):
        """
        TurnitinSettings - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'originality_report_visibility': 'str',
            's_paper_check': 'bool',
            'internet_check': 'bool',
            'journal_check': 'bool',
            'exclude_biblio': 'bool',
            'exclude_quoted': 'bool',
            'exclude_small_matches_type': 'str',
            'exclude_small_matches_value': 'int'
        }

        self.attribute_map = {
            'originality_report_visibility': 'originality_report_visibility',
            's_paper_check': 's_paper_check',
            'internet_check': 'internet_check',
            'journal_check': 'journal_check',
            'exclude_biblio': 'exclude_biblio',
            'exclude_quoted': 'exclude_quoted',
            'exclude_small_matches_type': 'exclude_small_matches_type',
            'exclude_small_matches_value': 'exclude_small_matches_value'
        }

        self._originality_report_visibility = originality_report_visibility
        self._s_paper_check = s_paper_check
        self._internet_check = internet_check
        self._journal_check = journal_check
        self._exclude_biblio = exclude_biblio
        self._exclude_quoted = exclude_quoted
        self._exclude_small_matches_type = exclude_small_matches_type
        self._exclude_small_matches_value = exclude_small_matches_value

    @property
    def originality_report_visibility(self):
        """
        Gets the originality_report_visibility of this TurnitinSettings.


        :return: The originality_report_visibility of this TurnitinSettings.
        :rtype: str
        """
        return self._originality_report_visibility

    @originality_report_visibility.setter
    def originality_report_visibility(self, originality_report_visibility):
        """
        Sets the originality_report_visibility of this TurnitinSettings.


        :param originality_report_visibility: The originality_report_visibility of this TurnitinSettings.
        :type: str
        """

        self._originality_report_visibility = originality_report_visibility

    @property
    def s_paper_check(self):
        """
        Gets the s_paper_check of this TurnitinSettings.


        :return: The s_paper_check of this TurnitinSettings.
        :rtype: bool
        """
        return self._s_paper_check

    @s_paper_check.setter
    def s_paper_check(self, s_paper_check):
        """
        Sets the s_paper_check of this TurnitinSettings.


        :param s_paper_check: The s_paper_check of this TurnitinSettings.
        :type: bool
        """

        self._s_paper_check = s_paper_check

    @property
    def internet_check(self):
        """
        Gets the internet_check of this TurnitinSettings.


        :return: The internet_check of this TurnitinSettings.
        :rtype: bool
        """
        return self._internet_check

    @internet_check.setter
    def internet_check(self, internet_check):
        """
        Sets the internet_check of this TurnitinSettings.


        :param internet_check: The internet_check of this TurnitinSettings.
        :type: bool
        """

        self._internet_check = internet_check

    @property
    def journal_check(self):
        """
        Gets the journal_check of this TurnitinSettings.


        :return: The journal_check of this TurnitinSettings.
        :rtype: bool
        """
        return self._journal_check

    @journal_check.setter
    def journal_check(self, journal_check):
        """
        Sets the journal_check of this TurnitinSettings.


        :param journal_check: The journal_check of this TurnitinSettings.
        :type: bool
        """

        self._journal_check = journal_check

    @property
    def exclude_biblio(self):
        """
        Gets the exclude_biblio of this TurnitinSettings.


        :return: The exclude_biblio of this TurnitinSettings.
        :rtype: bool
        """
        return self._exclude_biblio

    @exclude_biblio.setter
    def exclude_biblio(self, exclude_biblio):
        """
        Sets the exclude_biblio of this TurnitinSettings.


        :param exclude_biblio: The exclude_biblio of this TurnitinSettings.
        :type: bool
        """

        self._exclude_biblio = exclude_biblio

    @property
    def exclude_quoted(self):
        """
        Gets the exclude_quoted of this TurnitinSettings.


        :return: The exclude_quoted of this TurnitinSettings.
        :rtype: bool
        """
        return self._exclude_quoted

    @exclude_quoted.setter
    def exclude_quoted(self, exclude_quoted):
        """
        Sets the exclude_quoted of this TurnitinSettings.


        :param exclude_quoted: The exclude_quoted of this TurnitinSettings.
        :type: bool
        """

        self._exclude_quoted = exclude_quoted

    @property
    def exclude_small_matches_type(self):
        """
        Gets the exclude_small_matches_type of this TurnitinSettings.


        :return: The exclude_small_matches_type of this TurnitinSettings.
        :rtype: str
        """
        return self._exclude_small_matches_type

    @exclude_small_matches_type.setter
    def exclude_small_matches_type(self, exclude_small_matches_type):
        """
        Sets the exclude_small_matches_type of this TurnitinSettings.


        :param exclude_small_matches_type: The exclude_small_matches_type of this TurnitinSettings.
        :type: str
        """

        self._exclude_small_matches_type = exclude_small_matches_type

    @property
    def exclude_small_matches_value(self):
        """
        Gets the exclude_small_matches_value of this TurnitinSettings.


        :return: The exclude_small_matches_value of this TurnitinSettings.
        :rtype: int
        """
        return self._exclude_small_matches_value

    @exclude_small_matches_value.setter
    def exclude_small_matches_value(self, exclude_small_matches_value):
        """
        Sets the exclude_small_matches_value of this TurnitinSettings.


        :param exclude_small_matches_value: The exclude_small_matches_value of this TurnitinSettings.
        :type: int
        """

        self._exclude_small_matches_value = exclude_small_matches_value

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
