# coding: utf-8

"""


    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from ...base_model import BaseModel
from pprint import pformat
from six import iteritems
import re


class AssignmentDate(BaseModel):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, base=None, title=None, due_at=None, unlock_at=None, lock_at=None):
        """
        AssignmentDate - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'base': 'bool',
            'title': 'str',
            'due_at': 'Datetime',
            'unlock_at': 'Datetime',
            'lock_at': 'Datetime'
        }

        self.attribute_map = {
            'id': 'id',
            'base': 'base',
            'title': 'title',
            'due_at': 'due_at',
            'unlock_at': 'unlock_at',
            'lock_at': 'lock_at'
        }

        self._id = id
        self._base = base
        self._title = title
        self._due_at = due_at
        self._unlock_at = unlock_at
        self._lock_at = lock_at

    @property
    def id(self):
        """
        Gets the id of this AssignmentDate.
        (Optional, missing if 'base' is present) id of the assignment override this date represents

        :return: The id of this AssignmentDate.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this AssignmentDate.
        (Optional, missing if 'base' is present) id of the assignment override this date represents

        :param id: The id of this AssignmentDate.
        :type: int
        """

        self._id = id

    @property
    def base(self):
        """
        Gets the base of this AssignmentDate.
        (Optional, present if 'id' is missing) whether this date represents the assignment's or quiz's default due date

        :return: The base of this AssignmentDate.
        :rtype: bool
        """
        return self._base

    @base.setter
    def base(self, base):
        """
        Sets the base of this AssignmentDate.
        (Optional, present if 'id' is missing) whether this date represents the assignment's or quiz's default due date

        :param base: The base of this AssignmentDate.
        :type: bool
        """

        self._base = base

    @property
    def title(self):
        """
        Gets the title of this AssignmentDate.


        :return: The title of this AssignmentDate.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """
        Sets the title of this AssignmentDate.


        :param title: The title of this AssignmentDate.
        :type: str
        """

        self._title = title

    @property
    def due_at(self):
        """
        Gets the due_at of this AssignmentDate.


        :return: The due_at of this AssignmentDate.
        :rtype: Datetime
        """
        return self._due_at

    @due_at.setter
    def due_at(self, due_at):
        """
        Sets the due_at of this AssignmentDate.


        :param due_at: The due_at of this AssignmentDate.
        :type: Datetime
        """

        self._due_at = due_at

    @property
    def unlock_at(self):
        """
        Gets the unlock_at of this AssignmentDate.


        :return: The unlock_at of this AssignmentDate.
        :rtype: Datetime
        """
        return self._unlock_at

    @unlock_at.setter
    def unlock_at(self, unlock_at):
        """
        Sets the unlock_at of this AssignmentDate.


        :param unlock_at: The unlock_at of this AssignmentDate.
        :type: Datetime
        """

        self._unlock_at = unlock_at

    @property
    def lock_at(self):
        """
        Gets the lock_at of this AssignmentDate.


        :return: The lock_at of this AssignmentDate.
        :rtype: Datetime
        """
        return self._lock_at

    @lock_at.setter
    def lock_at(self, lock_at):
        """
        Sets the lock_at of this AssignmentDate.


        :param lock_at: The lock_at of this AssignmentDate.
        :type: Datetime
        """

        self._lock_at = lock_at

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
