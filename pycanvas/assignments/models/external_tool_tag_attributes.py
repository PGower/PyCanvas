# coding: utf-8

"""


    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from ...base_model import BaseModel
from pprint import pformat
from six import iteritems
import re


class ExternalToolTagAttributes(BaseModel):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, url=None, new_tab=None, resource_link_id=None):
        """
        ExternalToolTagAttributes - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'url': 'str',
            'new_tab': 'bool',
            'resource_link_id': 'str'
        }

        self.attribute_map = {
            'url': 'url',
            'new_tab': 'new_tab',
            'resource_link_id': 'resource_link_id'
        }

        self._url = url
        self._new_tab = new_tab
        self._resource_link_id = resource_link_id

    @property
    def url(self):
        """
        Gets the url of this ExternalToolTagAttributes.
        URL to the external tool

        :return: The url of this ExternalToolTagAttributes.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """
        Sets the url of this ExternalToolTagAttributes.
        URL to the external tool

        :param url: The url of this ExternalToolTagAttributes.
        :type: str
        """

        self._url = url

    @property
    def new_tab(self):
        """
        Gets the new_tab of this ExternalToolTagAttributes.
        Whether or not there is a new tab for the external tool

        :return: The new_tab of this ExternalToolTagAttributes.
        :rtype: bool
        """
        return self._new_tab

    @new_tab.setter
    def new_tab(self, new_tab):
        """
        Sets the new_tab of this ExternalToolTagAttributes.
        Whether or not there is a new tab for the external tool

        :param new_tab: The new_tab of this ExternalToolTagAttributes.
        :type: bool
        """

        self._new_tab = new_tab

    @property
    def resource_link_id(self):
        """
        Gets the resource_link_id of this ExternalToolTagAttributes.
        the identifier for this tool_tag

        :return: The resource_link_id of this ExternalToolTagAttributes.
        :rtype: str
        """
        return self._resource_link_id

    @resource_link_id.setter
    def resource_link_id(self, resource_link_id):
        """
        Sets the resource_link_id of this ExternalToolTagAttributes.
        the identifier for this tool_tag

        :param resource_link_id: The resource_link_id of this ExternalToolTagAttributes.
        :type: str
        """

        self._resource_link_id = resource_link_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
