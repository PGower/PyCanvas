# coding: utf-8

"""


    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from ...base_model import BaseModel
from pprint import pformat
from six import iteritems
import re


class ConferenceRecording(BaseModel):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, duration_minutes=None, title=None, updated_at=None, created_at=None, playback_url=None):
        """
        ConferenceRecording - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'duration_minutes': 'int',
            'title': 'str',
            'updated_at': 'Datetime',
            'created_at': 'Datetime',
            'playback_url': 'str'
        }

        self.attribute_map = {
            'duration_minutes': 'duration_minutes',
            'title': 'title',
            'updated_at': 'updated_at',
            'created_at': 'created_at',
            'playback_url': 'playback_url'
        }

        self._duration_minutes = duration_minutes
        self._title = title
        self._updated_at = updated_at
        self._created_at = created_at
        self._playback_url = playback_url

    @property
    def duration_minutes(self):
        """
        Gets the duration_minutes of this ConferenceRecording.


        :return: The duration_minutes of this ConferenceRecording.
        :rtype: int
        """
        return self._duration_minutes

    @duration_minutes.setter
    def duration_minutes(self, duration_minutes):
        """
        Sets the duration_minutes of this ConferenceRecording.


        :param duration_minutes: The duration_minutes of this ConferenceRecording.
        :type: int
        """

        self._duration_minutes = duration_minutes

    @property
    def title(self):
        """
        Gets the title of this ConferenceRecording.


        :return: The title of this ConferenceRecording.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """
        Sets the title of this ConferenceRecording.


        :param title: The title of this ConferenceRecording.
        :type: str
        """

        self._title = title

    @property
    def updated_at(self):
        """
        Gets the updated_at of this ConferenceRecording.


        :return: The updated_at of this ConferenceRecording.
        :rtype: Datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """
        Sets the updated_at of this ConferenceRecording.


        :param updated_at: The updated_at of this ConferenceRecording.
        :type: Datetime
        """

        self._updated_at = updated_at

    @property
    def created_at(self):
        """
        Gets the created_at of this ConferenceRecording.


        :return: The created_at of this ConferenceRecording.
        :rtype: Datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this ConferenceRecording.


        :param created_at: The created_at of this ConferenceRecording.
        :type: Datetime
        """

        self._created_at = created_at

    @property
    def playback_url(self):
        """
        Gets the playback_url of this ConferenceRecording.


        :return: The playback_url of this ConferenceRecording.
        :rtype: str
        """
        return self._playback_url

    @playback_url.setter
    def playback_url(self, playback_url):
        """
        Sets the playback_url of this ConferenceRecording.


        :param playback_url: The playback_url of this ConferenceRecording.
        :type: str
        """

        self._playback_url = playback_url

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
