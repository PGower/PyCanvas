# coding: utf-8

"""


    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from ...base_model import BaseModel
from pprint import pformat
from six import iteritems
import re


class ModuleItemSequenceAsset(BaseModel):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, module_id=None, title=None, type=None):
        """
        ModuleItemSequenceAsset - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'module_id': 'int',
            'title': 'str',
            'type': 'str'
        }

        self.attribute_map = {
            'id': 'id',
            'module_id': 'module_id',
            'title': 'title',
            'type': 'type'
        }

        self._id = id
        self._module_id = module_id
        self._title = title
        self._type = type

    @property
    def id(self):
        """
        Gets the id of this ModuleItemSequenceAsset.


        :return: The id of this ModuleItemSequenceAsset.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this ModuleItemSequenceAsset.


        :param id: The id of this ModuleItemSequenceAsset.
        :type: int
        """

        self._id = id

    @property
    def module_id(self):
        """
        Gets the module_id of this ModuleItemSequenceAsset.


        :return: The module_id of this ModuleItemSequenceAsset.
        :rtype: int
        """
        return self._module_id

    @module_id.setter
    def module_id(self, module_id):
        """
        Sets the module_id of this ModuleItemSequenceAsset.


        :param module_id: The module_id of this ModuleItemSequenceAsset.
        :type: int
        """

        self._module_id = module_id

    @property
    def title(self):
        """
        Gets the title of this ModuleItemSequenceAsset.


        :return: The title of this ModuleItemSequenceAsset.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """
        Sets the title of this ModuleItemSequenceAsset.


        :param title: The title of this ModuleItemSequenceAsset.
        :type: str
        """

        self._title = title

    @property
    def type(self):
        """
        Gets the type of this ModuleItemSequenceAsset.


        :return: The type of this ModuleItemSequenceAsset.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this ModuleItemSequenceAsset.


        :param type: The type of this ModuleItemSequenceAsset.
        :type: str
        """

        self._type = type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
