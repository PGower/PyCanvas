# coding: utf-8

"""


    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from ...base_model import BaseModel
from pprint import pformat
from six import iteritems
import re


class Tab(BaseModel):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, html_url=None, id=None, label=None, type=None, hidden=None, visibility=None, position=None):
        """
        Tab - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'html_url': 'str',
            'id': 'str',
            'label': 'str',
            'type': 'str',
            'hidden': 'bool',
            'visibility': 'str',
            'position': 'int'
        }

        self.attribute_map = {
            'html_url': 'html_url',
            'id': 'id',
            'label': 'label',
            'type': 'type',
            'hidden': 'hidden',
            'visibility': 'visibility',
            'position': 'position'
        }

        self._html_url = html_url
        self._id = id
        self._label = label
        self._type = type
        self._hidden = hidden
        self._visibility = visibility
        self._position = position

    @property
    def html_url(self):
        """
        Gets the html_url of this Tab.


        :return: The html_url of this Tab.
        :rtype: str
        """
        return self._html_url

    @html_url.setter
    def html_url(self, html_url):
        """
        Sets the html_url of this Tab.


        :param html_url: The html_url of this Tab.
        :type: str
        """

        self._html_url = html_url

    @property
    def id(self):
        """
        Gets the id of this Tab.


        :return: The id of this Tab.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Tab.


        :param id: The id of this Tab.
        :type: str
        """

        self._id = id

    @property
    def label(self):
        """
        Gets the label of this Tab.


        :return: The label of this Tab.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """
        Sets the label of this Tab.


        :param label: The label of this Tab.
        :type: str
        """

        self._label = label

    @property
    def type(self):
        """
        Gets the type of this Tab.


        :return: The type of this Tab.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this Tab.


        :param type: The type of this Tab.
        :type: str
        """

        self._type = type

    @property
    def hidden(self):
        """
        Gets the hidden of this Tab.
        only included if true

        :return: The hidden of this Tab.
        :rtype: bool
        """
        return self._hidden

    @hidden.setter
    def hidden(self, hidden):
        """
        Sets the hidden of this Tab.
        only included if true

        :param hidden: The hidden of this Tab.
        :type: bool
        """

        self._hidden = hidden

    @property
    def visibility(self):
        """
        Gets the visibility of this Tab.
        possible values are: public, members, admins, and none

        :return: The visibility of this Tab.
        :rtype: str
        """
        return self._visibility

    @visibility.setter
    def visibility(self, visibility):
        """
        Sets the visibility of this Tab.
        possible values are: public, members, admins, and none

        :param visibility: The visibility of this Tab.
        :type: str
        """

        self._visibility = visibility

    @property
    def position(self):
        """
        Gets the position of this Tab.
        1 based

        :return: The position of this Tab.
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """
        Sets the position of this Tab.
        1 based

        :param position: The position of this Tab.
        :type: int
        """

        self._position = position

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
