# coding: utf-8

"""


    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from ...base_model import BaseModel
from pprint import pformat
from six import iteritems
import re


class AccountAuthorizationConfig(BaseModel):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, login_handle_name=None, identifier_format=None, auth_type=None, id=None, log_out_url=None, log_in_url=None, certificate_fingerprint=None, change_password_url=None, requested_authn_context=None, auth_host=None, auth_filter=None, auth_over_tls=None, auth_base=None, auth_username=None, auth_port=None, position=None, idp_entity_id=None, login_attribute=None, unknown_user_url=None):
        """
        AccountAuthorizationConfig - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'login_handle_name': 'str',
            'identifier_format': 'str',
            'auth_type': 'str',
            'id': 'int',
            'log_out_url': 'str',
            'log_in_url': 'str',
            'certificate_fingerprint': 'str',
            'change_password_url': 'str',
            'requested_authn_context': 'str',
            'auth_host': 'str',
            'auth_filter': 'str',
            'auth_over_tls': 'int',
            'auth_base': 'str',
            'auth_username': 'str',
            'auth_port': 'int',
            'position': 'int',
            'idp_entity_id': 'str',
            'login_attribute': 'str',
            'unknown_user_url': 'str'
        }

        self.attribute_map = {
            'login_handle_name': 'login_handle_name',
            'identifier_format': 'identifier_format',
            'auth_type': 'auth_type',
            'id': 'id',
            'log_out_url': 'log_out_url',
            'log_in_url': 'log_in_url',
            'certificate_fingerprint': 'certificate_fingerprint',
            'change_password_url': 'change_password_url',
            'requested_authn_context': 'requested_authn_context',
            'auth_host': 'auth_host',
            'auth_filter': 'auth_filter',
            'auth_over_tls': 'auth_over_tls',
            'auth_base': 'auth_base',
            'auth_username': 'auth_username',
            'auth_port': 'auth_port',
            'position': 'position',
            'idp_entity_id': 'idp_entity_id',
            'login_attribute': 'login_attribute',
            'unknown_user_url': 'unknown_user_url'
        }

        self._login_handle_name = login_handle_name
        self._identifier_format = identifier_format
        self._auth_type = auth_type
        self._id = id
        self._log_out_url = log_out_url
        self._log_in_url = log_in_url
        self._certificate_fingerprint = certificate_fingerprint
        self._change_password_url = change_password_url
        self._requested_authn_context = requested_authn_context
        self._auth_host = auth_host
        self._auth_filter = auth_filter
        self._auth_over_tls = auth_over_tls
        self._auth_base = auth_base
        self._auth_username = auth_username
        self._auth_port = auth_port
        self._position = position
        self._idp_entity_id = idp_entity_id
        self._login_attribute = login_attribute
        self._unknown_user_url = unknown_user_url

    @property
    def login_handle_name(self):
        """
        Gets the login_handle_name of this AccountAuthorizationConfig.
        Valid for SAML and CAS authorization.

        :return: The login_handle_name of this AccountAuthorizationConfig.
        :rtype: str
        """
        return self._login_handle_name

    @login_handle_name.setter
    def login_handle_name(self, login_handle_name):
        """
        Sets the login_handle_name of this AccountAuthorizationConfig.
        Valid for SAML and CAS authorization.

        :param login_handle_name: The login_handle_name of this AccountAuthorizationConfig.
        :type: str
        """

        self._login_handle_name = login_handle_name

    @property
    def identifier_format(self):
        """
        Gets the identifier_format of this AccountAuthorizationConfig.
        Valid for SAML authorization.

        :return: The identifier_format of this AccountAuthorizationConfig.
        :rtype: str
        """
        return self._identifier_format

    @identifier_format.setter
    def identifier_format(self, identifier_format):
        """
        Sets the identifier_format of this AccountAuthorizationConfig.
        Valid for SAML authorization.

        :param identifier_format: The identifier_format of this AccountAuthorizationConfig.
        :type: str
        """

        self._identifier_format = identifier_format

    @property
    def auth_type(self):
        """
        Gets the auth_type of this AccountAuthorizationConfig.
        Valid for SAML, LDAP and CAS authorization.

        :return: The auth_type of this AccountAuthorizationConfig.
        :rtype: str
        """
        return self._auth_type

    @auth_type.setter
    def auth_type(self, auth_type):
        """
        Sets the auth_type of this AccountAuthorizationConfig.
        Valid for SAML, LDAP and CAS authorization.

        :param auth_type: The auth_type of this AccountAuthorizationConfig.
        :type: str
        """

        self._auth_type = auth_type

    @property
    def id(self):
        """
        Gets the id of this AccountAuthorizationConfig.
        Valid for SAML, LDAP and CAS authorization.

        :return: The id of this AccountAuthorizationConfig.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this AccountAuthorizationConfig.
        Valid for SAML, LDAP and CAS authorization.

        :param id: The id of this AccountAuthorizationConfig.
        :type: int
        """

        self._id = id

    @property
    def log_out_url(self):
        """
        Gets the log_out_url of this AccountAuthorizationConfig.
        Valid for SAML authorization.

        :return: The log_out_url of this AccountAuthorizationConfig.
        :rtype: str
        """
        return self._log_out_url

    @log_out_url.setter
    def log_out_url(self, log_out_url):
        """
        Sets the log_out_url of this AccountAuthorizationConfig.
        Valid for SAML authorization.

        :param log_out_url: The log_out_url of this AccountAuthorizationConfig.
        :type: str
        """

        self._log_out_url = log_out_url

    @property
    def log_in_url(self):
        """
        Gets the log_in_url of this AccountAuthorizationConfig.
        Valid for SAML and CAS authorization.

        :return: The log_in_url of this AccountAuthorizationConfig.
        :rtype: str
        """
        return self._log_in_url

    @log_in_url.setter
    def log_in_url(self, log_in_url):
        """
        Sets the log_in_url of this AccountAuthorizationConfig.
        Valid for SAML and CAS authorization.

        :param log_in_url: The log_in_url of this AccountAuthorizationConfig.
        :type: str
        """

        self._log_in_url = log_in_url

    @property
    def certificate_fingerprint(self):
        """
        Gets the certificate_fingerprint of this AccountAuthorizationConfig.
        Valid for SAML authorization.

        :return: The certificate_fingerprint of this AccountAuthorizationConfig.
        :rtype: str
        """
        return self._certificate_fingerprint

    @certificate_fingerprint.setter
    def certificate_fingerprint(self, certificate_fingerprint):
        """
        Sets the certificate_fingerprint of this AccountAuthorizationConfig.
        Valid for SAML authorization.

        :param certificate_fingerprint: The certificate_fingerprint of this AccountAuthorizationConfig.
        :type: str
        """

        self._certificate_fingerprint = certificate_fingerprint

    @property
    def change_password_url(self):
        """
        Gets the change_password_url of this AccountAuthorizationConfig.
        Valid for SAML authorization.

        :return: The change_password_url of this AccountAuthorizationConfig.
        :rtype: str
        """
        return self._change_password_url

    @change_password_url.setter
    def change_password_url(self, change_password_url):
        """
        Sets the change_password_url of this AccountAuthorizationConfig.
        Valid for SAML authorization.

        :param change_password_url: The change_password_url of this AccountAuthorizationConfig.
        :type: str
        """

        self._change_password_url = change_password_url

    @property
    def requested_authn_context(self):
        """
        Gets the requested_authn_context of this AccountAuthorizationConfig.
        Valid for SAML authorization.

        :return: The requested_authn_context of this AccountAuthorizationConfig.
        :rtype: str
        """
        return self._requested_authn_context

    @requested_authn_context.setter
    def requested_authn_context(self, requested_authn_context):
        """
        Sets the requested_authn_context of this AccountAuthorizationConfig.
        Valid for SAML authorization.

        :param requested_authn_context: The requested_authn_context of this AccountAuthorizationConfig.
        :type: str
        """

        self._requested_authn_context = requested_authn_context

    @property
    def auth_host(self):
        """
        Gets the auth_host of this AccountAuthorizationConfig.
        Valid for LDAP authorization.

        :return: The auth_host of this AccountAuthorizationConfig.
        :rtype: str
        """
        return self._auth_host

    @auth_host.setter
    def auth_host(self, auth_host):
        """
        Sets the auth_host of this AccountAuthorizationConfig.
        Valid for LDAP authorization.

        :param auth_host: The auth_host of this AccountAuthorizationConfig.
        :type: str
        """

        self._auth_host = auth_host

    @property
    def auth_filter(self):
        """
        Gets the auth_filter of this AccountAuthorizationConfig.
        Valid for LDAP authorization.

        :return: The auth_filter of this AccountAuthorizationConfig.
        :rtype: str
        """
        return self._auth_filter

    @auth_filter.setter
    def auth_filter(self, auth_filter):
        """
        Sets the auth_filter of this AccountAuthorizationConfig.
        Valid for LDAP authorization.

        :param auth_filter: The auth_filter of this AccountAuthorizationConfig.
        :type: str
        """

        self._auth_filter = auth_filter

    @property
    def auth_over_tls(self):
        """
        Gets the auth_over_tls of this AccountAuthorizationConfig.
        Valid for LDAP authorization.

        :return: The auth_over_tls of this AccountAuthorizationConfig.
        :rtype: int
        """
        return self._auth_over_tls

    @auth_over_tls.setter
    def auth_over_tls(self, auth_over_tls):
        """
        Sets the auth_over_tls of this AccountAuthorizationConfig.
        Valid for LDAP authorization.

        :param auth_over_tls: The auth_over_tls of this AccountAuthorizationConfig.
        :type: int
        """

        self._auth_over_tls = auth_over_tls

    @property
    def auth_base(self):
        """
        Gets the auth_base of this AccountAuthorizationConfig.
        Valid for LDAP and CAS authorization.

        :return: The auth_base of this AccountAuthorizationConfig.
        :rtype: str
        """
        return self._auth_base

    @auth_base.setter
    def auth_base(self, auth_base):
        """
        Sets the auth_base of this AccountAuthorizationConfig.
        Valid for LDAP and CAS authorization.

        :param auth_base: The auth_base of this AccountAuthorizationConfig.
        :type: str
        """

        self._auth_base = auth_base

    @property
    def auth_username(self):
        """
        Gets the auth_username of this AccountAuthorizationConfig.
        Valid for LDAP authorization.

        :return: The auth_username of this AccountAuthorizationConfig.
        :rtype: str
        """
        return self._auth_username

    @auth_username.setter
    def auth_username(self, auth_username):
        """
        Sets the auth_username of this AccountAuthorizationConfig.
        Valid for LDAP authorization.

        :param auth_username: The auth_username of this AccountAuthorizationConfig.
        :type: str
        """

        self._auth_username = auth_username

    @property
    def auth_port(self):
        """
        Gets the auth_port of this AccountAuthorizationConfig.
        Valid for LDAP authorization.

        :return: The auth_port of this AccountAuthorizationConfig.
        :rtype: int
        """
        return self._auth_port

    @auth_port.setter
    def auth_port(self, auth_port):
        """
        Sets the auth_port of this AccountAuthorizationConfig.
        Valid for LDAP authorization.

        :param auth_port: The auth_port of this AccountAuthorizationConfig.
        :type: int
        """

        self._auth_port = auth_port

    @property
    def position(self):
        """
        Gets the position of this AccountAuthorizationConfig.
        Valid for SAML, LDAP and CAS authorization.

        :return: The position of this AccountAuthorizationConfig.
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """
        Sets the position of this AccountAuthorizationConfig.
        Valid for SAML, LDAP and CAS authorization.

        :param position: The position of this AccountAuthorizationConfig.
        :type: int
        """

        self._position = position

    @property
    def idp_entity_id(self):
        """
        Gets the idp_entity_id of this AccountAuthorizationConfig.
        Valid for SAML authorization.

        :return: The idp_entity_id of this AccountAuthorizationConfig.
        :rtype: str
        """
        return self._idp_entity_id

    @idp_entity_id.setter
    def idp_entity_id(self, idp_entity_id):
        """
        Sets the idp_entity_id of this AccountAuthorizationConfig.
        Valid for SAML authorization.

        :param idp_entity_id: The idp_entity_id of this AccountAuthorizationConfig.
        :type: str
        """

        self._idp_entity_id = idp_entity_id

    @property
    def login_attribute(self):
        """
        Gets the login_attribute of this AccountAuthorizationConfig.
        Valid for SAML authorization.

        :return: The login_attribute of this AccountAuthorizationConfig.
        :rtype: str
        """
        return self._login_attribute

    @login_attribute.setter
    def login_attribute(self, login_attribute):
        """
        Sets the login_attribute of this AccountAuthorizationConfig.
        Valid for SAML authorization.

        :param login_attribute: The login_attribute of this AccountAuthorizationConfig.
        :type: str
        """

        self._login_attribute = login_attribute

    @property
    def unknown_user_url(self):
        """
        Gets the unknown_user_url of this AccountAuthorizationConfig.
        Valid for SAML and CAS authorization.

        :return: The unknown_user_url of this AccountAuthorizationConfig.
        :rtype: str
        """
        return self._unknown_user_url

    @unknown_user_url.setter
    def unknown_user_url(self, unknown_user_url):
        """
        Sets the unknown_user_url of this AccountAuthorizationConfig.
        Valid for SAML and CAS authorization.

        :param unknown_user_url: The unknown_user_url of this AccountAuthorizationConfig.
        :type: str
        """

        self._unknown_user_url = unknown_user_url

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
