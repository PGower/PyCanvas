# coding: utf-8

"""


    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from ...base_model import BaseModel
from pprint import pformat
from six import iteritems
import re


class Folder(BaseModel):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, context_type=None, context_id=None, files_count=None, position=None, updated_at=None, folders_url=None, files_url=None, full_name=None, lock_at=None, id=None, folders_count=None, name=None, parent_folder_id=None, created_at=None, unlock_at=None, hidden=None, hidden_for_user=None, locked=None, locked_for_user=None):
        """
        Folder - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'context_type': 'str',
            'context_id': 'int',
            'files_count': 'int',
            'position': 'int',
            'updated_at': 'Datetime',
            'folders_url': 'str',
            'files_url': 'str',
            'full_name': 'str',
            'lock_at': 'Datetime',
            'id': 'int',
            'folders_count': 'int',
            'name': 'str',
            'parent_folder_id': 'int',
            'created_at': 'Datetime',
            'unlock_at': 'Datetime',
            'hidden': 'bool',
            'hidden_for_user': 'bool',
            'locked': 'bool',
            'locked_for_user': 'bool'
        }

        self.attribute_map = {
            'context_type': 'context_type',
            'context_id': 'context_id',
            'files_count': 'files_count',
            'position': 'position',
            'updated_at': 'updated_at',
            'folders_url': 'folders_url',
            'files_url': 'files_url',
            'full_name': 'full_name',
            'lock_at': 'lock_at',
            'id': 'id',
            'folders_count': 'folders_count',
            'name': 'name',
            'parent_folder_id': 'parent_folder_id',
            'created_at': 'created_at',
            'unlock_at': 'unlock_at',
            'hidden': 'hidden',
            'hidden_for_user': 'hidden_for_user',
            'locked': 'locked',
            'locked_for_user': 'locked_for_user'
        }

        self._context_type = context_type
        self._context_id = context_id
        self._files_count = files_count
        self._position = position
        self._updated_at = updated_at
        self._folders_url = folders_url
        self._files_url = files_url
        self._full_name = full_name
        self._lock_at = lock_at
        self._id = id
        self._folders_count = folders_count
        self._name = name
        self._parent_folder_id = parent_folder_id
        self._created_at = created_at
        self._unlock_at = unlock_at
        self._hidden = hidden
        self._hidden_for_user = hidden_for_user
        self._locked = locked
        self._locked_for_user = locked_for_user

    @property
    def context_type(self):
        """
        Gets the context_type of this Folder.


        :return: The context_type of this Folder.
        :rtype: str
        """
        return self._context_type

    @context_type.setter
    def context_type(self, context_type):
        """
        Sets the context_type of this Folder.


        :param context_type: The context_type of this Folder.
        :type: str
        """

        self._context_type = context_type

    @property
    def context_id(self):
        """
        Gets the context_id of this Folder.


        :return: The context_id of this Folder.
        :rtype: int
        """
        return self._context_id

    @context_id.setter
    def context_id(self, context_id):
        """
        Sets the context_id of this Folder.


        :param context_id: The context_id of this Folder.
        :type: int
        """

        self._context_id = context_id

    @property
    def files_count(self):
        """
        Gets the files_count of this Folder.


        :return: The files_count of this Folder.
        :rtype: int
        """
        return self._files_count

    @files_count.setter
    def files_count(self, files_count):
        """
        Sets the files_count of this Folder.


        :param files_count: The files_count of this Folder.
        :type: int
        """

        self._files_count = files_count

    @property
    def position(self):
        """
        Gets the position of this Folder.


        :return: The position of this Folder.
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """
        Sets the position of this Folder.


        :param position: The position of this Folder.
        :type: int
        """

        self._position = position

    @property
    def updated_at(self):
        """
        Gets the updated_at of this Folder.


        :return: The updated_at of this Folder.
        :rtype: Datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """
        Sets the updated_at of this Folder.


        :param updated_at: The updated_at of this Folder.
        :type: Datetime
        """

        self._updated_at = updated_at

    @property
    def folders_url(self):
        """
        Gets the folders_url of this Folder.


        :return: The folders_url of this Folder.
        :rtype: str
        """
        return self._folders_url

    @folders_url.setter
    def folders_url(self, folders_url):
        """
        Sets the folders_url of this Folder.


        :param folders_url: The folders_url of this Folder.
        :type: str
        """

        self._folders_url = folders_url

    @property
    def files_url(self):
        """
        Gets the files_url of this Folder.


        :return: The files_url of this Folder.
        :rtype: str
        """
        return self._files_url

    @files_url.setter
    def files_url(self, files_url):
        """
        Sets the files_url of this Folder.


        :param files_url: The files_url of this Folder.
        :type: str
        """

        self._files_url = files_url

    @property
    def full_name(self):
        """
        Gets the full_name of this Folder.


        :return: The full_name of this Folder.
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """
        Sets the full_name of this Folder.


        :param full_name: The full_name of this Folder.
        :type: str
        """

        self._full_name = full_name

    @property
    def lock_at(self):
        """
        Gets the lock_at of this Folder.


        :return: The lock_at of this Folder.
        :rtype: Datetime
        """
        return self._lock_at

    @lock_at.setter
    def lock_at(self, lock_at):
        """
        Sets the lock_at of this Folder.


        :param lock_at: The lock_at of this Folder.
        :type: Datetime
        """

        self._lock_at = lock_at

    @property
    def id(self):
        """
        Gets the id of this Folder.


        :return: The id of this Folder.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Folder.


        :param id: The id of this Folder.
        :type: int
        """

        self._id = id

    @property
    def folders_count(self):
        """
        Gets the folders_count of this Folder.


        :return: The folders_count of this Folder.
        :rtype: int
        """
        return self._folders_count

    @folders_count.setter
    def folders_count(self, folders_count):
        """
        Sets the folders_count of this Folder.


        :param folders_count: The folders_count of this Folder.
        :type: int
        """

        self._folders_count = folders_count

    @property
    def name(self):
        """
        Gets the name of this Folder.


        :return: The name of this Folder.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Folder.


        :param name: The name of this Folder.
        :type: str
        """

        self._name = name

    @property
    def parent_folder_id(self):
        """
        Gets the parent_folder_id of this Folder.


        :return: The parent_folder_id of this Folder.
        :rtype: int
        """
        return self._parent_folder_id

    @parent_folder_id.setter
    def parent_folder_id(self, parent_folder_id):
        """
        Sets the parent_folder_id of this Folder.


        :param parent_folder_id: The parent_folder_id of this Folder.
        :type: int
        """

        self._parent_folder_id = parent_folder_id

    @property
    def created_at(self):
        """
        Gets the created_at of this Folder.


        :return: The created_at of this Folder.
        :rtype: Datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this Folder.


        :param created_at: The created_at of this Folder.
        :type: Datetime
        """

        self._created_at = created_at

    @property
    def unlock_at(self):
        """
        Gets the unlock_at of this Folder.


        :return: The unlock_at of this Folder.
        :rtype: Datetime
        """
        return self._unlock_at

    @unlock_at.setter
    def unlock_at(self, unlock_at):
        """
        Sets the unlock_at of this Folder.


        :param unlock_at: The unlock_at of this Folder.
        :type: Datetime
        """

        self._unlock_at = unlock_at

    @property
    def hidden(self):
        """
        Gets the hidden of this Folder.


        :return: The hidden of this Folder.
        :rtype: bool
        """
        return self._hidden

    @hidden.setter
    def hidden(self, hidden):
        """
        Sets the hidden of this Folder.


        :param hidden: The hidden of this Folder.
        :type: bool
        """

        self._hidden = hidden

    @property
    def hidden_for_user(self):
        """
        Gets the hidden_for_user of this Folder.


        :return: The hidden_for_user of this Folder.
        :rtype: bool
        """
        return self._hidden_for_user

    @hidden_for_user.setter
    def hidden_for_user(self, hidden_for_user):
        """
        Sets the hidden_for_user of this Folder.


        :param hidden_for_user: The hidden_for_user of this Folder.
        :type: bool
        """

        self._hidden_for_user = hidden_for_user

    @property
    def locked(self):
        """
        Gets the locked of this Folder.


        :return: The locked of this Folder.
        :rtype: bool
        """
        return self._locked

    @locked.setter
    def locked(self, locked):
        """
        Sets the locked of this Folder.


        :param locked: The locked of this Folder.
        :type: bool
        """

        self._locked = locked

    @property
    def locked_for_user(self):
        """
        Gets the locked_for_user of this Folder.


        :return: The locked_for_user of this Folder.
        :rtype: bool
        """
        return self._locked_for_user

    @locked_for_user.setter
    def locked_for_user(self, locked_for_user):
        """
        Sets the locked_for_user of this Folder.


        :param locked_for_user: The locked_for_user of this Folder.
        :type: bool
        """

        self._locked_for_user = locked_for_user

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
