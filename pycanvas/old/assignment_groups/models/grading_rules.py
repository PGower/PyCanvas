# coding: utf-8

"""


    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from ...base_model import BaseModel
from pprint import pformat
from six import iteritems
import re


class GradingRules(BaseModel):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, drop_lowest=None, drop_highest=None, never_drop=None):
        """
        GradingRules - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'drop_lowest': 'int',
            'drop_highest': 'int',
            'never_drop': 'list[int]'
        }

        self.attribute_map = {
            'drop_lowest': 'drop_lowest',
            'drop_highest': 'drop_highest',
            'never_drop': 'never_drop'
        }

        self._drop_lowest = drop_lowest
        self._drop_highest = drop_highest
        self._never_drop = never_drop

    @property
    def drop_lowest(self):
        """
        Gets the drop_lowest of this GradingRules.
        Number of lowest scores to be dropped for each user.

        :return: The drop_lowest of this GradingRules.
        :rtype: int
        """
        return self._drop_lowest

    @drop_lowest.setter
    def drop_lowest(self, drop_lowest):
        """
        Sets the drop_lowest of this GradingRules.
        Number of lowest scores to be dropped for each user.

        :param drop_lowest: The drop_lowest of this GradingRules.
        :type: int
        """

        self._drop_lowest = drop_lowest

    @property
    def drop_highest(self):
        """
        Gets the drop_highest of this GradingRules.
        Number of highest scores to be dropped for each user.

        :return: The drop_highest of this GradingRules.
        :rtype: int
        """
        return self._drop_highest

    @drop_highest.setter
    def drop_highest(self, drop_highest):
        """
        Sets the drop_highest of this GradingRules.
        Number of highest scores to be dropped for each user.

        :param drop_highest: The drop_highest of this GradingRules.
        :type: int
        """

        self._drop_highest = drop_highest

    @property
    def never_drop(self):
        """
        Gets the never_drop of this GradingRules.
        Assignment IDs that should never be dropped.

        :return: The never_drop of this GradingRules.
        :rtype: list[int]
        """
        return self._never_drop

    @never_drop.setter
    def never_drop(self, never_drop):
        """
        Sets the never_drop of this GradingRules.
        Assignment IDs that should never be dropped.

        :param never_drop: The never_drop of this GradingRules.
        :type: list[int]
        """

        self._never_drop = never_drop

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
