# coding: utf-8

"""


    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from ...base_model import BaseModel
from pprint import pformat
from six import iteritems
import re


class SisImportCounts(BaseModel):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, accounts=None, terms=None, abstract_courses=None, courses=None, sections=None, xlists=None, users=None, enrollments=None, groups=None, group_memberships=None, grade_publishing_results=None):
        """
        SisImportCounts - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'accounts': 'int',
            'terms': 'int',
            'abstract_courses': 'int',
            'courses': 'int',
            'sections': 'int',
            'xlists': 'int',
            'users': 'int',
            'enrollments': 'int',
            'groups': 'int',
            'group_memberships': 'int',
            'grade_publishing_results': 'int'
        }

        self.attribute_map = {
            'accounts': 'accounts',
            'terms': 'terms',
            'abstract_courses': 'abstract_courses',
            'courses': 'courses',
            'sections': 'sections',
            'xlists': 'xlists',
            'users': 'users',
            'enrollments': 'enrollments',
            'groups': 'groups',
            'group_memberships': 'group_memberships',
            'grade_publishing_results': 'grade_publishing_results'
        }

        self._accounts = accounts
        self._terms = terms
        self._abstract_courses = abstract_courses
        self._courses = courses
        self._sections = sections
        self._xlists = xlists
        self._users = users
        self._enrollments = enrollments
        self._groups = groups
        self._group_memberships = group_memberships
        self._grade_publishing_results = grade_publishing_results

    @property
    def accounts(self):
        """
        Gets the accounts of this SisImportCounts.


        :return: The accounts of this SisImportCounts.
        :rtype: int
        """
        return self._accounts

    @accounts.setter
    def accounts(self, accounts):
        """
        Sets the accounts of this SisImportCounts.


        :param accounts: The accounts of this SisImportCounts.
        :type: int
        """

        self._accounts = accounts

    @property
    def terms(self):
        """
        Gets the terms of this SisImportCounts.


        :return: The terms of this SisImportCounts.
        :rtype: int
        """
        return self._terms

    @terms.setter
    def terms(self, terms):
        """
        Sets the terms of this SisImportCounts.


        :param terms: The terms of this SisImportCounts.
        :type: int
        """

        self._terms = terms

    @property
    def abstract_courses(self):
        """
        Gets the abstract_courses of this SisImportCounts.


        :return: The abstract_courses of this SisImportCounts.
        :rtype: int
        """
        return self._abstract_courses

    @abstract_courses.setter
    def abstract_courses(self, abstract_courses):
        """
        Sets the abstract_courses of this SisImportCounts.


        :param abstract_courses: The abstract_courses of this SisImportCounts.
        :type: int
        """

        self._abstract_courses = abstract_courses

    @property
    def courses(self):
        """
        Gets the courses of this SisImportCounts.


        :return: The courses of this SisImportCounts.
        :rtype: int
        """
        return self._courses

    @courses.setter
    def courses(self, courses):
        """
        Sets the courses of this SisImportCounts.


        :param courses: The courses of this SisImportCounts.
        :type: int
        """

        self._courses = courses

    @property
    def sections(self):
        """
        Gets the sections of this SisImportCounts.


        :return: The sections of this SisImportCounts.
        :rtype: int
        """
        return self._sections

    @sections.setter
    def sections(self, sections):
        """
        Sets the sections of this SisImportCounts.


        :param sections: The sections of this SisImportCounts.
        :type: int
        """

        self._sections = sections

    @property
    def xlists(self):
        """
        Gets the xlists of this SisImportCounts.


        :return: The xlists of this SisImportCounts.
        :rtype: int
        """
        return self._xlists

    @xlists.setter
    def xlists(self, xlists):
        """
        Sets the xlists of this SisImportCounts.


        :param xlists: The xlists of this SisImportCounts.
        :type: int
        """

        self._xlists = xlists

    @property
    def users(self):
        """
        Gets the users of this SisImportCounts.


        :return: The users of this SisImportCounts.
        :rtype: int
        """
        return self._users

    @users.setter
    def users(self, users):
        """
        Sets the users of this SisImportCounts.


        :param users: The users of this SisImportCounts.
        :type: int
        """

        self._users = users

    @property
    def enrollments(self):
        """
        Gets the enrollments of this SisImportCounts.


        :return: The enrollments of this SisImportCounts.
        :rtype: int
        """
        return self._enrollments

    @enrollments.setter
    def enrollments(self, enrollments):
        """
        Sets the enrollments of this SisImportCounts.


        :param enrollments: The enrollments of this SisImportCounts.
        :type: int
        """

        self._enrollments = enrollments

    @property
    def groups(self):
        """
        Gets the groups of this SisImportCounts.


        :return: The groups of this SisImportCounts.
        :rtype: int
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """
        Sets the groups of this SisImportCounts.


        :param groups: The groups of this SisImportCounts.
        :type: int
        """

        self._groups = groups

    @property
    def group_memberships(self):
        """
        Gets the group_memberships of this SisImportCounts.


        :return: The group_memberships of this SisImportCounts.
        :rtype: int
        """
        return self._group_memberships

    @group_memberships.setter
    def group_memberships(self, group_memberships):
        """
        Sets the group_memberships of this SisImportCounts.


        :param group_memberships: The group_memberships of this SisImportCounts.
        :type: int
        """

        self._group_memberships = group_memberships

    @property
    def grade_publishing_results(self):
        """
        Gets the grade_publishing_results of this SisImportCounts.


        :return: The grade_publishing_results of this SisImportCounts.
        :rtype: int
        """
        return self._grade_publishing_results

    @grade_publishing_results.setter
    def grade_publishing_results(self, grade_publishing_results):
        """
        Sets the grade_publishing_results of this SisImportCounts.


        :param grade_publishing_results: The grade_publishing_results of this SisImportCounts.
        :type: int
        """

        self._grade_publishing_results = grade_publishing_results

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
