# coding: utf-8

"""


    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from ...base_model import BaseModel
from pprint import pformat
from six import iteritems
import re


class SubmissionHistory(BaseModel):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, submission_id=None, versions=None):
        """
        SubmissionHistory - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'submission_id': 'int',
            'versions': 'list[int]'
        }

        self.attribute_map = {
            'submission_id': 'submission_id',
            'versions': 'versions'
        }

        self._submission_id = submission_id
        self._versions = versions

    @property
    def submission_id(self):
        """
        Gets the submission_id of this SubmissionHistory.
        the id of the submission

        :return: The submission_id of this SubmissionHistory.
        :rtype: int
        """
        return self._submission_id

    @submission_id.setter
    def submission_id(self, submission_id):
        """
        Sets the submission_id of this SubmissionHistory.
        the id of the submission

        :param submission_id: The submission_id of this SubmissionHistory.
        :type: int
        """

        self._submission_id = submission_id

    @property
    def versions(self):
        """
        Gets the versions of this SubmissionHistory.
        an array of all the versions of this submission

        :return: The versions of this SubmissionHistory.
        :rtype: list[int]
        """
        return self._versions

    @versions.setter
    def versions(self, versions):
        """
        Sets the versions of this SubmissionHistory.
        an array of all the versions of this submission

        :param versions: The versions of this SubmissionHistory.
        :type: list[int]
        """

        self._versions = versions

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
