# coding: utf-8

"""


    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from ...base_model import BaseModel
from pprint import pformat
from six import iteritems
import re


class Profile(BaseModel):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, name=None, short_name=None, sortable_name=None, title=None, bio=None, primary_email=None, login_id=None, sis_user_id=None, sis_login_id=None, avatar_url=None, calendar=None, time_zone=None, locale=None):
        """
        Profile - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'name': 'str',
            'short_name': 'str',
            'sortable_name': 'str',
            'title': 'str',
            'bio': 'str',
            'primary_email': 'str',
            'login_id': 'str',
            'sis_user_id': 'str',
            'sis_login_id': 'str',
            'avatar_url': 'str',
            'calendar': 'CalendarLink',
            'time_zone': 'str',
            'locale': 'str'
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'short_name': 'short_name',
            'sortable_name': 'sortable_name',
            'title': 'title',
            'bio': 'bio',
            'primary_email': 'primary_email',
            'login_id': 'login_id',
            'sis_user_id': 'sis_user_id',
            'sis_login_id': 'sis_login_id',
            'avatar_url': 'avatar_url',
            'calendar': 'calendar',
            'time_zone': 'time_zone',
            'locale': 'locale'
        }

        self._id = id
        self._name = name
        self._short_name = short_name
        self._sortable_name = sortable_name
        self._title = title
        self._bio = bio
        self._primary_email = primary_email
        self._login_id = login_id
        self._sis_user_id = sis_user_id
        self._sis_login_id = sis_login_id
        self._avatar_url = avatar_url
        self._calendar = calendar
        self._time_zone = time_zone
        self._locale = locale

    @property
    def id(self):
        """
        Gets the id of this Profile.
        The ID of the user.

        :return: The id of this Profile.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Profile.
        The ID of the user.

        :param id: The id of this Profile.
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """
        Gets the name of this Profile.
        Sample User

        :return: The name of this Profile.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Profile.
        Sample User

        :param name: The name of this Profile.
        :type: str
        """

        self._name = name

    @property
    def short_name(self):
        """
        Gets the short_name of this Profile.
        Sample User

        :return: The short_name of this Profile.
        :rtype: str
        """
        return self._short_name

    @short_name.setter
    def short_name(self, short_name):
        """
        Sets the short_name of this Profile.
        Sample User

        :param short_name: The short_name of this Profile.
        :type: str
        """

        self._short_name = short_name

    @property
    def sortable_name(self):
        """
        Gets the sortable_name of this Profile.
        user, sample

        :return: The sortable_name of this Profile.
        :rtype: str
        """
        return self._sortable_name

    @sortable_name.setter
    def sortable_name(self, sortable_name):
        """
        Sets the sortable_name of this Profile.
        user, sample

        :param sortable_name: The sortable_name of this Profile.
        :type: str
        """

        self._sortable_name = sortable_name

    @property
    def title(self):
        """
        Gets the title of this Profile.


        :return: The title of this Profile.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """
        Sets the title of this Profile.


        :param title: The title of this Profile.
        :type: str
        """

        self._title = title

    @property
    def bio(self):
        """
        Gets the bio of this Profile.


        :return: The bio of this Profile.
        :rtype: str
        """
        return self._bio

    @bio.setter
    def bio(self, bio):
        """
        Sets the bio of this Profile.


        :param bio: The bio of this Profile.
        :type: str
        """

        self._bio = bio

    @property
    def primary_email(self):
        """
        Gets the primary_email of this Profile.
        sample_user@example.com

        :return: The primary_email of this Profile.
        :rtype: str
        """
        return self._primary_email

    @primary_email.setter
    def primary_email(self, primary_email):
        """
        Sets the primary_email of this Profile.
        sample_user@example.com

        :param primary_email: The primary_email of this Profile.
        :type: str
        """

        self._primary_email = primary_email

    @property
    def login_id(self):
        """
        Gets the login_id of this Profile.
        sample_user@example.com

        :return: The login_id of this Profile.
        :rtype: str
        """
        return self._login_id

    @login_id.setter
    def login_id(self, login_id):
        """
        Sets the login_id of this Profile.
        sample_user@example.com

        :param login_id: The login_id of this Profile.
        :type: str
        """

        self._login_id = login_id

    @property
    def sis_user_id(self):
        """
        Gets the sis_user_id of this Profile.
        sis1

        :return: The sis_user_id of this Profile.
        :rtype: str
        """
        return self._sis_user_id

    @sis_user_id.setter
    def sis_user_id(self, sis_user_id):
        """
        Sets the sis_user_id of this Profile.
        sis1

        :param sis_user_id: The sis_user_id of this Profile.
        :type: str
        """

        self._sis_user_id = sis_user_id

    @property
    def sis_login_id(self):
        """
        Gets the sis_login_id of this Profile.
        sis1-login

        :return: The sis_login_id of this Profile.
        :rtype: str
        """
        return self._sis_login_id

    @sis_login_id.setter
    def sis_login_id(self, sis_login_id):
        """
        Sets the sis_login_id of this Profile.
        sis1-login

        :param sis_login_id: The sis_login_id of this Profile.
        :type: str
        """

        self._sis_login_id = sis_login_id

    @property
    def avatar_url(self):
        """
        Gets the avatar_url of this Profile.
        The avatar_url can change over time, so we recommend not caching it for more than a few hours

        :return: The avatar_url of this Profile.
        :rtype: str
        """
        return self._avatar_url

    @avatar_url.setter
    def avatar_url(self, avatar_url):
        """
        Sets the avatar_url of this Profile.
        The avatar_url can change over time, so we recommend not caching it for more than a few hours

        :param avatar_url: The avatar_url of this Profile.
        :type: str
        """

        self._avatar_url = avatar_url

    @property
    def calendar(self):
        """
        Gets the calendar of this Profile.


        :return: The calendar of this Profile.
        :rtype: CalendarLink
        """
        return self._calendar

    @calendar.setter
    def calendar(self, calendar):
        """
        Sets the calendar of this Profile.


        :param calendar: The calendar of this Profile.
        :type: CalendarLink
        """

        self._calendar = calendar

    @property
    def time_zone(self):
        """
        Gets the time_zone of this Profile.
        Optional: This field is only returned in certain API calls, and will return the IANA time zone name of the user's preferred timezone.

        :return: The time_zone of this Profile.
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """
        Sets the time_zone of this Profile.
        Optional: This field is only returned in certain API calls, and will return the IANA time zone name of the user's preferred timezone.

        :param time_zone: The time_zone of this Profile.
        :type: str
        """

        self._time_zone = time_zone

    @property
    def locale(self):
        """
        Gets the locale of this Profile.
        The users locale.

        :return: The locale of this Profile.
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """
        Sets the locale of this Profile.
        The users locale.

        :param locale: The locale of this Profile.
        :type: str
        """

        self._locale = locale

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
