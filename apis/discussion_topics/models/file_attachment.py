# coding: utf-8

"""


    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from ...base_model import BaseModel
from pprint import pformat
from six import iteritems
import re


class FileAttachment(BaseModel):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, content_type=None, url=None, filename=None, display_name=None):
        """
        FileAttachment - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'content_type': 'str',
            'url': 'str',
            'filename': 'str',
            'display_name': 'str'
        }

        self.attribute_map = {
            'content_type': 'content-type',
            'url': 'url',
            'filename': 'filename',
            'display_name': 'display_name'
        }

        self._content_type = content_type
        self._url = url
        self._filename = filename
        self._display_name = display_name

    @property
    def content_type(self):
        """
        Gets the content_type of this FileAttachment.


        :return: The content_type of this FileAttachment.
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """
        Sets the content_type of this FileAttachment.


        :param content_type: The content_type of this FileAttachment.
        :type: str
        """

        self._content_type = content_type

    @property
    def url(self):
        """
        Gets the url of this FileAttachment.


        :return: The url of this FileAttachment.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """
        Sets the url of this FileAttachment.


        :param url: The url of this FileAttachment.
        :type: str
        """

        self._url = url

    @property
    def filename(self):
        """
        Gets the filename of this FileAttachment.


        :return: The filename of this FileAttachment.
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """
        Sets the filename of this FileAttachment.


        :param filename: The filename of this FileAttachment.
        :type: str
        """

        self._filename = filename

    @property
    def display_name(self):
        """
        Gets the display_name of this FileAttachment.


        :return: The display_name of this FileAttachment.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """
        Sets the display_name of this FileAttachment.


        :param display_name: The display_name of this FileAttachment.
        :type: str
        """

        self._display_name = display_name

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
