# coding: utf-8

"""


    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from ...base_model import BaseModel
from pprint import pformat
from six import iteritems
import re


class AuthenticationEvent(BaseModel):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, created_at=None, event_type=None, pseudonym_id=None, account_id=None, user_id=None):
        """
        AuthenticationEvent - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'created_at': 'Datetime',
            'event_type': 'str',
            'pseudonym_id': 'int',
            'account_id': 'int',
            'user_id': 'int'
        }

        self.attribute_map = {
            'created_at': 'created_at',
            'event_type': 'event_type',
            'pseudonym_id': 'pseudonym_id',
            'account_id': 'account_id',
            'user_id': 'user_id'
        }

        self._created_at = created_at
        self._event_type = event_type
        self._pseudonym_id = pseudonym_id
        self._account_id = account_id
        self._user_id = user_id

    @property
    def created_at(self):
        """
        Gets the created_at of this AuthenticationEvent.
        timestamp of the event

        :return: The created_at of this AuthenticationEvent.
        :rtype: Datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this AuthenticationEvent.
        timestamp of the event

        :param created_at: The created_at of this AuthenticationEvent.
        :type: Datetime
        """

        self._created_at = created_at

    @property
    def event_type(self):
        """
        Gets the event_type of this AuthenticationEvent.
        authentication event type ('login' or 'logout')

        :return: The event_type of this AuthenticationEvent.
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """
        Sets the event_type of this AuthenticationEvent.
        authentication event type ('login' or 'logout')

        :param event_type: The event_type of this AuthenticationEvent.
        :type: str
        """

        self._event_type = event_type

    @property
    def pseudonym_id(self):
        """
        Gets the pseudonym_id of this AuthenticationEvent.
        ID of the pseudonym (login) associated with the event

        :return: The pseudonym_id of this AuthenticationEvent.
        :rtype: int
        """
        return self._pseudonym_id

    @pseudonym_id.setter
    def pseudonym_id(self, pseudonym_id):
        """
        Sets the pseudonym_id of this AuthenticationEvent.
        ID of the pseudonym (login) associated with the event

        :param pseudonym_id: The pseudonym_id of this AuthenticationEvent.
        :type: int
        """

        self._pseudonym_id = pseudonym_id

    @property
    def account_id(self):
        """
        Gets the account_id of this AuthenticationEvent.
        ID of the account associated with the event. will match the account_id in the associated pseudonym.

        :return: The account_id of this AuthenticationEvent.
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """
        Sets the account_id of this AuthenticationEvent.
        ID of the account associated with the event. will match the account_id in the associated pseudonym.

        :param account_id: The account_id of this AuthenticationEvent.
        :type: int
        """

        self._account_id = account_id

    @property
    def user_id(self):
        """
        Gets the user_id of this AuthenticationEvent.
        ID of the user associated with the event will match the user_id in the associated pseudonym.

        :return: The user_id of this AuthenticationEvent.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """
        Sets the user_id of this AuthenticationEvent.
        ID of the user associated with the event will match the user_id in the associated pseudonym.

        :param user_id: The user_id of this AuthenticationEvent.
        :type: int
        """

        self._user_id = user_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
